// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CloudflareStat is an object representing the database table.
type CloudflareStat struct {
	Date        time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	Bytes       int64     `boil:"bytes" json:"bytes" toml:"bytes" yaml:"bytes"`
	CachedBytes int64     `boil:"cached_bytes" json:"cached_bytes" toml:"cached_bytes" yaml:"cached_bytes"`
	PageViews   int64     `boil:"page_views" json:"page_views" toml:"page_views" yaml:"page_views"`
	Requests    int64     `boil:"requests" json:"requests" toml:"requests" yaml:"requests"`
	Threats     int64     `boil:"threats" json:"threats" toml:"threats" yaml:"threats"`
	Uniques     int64     `boil:"uniques" json:"uniques" toml:"uniques" yaml:"uniques"`

	R *cloudflareStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cloudflareStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CloudflareStatColumns = struct {
	Date        string
	Bytes       string
	CachedBytes string
	PageViews   string
	Requests    string
	Threats     string
	Uniques     string
}{
	Date:        "date",
	Bytes:       "bytes",
	CachedBytes: "cached_bytes",
	PageViews:   "page_views",
	Requests:    "requests",
	Threats:     "threats",
	Uniques:     "uniques",
}

var CloudflareStatTableColumns = struct {
	Date        string
	Bytes       string
	CachedBytes string
	PageViews   string
	Requests    string
	Threats     string
	Uniques     string
}{
	Date:        "cloudflare_stats.date",
	Bytes:       "cloudflare_stats.bytes",
	CachedBytes: "cloudflare_stats.cached_bytes",
	PageViews:   "cloudflare_stats.page_views",
	Requests:    "cloudflare_stats.requests",
	Threats:     "cloudflare_stats.threats",
	Uniques:     "cloudflare_stats.uniques",
}

// Generated where

var CloudflareStatWhere = struct {
	Date        whereHelpertime_Time
	Bytes       whereHelperint64
	CachedBytes whereHelperint64
	PageViews   whereHelperint64
	Requests    whereHelperint64
	Threats     whereHelperint64
	Uniques     whereHelperint64
}{
	Date:        whereHelpertime_Time{field: "\"cloudflare_stats\".\"date\""},
	Bytes:       whereHelperint64{field: "\"cloudflare_stats\".\"bytes\""},
	CachedBytes: whereHelperint64{field: "\"cloudflare_stats\".\"cached_bytes\""},
	PageViews:   whereHelperint64{field: "\"cloudflare_stats\".\"page_views\""},
	Requests:    whereHelperint64{field: "\"cloudflare_stats\".\"requests\""},
	Threats:     whereHelperint64{field: "\"cloudflare_stats\".\"threats\""},
	Uniques:     whereHelperint64{field: "\"cloudflare_stats\".\"uniques\""},
}

// CloudflareStatRels is where relationship names are stored.
var CloudflareStatRels = struct {
}{}

// cloudflareStatR is where relationships are stored.
type cloudflareStatR struct {
}

// NewStruct creates a new relationship struct
func (*cloudflareStatR) NewStruct() *cloudflareStatR {
	return &cloudflareStatR{}
}

// cloudflareStatL is where Load methods for each relationship are stored.
type cloudflareStatL struct{}

var (
	cloudflareStatAllColumns            = []string{"date", "bytes", "cached_bytes", "page_views", "requests", "threats", "uniques"}
	cloudflareStatColumnsWithoutDefault = []string{"date", "bytes", "cached_bytes", "page_views", "requests", "threats", "uniques"}
	cloudflareStatColumnsWithDefault    = []string{}
	cloudflareStatPrimaryKeyColumns     = []string{"date"}
	cloudflareStatGeneratedColumns      = []string{}
)

type (
	// CloudflareStatSlice is an alias for a slice of pointers to CloudflareStat.
	// This should almost always be used instead of []CloudflareStat.
	CloudflareStatSlice []*CloudflareStat
	// CloudflareStatHook is the signature for custom CloudflareStat hook methods
	CloudflareStatHook func(context.Context, boil.ContextExecutor, *CloudflareStat) error

	cloudflareStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cloudflareStatType                 = reflect.TypeOf(&CloudflareStat{})
	cloudflareStatMapping              = queries.MakeStructMapping(cloudflareStatType)
	cloudflareStatPrimaryKeyMapping, _ = queries.BindMapping(cloudflareStatType, cloudflareStatMapping, cloudflareStatPrimaryKeyColumns)
	cloudflareStatInsertCacheMut       sync.RWMutex
	cloudflareStatInsertCache          = make(map[string]insertCache)
	cloudflareStatUpdateCacheMut       sync.RWMutex
	cloudflareStatUpdateCache          = make(map[string]updateCache)
	cloudflareStatUpsertCacheMut       sync.RWMutex
	cloudflareStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cloudflareStatAfterSelectHooks []CloudflareStatHook

var cloudflareStatBeforeInsertHooks []CloudflareStatHook
var cloudflareStatAfterInsertHooks []CloudflareStatHook

var cloudflareStatBeforeUpdateHooks []CloudflareStatHook
var cloudflareStatAfterUpdateHooks []CloudflareStatHook

var cloudflareStatBeforeDeleteHooks []CloudflareStatHook
var cloudflareStatAfterDeleteHooks []CloudflareStatHook

var cloudflareStatBeforeUpsertHooks []CloudflareStatHook
var cloudflareStatAfterUpsertHooks []CloudflareStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CloudflareStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CloudflareStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CloudflareStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CloudflareStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CloudflareStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CloudflareStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CloudflareStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CloudflareStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CloudflareStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCloudflareStatHook registers your hook function for all future operations.
func AddCloudflareStatHook(hookPoint boil.HookPoint, cloudflareStatHook CloudflareStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cloudflareStatAfterSelectHooks = append(cloudflareStatAfterSelectHooks, cloudflareStatHook)
	case boil.BeforeInsertHook:
		cloudflareStatBeforeInsertHooks = append(cloudflareStatBeforeInsertHooks, cloudflareStatHook)
	case boil.AfterInsertHook:
		cloudflareStatAfterInsertHooks = append(cloudflareStatAfterInsertHooks, cloudflareStatHook)
	case boil.BeforeUpdateHook:
		cloudflareStatBeforeUpdateHooks = append(cloudflareStatBeforeUpdateHooks, cloudflareStatHook)
	case boil.AfterUpdateHook:
		cloudflareStatAfterUpdateHooks = append(cloudflareStatAfterUpdateHooks, cloudflareStatHook)
	case boil.BeforeDeleteHook:
		cloudflareStatBeforeDeleteHooks = append(cloudflareStatBeforeDeleteHooks, cloudflareStatHook)
	case boil.AfterDeleteHook:
		cloudflareStatAfterDeleteHooks = append(cloudflareStatAfterDeleteHooks, cloudflareStatHook)
	case boil.BeforeUpsertHook:
		cloudflareStatBeforeUpsertHooks = append(cloudflareStatBeforeUpsertHooks, cloudflareStatHook)
	case boil.AfterUpsertHook:
		cloudflareStatAfterUpsertHooks = append(cloudflareStatAfterUpsertHooks, cloudflareStatHook)
	}
}

// OneG returns a single cloudflareStat record from the query using the global executor.
func (q cloudflareStatQuery) OneG(ctx context.Context) (*CloudflareStat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single cloudflareStat record from the query.
func (q cloudflareStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CloudflareStat, error) {
	o := &CloudflareStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for cloudflare_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CloudflareStat records from the query using the global executor.
func (q cloudflareStatQuery) AllG(ctx context.Context) (CloudflareStatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CloudflareStat records from the query.
func (q cloudflareStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (CloudflareStatSlice, error) {
	var o []*CloudflareStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to CloudflareStat slice")
	}

	if len(cloudflareStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CloudflareStat records in the query using the global executor
func (q cloudflareStatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CloudflareStat records in the query.
func (q cloudflareStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count cloudflare_stats rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q cloudflareStatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q cloudflareStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if cloudflare_stats exists")
	}

	return count > 0, nil
}

// CloudflareStats retrieves all the records using an executor.
func CloudflareStats(mods ...qm.QueryMod) cloudflareStatQuery {
	mods = append(mods, qm.From("\"cloudflare_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cloudflare_stats\".*"})
	}

	return cloudflareStatQuery{q}
}

// FindCloudflareStatG retrieves a single record by ID.
func FindCloudflareStatG(ctx context.Context, date time.Time, selectCols ...string) (*CloudflareStat, error) {
	return FindCloudflareStat(ctx, boil.GetContextDB(), date, selectCols...)
}

// FindCloudflareStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCloudflareStat(ctx context.Context, exec boil.ContextExecutor, date time.Time, selectCols ...string) (*CloudflareStat, error) {
	cloudflareStatObj := &CloudflareStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cloudflare_stats\" where \"date\"=$1", sel,
	)

	q := queries.Raw(query, date)

	err := q.Bind(ctx, exec, cloudflareStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from cloudflare_stats")
	}

	if err = cloudflareStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cloudflareStatObj, err
	}

	return cloudflareStatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CloudflareStat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CloudflareStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no cloudflare_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cloudflareStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cloudflareStatInsertCacheMut.RLock()
	cache, cached := cloudflareStatInsertCache[key]
	cloudflareStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cloudflareStatAllColumns,
			cloudflareStatColumnsWithDefault,
			cloudflareStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cloudflareStatType, cloudflareStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cloudflareStatType, cloudflareStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cloudflare_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cloudflare_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into cloudflare_stats")
	}

	if !cached {
		cloudflareStatInsertCacheMut.Lock()
		cloudflareStatInsertCache[key] = cache
		cloudflareStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CloudflareStat record using the global executor.
// See Update for more documentation.
func (o *CloudflareStat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CloudflareStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CloudflareStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cloudflareStatUpdateCacheMut.RLock()
	cache, cached := cloudflareStatUpdateCache[key]
	cloudflareStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cloudflareStatAllColumns,
			cloudflareStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update cloudflare_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cloudflare_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cloudflareStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cloudflareStatType, cloudflareStatMapping, append(wl, cloudflareStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update cloudflare_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for cloudflare_stats")
	}

	if !cached {
		cloudflareStatUpdateCacheMut.Lock()
		cloudflareStatUpdateCache[key] = cache
		cloudflareStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q cloudflareStatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q cloudflareStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for cloudflare_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for cloudflare_stats")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CloudflareStatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CloudflareStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cloudflare_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cloudflareStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in cloudflareStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all cloudflareStat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CloudflareStat) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CloudflareStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no cloudflare_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cloudflareStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cloudflareStatUpsertCacheMut.RLock()
	cache, cached := cloudflareStatUpsertCache[key]
	cloudflareStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cloudflareStatAllColumns,
			cloudflareStatColumnsWithDefault,
			cloudflareStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cloudflareStatAllColumns,
			cloudflareStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert cloudflare_stats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cloudflareStatPrimaryKeyColumns))
			copy(conflict, cloudflareStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cloudflare_stats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cloudflareStatType, cloudflareStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cloudflareStatType, cloudflareStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert cloudflare_stats")
	}

	if !cached {
		cloudflareStatUpsertCacheMut.Lock()
		cloudflareStatUpsertCache[key] = cache
		cloudflareStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CloudflareStat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CloudflareStat) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CloudflareStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CloudflareStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no CloudflareStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cloudflareStatPrimaryKeyMapping)
	sql := "DELETE FROM \"cloudflare_stats\" WHERE \"date\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from cloudflare_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for cloudflare_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q cloudflareStatQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q cloudflareStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no cloudflareStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from cloudflare_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for cloudflare_stats")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CloudflareStatSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CloudflareStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cloudflareStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cloudflare_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cloudflareStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from cloudflareStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for cloudflare_stats")
	}

	if len(cloudflareStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CloudflareStat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no CloudflareStat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CloudflareStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCloudflareStat(ctx, exec, o.Date)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CloudflareStatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty CloudflareStatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CloudflareStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CloudflareStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cloudflare_stats\".* FROM \"cloudflare_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cloudflareStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in CloudflareStatSlice")
	}

	*o = slice

	return nil
}

// CloudflareStatExistsG checks if the CloudflareStat row exists.
func CloudflareStatExistsG(ctx context.Context, date time.Time) (bool, error) {
	return CloudflareStatExists(ctx, boil.GetContextDB(), date)
}

// CloudflareStatExists checks if the CloudflareStat row exists.
func CloudflareStatExists(ctx context.Context, exec boil.ContextExecutor, date time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cloudflare_stats\" where \"date\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, date)
	}
	row := exec.QueryRowContext(ctx, sql, date)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if cloudflare_stats exists")
	}

	return exists, nil
}

// Exists checks if the CloudflareStat row exists.
func (o *CloudflareStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CloudflareStatExists(ctx, exec, o.Date)
}
