// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeveloperProfileMessage is an object representing the database table.
type DeveloperProfileMessage struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email     string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Content   string    `boil:"content" json:"content" toml:"content" yaml:"content"`
	ProfileID string    `boil:"profile_id" json:"profile_id" toml:"profile_id" yaml:"profile_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	SentAt    null.Time `boil:"sent_at" json:"sent_at,omitempty" toml:"sent_at" yaml:"sent_at,omitempty"`

	R *developerProfileMessageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L developerProfileMessageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeveloperProfileMessageColumns = struct {
	ID        string
	Email     string
	Content   string
	ProfileID string
	CreatedAt string
	SentAt    string
}{
	ID:        "id",
	Email:     "email",
	Content:   "content",
	ProfileID: "profile_id",
	CreatedAt: "created_at",
	SentAt:    "sent_at",
}

var DeveloperProfileMessageTableColumns = struct {
	ID        string
	Email     string
	Content   string
	ProfileID string
	CreatedAt string
	SentAt    string
}{
	ID:        "developer_profile_message.id",
	Email:     "developer_profile_message.email",
	Content:   "developer_profile_message.content",
	ProfileID: "developer_profile_message.profile_id",
	CreatedAt: "developer_profile_message.created_at",
	SentAt:    "developer_profile_message.sent_at",
}

// Generated where

var DeveloperProfileMessageWhere = struct {
	ID        whereHelperstring
	Email     whereHelperstring
	Content   whereHelperstring
	ProfileID whereHelperstring
	CreatedAt whereHelpertime_Time
	SentAt    whereHelpernull_Time
}{
	ID:        whereHelperstring{field: "\"developer_profile_message\".\"id\""},
	Email:     whereHelperstring{field: "\"developer_profile_message\".\"email\""},
	Content:   whereHelperstring{field: "\"developer_profile_message\".\"content\""},
	ProfileID: whereHelperstring{field: "\"developer_profile_message\".\"profile_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"developer_profile_message\".\"created_at\""},
	SentAt:    whereHelpernull_Time{field: "\"developer_profile_message\".\"sent_at\""},
}

// DeveloperProfileMessageRels is where relationship names are stored.
var DeveloperProfileMessageRels = struct {
}{}

// developerProfileMessageR is where relationships are stored.
type developerProfileMessageR struct {
}

// NewStruct creates a new relationship struct
func (*developerProfileMessageR) NewStruct() *developerProfileMessageR {
	return &developerProfileMessageR{}
}

// developerProfileMessageL is where Load methods for each relationship are stored.
type developerProfileMessageL struct{}

var (
	developerProfileMessageAllColumns            = []string{"id", "email", "content", "profile_id", "created_at", "sent_at"}
	developerProfileMessageColumnsWithoutDefault = []string{"id", "email", "content", "profile_id", "created_at"}
	developerProfileMessageColumnsWithDefault    = []string{"sent_at"}
	developerProfileMessagePrimaryKeyColumns     = []string{"id"}
	developerProfileMessageGeneratedColumns      = []string{}
)

type (
	// DeveloperProfileMessageSlice is an alias for a slice of pointers to DeveloperProfileMessage.
	// This should almost always be used instead of []DeveloperProfileMessage.
	DeveloperProfileMessageSlice []*DeveloperProfileMessage
	// DeveloperProfileMessageHook is the signature for custom DeveloperProfileMessage hook methods
	DeveloperProfileMessageHook func(context.Context, boil.ContextExecutor, *DeveloperProfileMessage) error

	developerProfileMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	developerProfileMessageType                 = reflect.TypeOf(&DeveloperProfileMessage{})
	developerProfileMessageMapping              = queries.MakeStructMapping(developerProfileMessageType)
	developerProfileMessagePrimaryKeyMapping, _ = queries.BindMapping(developerProfileMessageType, developerProfileMessageMapping, developerProfileMessagePrimaryKeyColumns)
	developerProfileMessageInsertCacheMut       sync.RWMutex
	developerProfileMessageInsertCache          = make(map[string]insertCache)
	developerProfileMessageUpdateCacheMut       sync.RWMutex
	developerProfileMessageUpdateCache          = make(map[string]updateCache)
	developerProfileMessageUpsertCacheMut       sync.RWMutex
	developerProfileMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var developerProfileMessageAfterSelectHooks []DeveloperProfileMessageHook

var developerProfileMessageBeforeInsertHooks []DeveloperProfileMessageHook
var developerProfileMessageAfterInsertHooks []DeveloperProfileMessageHook

var developerProfileMessageBeforeUpdateHooks []DeveloperProfileMessageHook
var developerProfileMessageAfterUpdateHooks []DeveloperProfileMessageHook

var developerProfileMessageBeforeDeleteHooks []DeveloperProfileMessageHook
var developerProfileMessageAfterDeleteHooks []DeveloperProfileMessageHook

var developerProfileMessageBeforeUpsertHooks []DeveloperProfileMessageHook
var developerProfileMessageAfterUpsertHooks []DeveloperProfileMessageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeveloperProfileMessage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileMessageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeveloperProfileMessage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileMessageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeveloperProfileMessage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileMessageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeveloperProfileMessage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileMessageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeveloperProfileMessage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileMessageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeveloperProfileMessage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileMessageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeveloperProfileMessage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileMessageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeveloperProfileMessage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileMessageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeveloperProfileMessage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileMessageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeveloperProfileMessageHook registers your hook function for all future operations.
func AddDeveloperProfileMessageHook(hookPoint boil.HookPoint, developerProfileMessageHook DeveloperProfileMessageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		developerProfileMessageAfterSelectHooks = append(developerProfileMessageAfterSelectHooks, developerProfileMessageHook)
	case boil.BeforeInsertHook:
		developerProfileMessageBeforeInsertHooks = append(developerProfileMessageBeforeInsertHooks, developerProfileMessageHook)
	case boil.AfterInsertHook:
		developerProfileMessageAfterInsertHooks = append(developerProfileMessageAfterInsertHooks, developerProfileMessageHook)
	case boil.BeforeUpdateHook:
		developerProfileMessageBeforeUpdateHooks = append(developerProfileMessageBeforeUpdateHooks, developerProfileMessageHook)
	case boil.AfterUpdateHook:
		developerProfileMessageAfterUpdateHooks = append(developerProfileMessageAfterUpdateHooks, developerProfileMessageHook)
	case boil.BeforeDeleteHook:
		developerProfileMessageBeforeDeleteHooks = append(developerProfileMessageBeforeDeleteHooks, developerProfileMessageHook)
	case boil.AfterDeleteHook:
		developerProfileMessageAfterDeleteHooks = append(developerProfileMessageAfterDeleteHooks, developerProfileMessageHook)
	case boil.BeforeUpsertHook:
		developerProfileMessageBeforeUpsertHooks = append(developerProfileMessageBeforeUpsertHooks, developerProfileMessageHook)
	case boil.AfterUpsertHook:
		developerProfileMessageAfterUpsertHooks = append(developerProfileMessageAfterUpsertHooks, developerProfileMessageHook)
	}
}

// OneG returns a single developerProfileMessage record from the query using the global executor.
func (q developerProfileMessageQuery) OneG(ctx context.Context) (*DeveloperProfileMessage, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single developerProfileMessage record from the query.
func (q developerProfileMessageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeveloperProfileMessage, error) {
	o := &DeveloperProfileMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for developer_profile_message")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DeveloperProfileMessage records from the query using the global executor.
func (q developerProfileMessageQuery) AllG(ctx context.Context) (DeveloperProfileMessageSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DeveloperProfileMessage records from the query.
func (q developerProfileMessageQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeveloperProfileMessageSlice, error) {
	var o []*DeveloperProfileMessage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to DeveloperProfileMessage slice")
	}

	if len(developerProfileMessageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DeveloperProfileMessage records in the query using the global executor
func (q developerProfileMessageQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DeveloperProfileMessage records in the query.
func (q developerProfileMessageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count developer_profile_message rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q developerProfileMessageQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q developerProfileMessageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if developer_profile_message exists")
	}

	return count > 0, nil
}

// DeveloperProfileMessages retrieves all the records using an executor.
func DeveloperProfileMessages(mods ...qm.QueryMod) developerProfileMessageQuery {
	mods = append(mods, qm.From("\"developer_profile_message\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"developer_profile_message\".*"})
	}

	return developerProfileMessageQuery{q}
}

// FindDeveloperProfileMessageG retrieves a single record by ID.
func FindDeveloperProfileMessageG(ctx context.Context, iD string, selectCols ...string) (*DeveloperProfileMessage, error) {
	return FindDeveloperProfileMessage(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDeveloperProfileMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeveloperProfileMessage(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DeveloperProfileMessage, error) {
	developerProfileMessageObj := &DeveloperProfileMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"developer_profile_message\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, developerProfileMessageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from developer_profile_message")
	}

	if err = developerProfileMessageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return developerProfileMessageObj, err
	}

	return developerProfileMessageObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DeveloperProfileMessage) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeveloperProfileMessage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no developer_profile_message provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(developerProfileMessageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	developerProfileMessageInsertCacheMut.RLock()
	cache, cached := developerProfileMessageInsertCache[key]
	developerProfileMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			developerProfileMessageAllColumns,
			developerProfileMessageColumnsWithDefault,
			developerProfileMessageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(developerProfileMessageType, developerProfileMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(developerProfileMessageType, developerProfileMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"developer_profile_message\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"developer_profile_message\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into developer_profile_message")
	}

	if !cached {
		developerProfileMessageInsertCacheMut.Lock()
		developerProfileMessageInsertCache[key] = cache
		developerProfileMessageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DeveloperProfileMessage record using the global executor.
// See Update for more documentation.
func (o *DeveloperProfileMessage) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DeveloperProfileMessage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeveloperProfileMessage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	developerProfileMessageUpdateCacheMut.RLock()
	cache, cached := developerProfileMessageUpdateCache[key]
	developerProfileMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			developerProfileMessageAllColumns,
			developerProfileMessagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update developer_profile_message, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"developer_profile_message\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, developerProfileMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(developerProfileMessageType, developerProfileMessageMapping, append(wl, developerProfileMessagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update developer_profile_message row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for developer_profile_message")
	}

	if !cached {
		developerProfileMessageUpdateCacheMut.Lock()
		developerProfileMessageUpdateCache[key] = cache
		developerProfileMessageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q developerProfileMessageQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q developerProfileMessageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for developer_profile_message")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for developer_profile_message")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DeveloperProfileMessageSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeveloperProfileMessageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerProfileMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"developer_profile_message\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, developerProfileMessagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in developerProfileMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all developerProfileMessage")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DeveloperProfileMessage) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeveloperProfileMessage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no developer_profile_message provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(developerProfileMessageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	developerProfileMessageUpsertCacheMut.RLock()
	cache, cached := developerProfileMessageUpsertCache[key]
	developerProfileMessageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			developerProfileMessageAllColumns,
			developerProfileMessageColumnsWithDefault,
			developerProfileMessageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			developerProfileMessageAllColumns,
			developerProfileMessagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert developer_profile_message, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(developerProfileMessagePrimaryKeyColumns))
			copy(conflict, developerProfileMessagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"developer_profile_message\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(developerProfileMessageType, developerProfileMessageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(developerProfileMessageType, developerProfileMessageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert developer_profile_message")
	}

	if !cached {
		developerProfileMessageUpsertCacheMut.Lock()
		developerProfileMessageUpsertCache[key] = cache
		developerProfileMessageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DeveloperProfileMessage record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DeveloperProfileMessage) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DeveloperProfileMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeveloperProfileMessage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no DeveloperProfileMessage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), developerProfileMessagePrimaryKeyMapping)
	sql := "DELETE FROM \"developer_profile_message\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from developer_profile_message")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for developer_profile_message")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q developerProfileMessageQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q developerProfileMessageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no developerProfileMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from developer_profile_message")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for developer_profile_message")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DeveloperProfileMessageSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeveloperProfileMessageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(developerProfileMessageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerProfileMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"developer_profile_message\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, developerProfileMessagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from developerProfileMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for developer_profile_message")
	}

	if len(developerProfileMessageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DeveloperProfileMessage) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no DeveloperProfileMessage provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeveloperProfileMessage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeveloperProfileMessage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeveloperProfileMessageSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty DeveloperProfileMessageSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeveloperProfileMessageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeveloperProfileMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerProfileMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"developer_profile_message\".* FROM \"developer_profile_message\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, developerProfileMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in DeveloperProfileMessageSlice")
	}

	*o = slice

	return nil
}

// DeveloperProfileMessageExistsG checks if the DeveloperProfileMessage row exists.
func DeveloperProfileMessageExistsG(ctx context.Context, iD string) (bool, error) {
	return DeveloperProfileMessageExists(ctx, boil.GetContextDB(), iD)
}

// DeveloperProfileMessageExists checks if the DeveloperProfileMessage row exists.
func DeveloperProfileMessageExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"developer_profile_message\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if developer_profile_message exists")
	}

	return exists, nil
}

// Exists checks if the DeveloperProfileMessage row exists.
func (o *DeveloperProfileMessage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeveloperProfileMessageExists(ctx, exec, o.ID)
}
