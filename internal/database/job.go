// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Job is an object representing the database table.
type Job struct {
	ID                              string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	JobTitle                        string      `boil:"job_title" json:"job_title" toml:"job_title" yaml:"job_title"`
	JobCategory                     string      `boil:"job_category" json:"job_category" toml:"job_category" yaml:"job_category"`
	Company                         string      `boil:"company" json:"company" toml:"company" yaml:"company"`
	Location                        string      `boil:"location" json:"location" toml:"location" yaml:"location"`
	SalaryRange                     string      `boil:"salary_range" json:"salary_range" toml:"salary_range" yaml:"salary_range"`
	JobType                         string      `boil:"job_type" json:"job_type" toml:"job_type" yaml:"job_type"`
	ApplicationLink                 string      `boil:"application_link" json:"application_link" toml:"application_link" yaml:"application_link"`
	SubscriberEmail                 string      `boil:"subscriber_email" json:"subscriber_email" toml:"subscriber_email" yaml:"subscriber_email"`
	Description                     string      `boil:"description" json:"description" toml:"description" yaml:"description"`
	CreatedAt                       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ApprovedAt                      null.Time   `boil:"approved_at" json:"approved_at,omitempty" toml:"approved_at" yaml:"approved_at,omitempty"`
	URLID                           int         `boil:"url_id" json:"url_id" toml:"url_id" yaml:"url_id"`
	Slug                            null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	CompanyIconImageID              null.String `boil:"company_icon_image_id" json:"company_icon_image_id,omitempty" toml:"company_icon_image_id" yaml:"company_icon_image_id,omitempty"`
	ExternalID                      string      `boil:"external_id" json:"external_id" toml:"external_id" yaml:"external_id"`
	Expired                         null.Bool   `boil:"expired" json:"expired,omitempty" toml:"expired" yaml:"expired,omitempty"`
	NewsletterEligibilityExpiredAt  null.Time   `boil:"newsletter_eligibility_expired_at" json:"newsletter_eligibility_expired_at,omitempty" toml:"newsletter_eligibility_expired_at" yaml:"newsletter_eligibility_expired_at,omitempty"`
	SocialMediaEligibilityExpiredAt null.Time   `boil:"social_media_eligibility_expired_at" json:"social_media_eligibility_expired_at,omitempty" toml:"social_media_eligibility_expired_at" yaml:"social_media_eligibility_expired_at,omitempty"`
	BlogEligibilityExpiredAt        null.Time   `boil:"blog_eligibility_expired_at" json:"blog_eligibility_expired_at,omitempty" toml:"blog_eligibility_expired_at" yaml:"blog_eligibility_expired_at,omitempty"`
	FrontPageEligibilityExpiredAt   null.Time   `boil:"front_page_eligibility_expired_at" json:"front_page_eligibility_expired_at,omitempty" toml:"front_page_eligibility_expired_at" yaml:"front_page_eligibility_expired_at,omitempty"`
	CompanyPageEligibilityExpiredAt null.Time   `boil:"company_page_eligibility_expired_at" json:"company_page_eligibility_expired_at,omitempty" toml:"company_page_eligibility_expired_at" yaml:"company_page_eligibility_expired_at,omitempty"`
	PlanExpiredAt                   null.Time   `boil:"plan_expired_at" json:"plan_expired_at,omitempty" toml:"plan_expired_at" yaml:"plan_expired_at,omitempty"`
	LastWeekClickouts               int         `boil:"last_week_clickouts" json:"last_week_clickouts" toml:"last_week_clickouts" yaml:"last_week_clickouts"`

	R *jobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JobColumns = struct {
	ID                              string
	JobTitle                        string
	JobCategory                     string
	Company                         string
	Location                        string
	SalaryRange                     string
	JobType                         string
	ApplicationLink                 string
	SubscriberEmail                 string
	Description                     string
	CreatedAt                       string
	ApprovedAt                      string
	URLID                           string
	Slug                            string
	CompanyIconImageID              string
	ExternalID                      string
	Expired                         string
	NewsletterEligibilityExpiredAt  string
	SocialMediaEligibilityExpiredAt string
	BlogEligibilityExpiredAt        string
	FrontPageEligibilityExpiredAt   string
	CompanyPageEligibilityExpiredAt string
	PlanExpiredAt                   string
	LastWeekClickouts               string
}{
	ID:                              "id",
	JobTitle:                        "job_title",
	JobCategory:                     "job_category",
	Company:                         "company",
	Location:                        "location",
	SalaryRange:                     "salary_range",
	JobType:                         "job_type",
	ApplicationLink:                 "application_link",
	SubscriberEmail:                 "subscriber_email",
	Description:                     "description",
	CreatedAt:                       "created_at",
	ApprovedAt:                      "approved_at",
	URLID:                           "url_id",
	Slug:                            "slug",
	CompanyIconImageID:              "company_icon_image_id",
	ExternalID:                      "external_id",
	Expired:                         "expired",
	NewsletterEligibilityExpiredAt:  "newsletter_eligibility_expired_at",
	SocialMediaEligibilityExpiredAt: "social_media_eligibility_expired_at",
	BlogEligibilityExpiredAt:        "blog_eligibility_expired_at",
	FrontPageEligibilityExpiredAt:   "front_page_eligibility_expired_at",
	CompanyPageEligibilityExpiredAt: "company_page_eligibility_expired_at",
	PlanExpiredAt:                   "plan_expired_at",
	LastWeekClickouts:               "last_week_clickouts",
}

var JobTableColumns = struct {
	ID                              string
	JobTitle                        string
	JobCategory                     string
	Company                         string
	Location                        string
	SalaryRange                     string
	JobType                         string
	ApplicationLink                 string
	SubscriberEmail                 string
	Description                     string
	CreatedAt                       string
	ApprovedAt                      string
	URLID                           string
	Slug                            string
	CompanyIconImageID              string
	ExternalID                      string
	Expired                         string
	NewsletterEligibilityExpiredAt  string
	SocialMediaEligibilityExpiredAt string
	BlogEligibilityExpiredAt        string
	FrontPageEligibilityExpiredAt   string
	CompanyPageEligibilityExpiredAt string
	PlanExpiredAt                   string
	LastWeekClickouts               string
}{
	ID:                              "job.id",
	JobTitle:                        "job.job_title",
	JobCategory:                     "job.job_category",
	Company:                         "job.company",
	Location:                        "job.location",
	SalaryRange:                     "job.salary_range",
	JobType:                         "job.job_type",
	ApplicationLink:                 "job.application_link",
	SubscriberEmail:                 "job.subscriber_email",
	Description:                     "job.description",
	CreatedAt:                       "job.created_at",
	ApprovedAt:                      "job.approved_at",
	URLID:                           "job.url_id",
	Slug:                            "job.slug",
	CompanyIconImageID:              "job.company_icon_image_id",
	ExternalID:                      "job.external_id",
	Expired:                         "job.expired",
	NewsletterEligibilityExpiredAt:  "job.newsletter_eligibility_expired_at",
	SocialMediaEligibilityExpiredAt: "job.social_media_eligibility_expired_at",
	BlogEligibilityExpiredAt:        "job.blog_eligibility_expired_at",
	FrontPageEligibilityExpiredAt:   "job.front_page_eligibility_expired_at",
	CompanyPageEligibilityExpiredAt: "job.company_page_eligibility_expired_at",
	PlanExpiredAt:                   "job.plan_expired_at",
	LastWeekClickouts:               "job.last_week_clickouts",
}

// Generated where

var JobWhere = struct {
	ID                              whereHelperstring
	JobTitle                        whereHelperstring
	JobCategory                     whereHelperstring
	Company                         whereHelperstring
	Location                        whereHelperstring
	SalaryRange                     whereHelperstring
	JobType                         whereHelperstring
	ApplicationLink                 whereHelperstring
	SubscriberEmail                 whereHelperstring
	Description                     whereHelperstring
	CreatedAt                       whereHelpertime_Time
	ApprovedAt                      whereHelpernull_Time
	URLID                           whereHelperint
	Slug                            whereHelpernull_String
	CompanyIconImageID              whereHelpernull_String
	ExternalID                      whereHelperstring
	Expired                         whereHelpernull_Bool
	NewsletterEligibilityExpiredAt  whereHelpernull_Time
	SocialMediaEligibilityExpiredAt whereHelpernull_Time
	BlogEligibilityExpiredAt        whereHelpernull_Time
	FrontPageEligibilityExpiredAt   whereHelpernull_Time
	CompanyPageEligibilityExpiredAt whereHelpernull_Time
	PlanExpiredAt                   whereHelpernull_Time
	LastWeekClickouts               whereHelperint
}{
	ID:                              whereHelperstring{field: "\"job\".\"id\""},
	JobTitle:                        whereHelperstring{field: "\"job\".\"job_title\""},
	JobCategory:                     whereHelperstring{field: "\"job\".\"job_category\""},
	Company:                         whereHelperstring{field: "\"job\".\"company\""},
	Location:                        whereHelperstring{field: "\"job\".\"location\""},
	SalaryRange:                     whereHelperstring{field: "\"job\".\"salary_range\""},
	JobType:                         whereHelperstring{field: "\"job\".\"job_type\""},
	ApplicationLink:                 whereHelperstring{field: "\"job\".\"application_link\""},
	SubscriberEmail:                 whereHelperstring{field: "\"job\".\"subscriber_email\""},
	Description:                     whereHelperstring{field: "\"job\".\"description\""},
	CreatedAt:                       whereHelpertime_Time{field: "\"job\".\"created_at\""},
	ApprovedAt:                      whereHelpernull_Time{field: "\"job\".\"approved_at\""},
	URLID:                           whereHelperint{field: "\"job\".\"url_id\""},
	Slug:                            whereHelpernull_String{field: "\"job\".\"slug\""},
	CompanyIconImageID:              whereHelpernull_String{field: "\"job\".\"company_icon_image_id\""},
	ExternalID:                      whereHelperstring{field: "\"job\".\"external_id\""},
	Expired:                         whereHelpernull_Bool{field: "\"job\".\"expired\""},
	NewsletterEligibilityExpiredAt:  whereHelpernull_Time{field: "\"job\".\"newsletter_eligibility_expired_at\""},
	SocialMediaEligibilityExpiredAt: whereHelpernull_Time{field: "\"job\".\"social_media_eligibility_expired_at\""},
	BlogEligibilityExpiredAt:        whereHelpernull_Time{field: "\"job\".\"blog_eligibility_expired_at\""},
	FrontPageEligibilityExpiredAt:   whereHelpernull_Time{field: "\"job\".\"front_page_eligibility_expired_at\""},
	CompanyPageEligibilityExpiredAt: whereHelpernull_Time{field: "\"job\".\"company_page_eligibility_expired_at\""},
	PlanExpiredAt:                   whereHelpernull_Time{field: "\"job\".\"plan_expired_at\""},
	LastWeekClickouts:               whereHelperint{field: "\"job\".\"last_week_clickouts\""},
}

// JobRels is where relationship names are stored.
var JobRels = struct {
	ApplyTokens    string
	EditTokens     string
	JobEvents      string
	PurchaseEvents string
}{
	ApplyTokens:    "ApplyTokens",
	EditTokens:     "EditTokens",
	JobEvents:      "JobEvents",
	PurchaseEvents: "PurchaseEvents",
}

// jobR is where relationships are stored.
type jobR struct {
	ApplyTokens    ApplyTokenSlice    `boil:"ApplyTokens" json:"ApplyTokens" toml:"ApplyTokens" yaml:"ApplyTokens"`
	EditTokens     EditTokenSlice     `boil:"EditTokens" json:"EditTokens" toml:"EditTokens" yaml:"EditTokens"`
	JobEvents      JobEventSlice      `boil:"JobEvents" json:"JobEvents" toml:"JobEvents" yaml:"JobEvents"`
	PurchaseEvents PurchaseEventSlice `boil:"PurchaseEvents" json:"PurchaseEvents" toml:"PurchaseEvents" yaml:"PurchaseEvents"`
}

// NewStruct creates a new relationship struct
func (*jobR) NewStruct() *jobR {
	return &jobR{}
}

func (r *jobR) GetApplyTokens() ApplyTokenSlice {
	if r == nil {
		return nil
	}
	return r.ApplyTokens
}

func (r *jobR) GetEditTokens() EditTokenSlice {
	if r == nil {
		return nil
	}
	return r.EditTokens
}

func (r *jobR) GetJobEvents() JobEventSlice {
	if r == nil {
		return nil
	}
	return r.JobEvents
}

func (r *jobR) GetPurchaseEvents() PurchaseEventSlice {
	if r == nil {
		return nil
	}
	return r.PurchaseEvents
}

// jobL is where Load methods for each relationship are stored.
type jobL struct{}

var (
	jobAllColumns            = []string{"id", "job_title", "job_category", "company", "location", "salary_range", "job_type", "application_link", "subscriber_email", "description", "created_at", "approved_at", "url_id", "slug", "company_icon_image_id", "external_id", "expired", "newsletter_eligibility_expired_at", "social_media_eligibility_expired_at", "blog_eligibility_expired_at", "front_page_eligibility_expired_at", "company_page_eligibility_expired_at", "plan_expired_at", "last_week_clickouts"}
	jobColumnsWithoutDefault = []string{"id", "job_title", "job_category", "company", "location", "salary_range", "job_type", "application_link", "subscriber_email", "description", "created_at", "url_id"}
	jobColumnsWithDefault    = []string{"approved_at", "slug", "company_icon_image_id", "external_id", "expired", "newsletter_eligibility_expired_at", "social_media_eligibility_expired_at", "blog_eligibility_expired_at", "front_page_eligibility_expired_at", "company_page_eligibility_expired_at", "plan_expired_at", "last_week_clickouts"}
	jobPrimaryKeyColumns     = []string{"id"}
	jobGeneratedColumns      = []string{}
)

type (
	// JobSlice is an alias for a slice of pointers to Job.
	// This should almost always be used instead of []Job.
	JobSlice []*Job
	// JobHook is the signature for custom Job hook methods
	JobHook func(context.Context, boil.ContextExecutor, *Job) error

	jobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jobType                 = reflect.TypeOf(&Job{})
	jobMapping              = queries.MakeStructMapping(jobType)
	jobPrimaryKeyMapping, _ = queries.BindMapping(jobType, jobMapping, jobPrimaryKeyColumns)
	jobInsertCacheMut       sync.RWMutex
	jobInsertCache          = make(map[string]insertCache)
	jobUpdateCacheMut       sync.RWMutex
	jobUpdateCache          = make(map[string]updateCache)
	jobUpsertCacheMut       sync.RWMutex
	jobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jobAfterSelectHooks []JobHook

var jobBeforeInsertHooks []JobHook
var jobAfterInsertHooks []JobHook

var jobBeforeUpdateHooks []JobHook
var jobAfterUpdateHooks []JobHook

var jobBeforeDeleteHooks []JobHook
var jobAfterDeleteHooks []JobHook

var jobBeforeUpsertHooks []JobHook
var jobAfterUpsertHooks []JobHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Job) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Job) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Job) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Job) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Job) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Job) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Job) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Job) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Job) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jobAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJobHook registers your hook function for all future operations.
func AddJobHook(hookPoint boil.HookPoint, jobHook JobHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		jobAfterSelectHooks = append(jobAfterSelectHooks, jobHook)
	case boil.BeforeInsertHook:
		jobBeforeInsertHooks = append(jobBeforeInsertHooks, jobHook)
	case boil.AfterInsertHook:
		jobAfterInsertHooks = append(jobAfterInsertHooks, jobHook)
	case boil.BeforeUpdateHook:
		jobBeforeUpdateHooks = append(jobBeforeUpdateHooks, jobHook)
	case boil.AfterUpdateHook:
		jobAfterUpdateHooks = append(jobAfterUpdateHooks, jobHook)
	case boil.BeforeDeleteHook:
		jobBeforeDeleteHooks = append(jobBeforeDeleteHooks, jobHook)
	case boil.AfterDeleteHook:
		jobAfterDeleteHooks = append(jobAfterDeleteHooks, jobHook)
	case boil.BeforeUpsertHook:
		jobBeforeUpsertHooks = append(jobBeforeUpsertHooks, jobHook)
	case boil.AfterUpsertHook:
		jobAfterUpsertHooks = append(jobAfterUpsertHooks, jobHook)
	}
}

// OneG returns a single job record from the query using the global executor.
func (q jobQuery) OneG(ctx context.Context) (*Job, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single job record from the query.
func (q jobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Job, error) {
	o := &Job{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for job")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Job records from the query using the global executor.
func (q jobQuery) AllG(ctx context.Context) (JobSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Job records from the query.
func (q jobQuery) All(ctx context.Context, exec boil.ContextExecutor) (JobSlice, error) {
	var o []*Job

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to Job slice")
	}

	if len(jobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Job records in the query using the global executor
func (q jobQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Job records in the query.
func (q jobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count job rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q jobQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q jobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if job exists")
	}

	return count > 0, nil
}

// ApplyTokens retrieves all the apply_token's ApplyTokens with an executor.
func (o *Job) ApplyTokens(mods ...qm.QueryMod) applyTokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"apply_token\".\"job_id\"=?", o.ID),
	)

	return ApplyTokens(queryMods...)
}

// EditTokens retrieves all the edit_token's EditTokens with an executor.
func (o *Job) EditTokens(mods ...qm.QueryMod) editTokenQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"edit_token\".\"job_id\"=?", o.ID),
	)

	return EditTokens(queryMods...)
}

// JobEvents retrieves all the job_event's JobEvents with an executor.
func (o *Job) JobEvents(mods ...qm.QueryMod) jobEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"job_event\".\"job_id\"=?", o.ID),
	)

	return JobEvents(queryMods...)
}

// PurchaseEvents retrieves all the purchase_event's PurchaseEvents with an executor.
func (o *Job) PurchaseEvents(mods ...qm.QueryMod) purchaseEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"purchase_event\".\"job_id\"=?", o.ID),
	)

	return PurchaseEvents(queryMods...)
}

// LoadApplyTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (jobL) LoadApplyTokens(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJob interface{}, mods queries.Applicator) error {
	var slice []*Job
	var object *Job

	if singular {
		var ok bool
		object, ok = maybeJob.(*Job)
		if !ok {
			object = new(Job)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJob))
			}
		}
	} else {
		s, ok := maybeJob.(*[]*Job)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJob))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`apply_token`),
		qm.WhereIn(`apply_token.job_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load apply_token")
	}

	var resultSlice []*ApplyToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice apply_token")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on apply_token")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for apply_token")
	}

	if len(applyTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ApplyTokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &applyTokenR{}
			}
			foreign.R.Job = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.JobID {
				local.R.ApplyTokens = append(local.R.ApplyTokens, foreign)
				if foreign.R == nil {
					foreign.R = &applyTokenR{}
				}
				foreign.R.Job = local
				break
			}
		}
	}

	return nil
}

// LoadEditTokens allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (jobL) LoadEditTokens(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJob interface{}, mods queries.Applicator) error {
	var slice []*Job
	var object *Job

	if singular {
		var ok bool
		object, ok = maybeJob.(*Job)
		if !ok {
			object = new(Job)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJob))
			}
		}
	} else {
		s, ok := maybeJob.(*[]*Job)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJob))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`edit_token`),
		qm.WhereIn(`edit_token.job_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load edit_token")
	}

	var resultSlice []*EditToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice edit_token")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on edit_token")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for edit_token")
	}

	if len(editTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EditTokens = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &editTokenR{}
			}
			foreign.R.Job = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.JobID {
				local.R.EditTokens = append(local.R.EditTokens, foreign)
				if foreign.R == nil {
					foreign.R = &editTokenR{}
				}
				foreign.R.Job = local
				break
			}
		}
	}

	return nil
}

// LoadJobEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (jobL) LoadJobEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJob interface{}, mods queries.Applicator) error {
	var slice []*Job
	var object *Job

	if singular {
		var ok bool
		object, ok = maybeJob.(*Job)
		if !ok {
			object = new(Job)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJob))
			}
		}
	} else {
		s, ok := maybeJob.(*[]*Job)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJob))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`job_event`),
		qm.WhereIn(`job_event.job_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load job_event")
	}

	var resultSlice []*JobEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice job_event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on job_event")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for job_event")
	}

	if len(jobEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.JobEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &jobEventR{}
			}
			foreign.R.Job = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.JobID {
				local.R.JobEvents = append(local.R.JobEvents, foreign)
				if foreign.R == nil {
					foreign.R = &jobEventR{}
				}
				foreign.R.Job = local
				break
			}
		}
	}

	return nil
}

// LoadPurchaseEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (jobL) LoadPurchaseEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJob interface{}, mods queries.Applicator) error {
	var slice []*Job
	var object *Job

	if singular {
		var ok bool
		object, ok = maybeJob.(*Job)
		if !ok {
			object = new(Job)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJob))
			}
		}
	} else {
		s, ok := maybeJob.(*[]*Job)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJob)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJob))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jobR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jobR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`purchase_event`),
		qm.WhereIn(`purchase_event.job_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load purchase_event")
	}

	var resultSlice []*PurchaseEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice purchase_event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on purchase_event")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for purchase_event")
	}

	if len(purchaseEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PurchaseEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &purchaseEventR{}
			}
			foreign.R.Job = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.JobID {
				local.R.PurchaseEvents = append(local.R.PurchaseEvents, foreign)
				if foreign.R == nil {
					foreign.R = &purchaseEventR{}
				}
				foreign.R.Job = local
				break
			}
		}
	}

	return nil
}

// AddApplyTokensG adds the given related objects to the existing relationships
// of the job, optionally inserting them as new records.
// Appends related to o.R.ApplyTokens.
// Sets related.R.Job appropriately.
// Uses the global database handle.
func (o *Job) AddApplyTokensG(ctx context.Context, insert bool, related ...*ApplyToken) error {
	return o.AddApplyTokens(ctx, boil.GetContextDB(), insert, related...)
}

// AddApplyTokens adds the given related objects to the existing relationships
// of the job, optionally inserting them as new records.
// Appends related to o.R.ApplyTokens.
// Sets related.R.Job appropriately.
func (o *Job) AddApplyTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ApplyToken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JobID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"apply_token\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"job_id"}),
				strmangle.WhereClause("\"", "\"", 2, applyTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JobID = o.ID
		}
	}

	if o.R == nil {
		o.R = &jobR{
			ApplyTokens: related,
		}
	} else {
		o.R.ApplyTokens = append(o.R.ApplyTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &applyTokenR{
				Job: o,
			}
		} else {
			rel.R.Job = o
		}
	}
	return nil
}

// AddEditTokensG adds the given related objects to the existing relationships
// of the job, optionally inserting them as new records.
// Appends related to o.R.EditTokens.
// Sets related.R.Job appropriately.
// Uses the global database handle.
func (o *Job) AddEditTokensG(ctx context.Context, insert bool, related ...*EditToken) error {
	return o.AddEditTokens(ctx, boil.GetContextDB(), insert, related...)
}

// AddEditTokens adds the given related objects to the existing relationships
// of the job, optionally inserting them as new records.
// Appends related to o.R.EditTokens.
// Sets related.R.Job appropriately.
func (o *Job) AddEditTokens(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EditToken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JobID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"edit_token\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"job_id"}),
				strmangle.WhereClause("\"", "\"", 2, editTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JobID = o.ID
		}
	}

	if o.R == nil {
		o.R = &jobR{
			EditTokens: related,
		}
	} else {
		o.R.EditTokens = append(o.R.EditTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &editTokenR{
				Job: o,
			}
		} else {
			rel.R.Job = o
		}
	}
	return nil
}

// AddJobEventsG adds the given related objects to the existing relationships
// of the job, optionally inserting them as new records.
// Appends related to o.R.JobEvents.
// Sets related.R.Job appropriately.
// Uses the global database handle.
func (o *Job) AddJobEventsG(ctx context.Context, insert bool, related ...*JobEvent) error {
	return o.AddJobEvents(ctx, boil.GetContextDB(), insert, related...)
}

// AddJobEvents adds the given related objects to the existing relationships
// of the job, optionally inserting them as new records.
// Appends related to o.R.JobEvents.
// Sets related.R.Job appropriately.
func (o *Job) AddJobEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*JobEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JobID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"job_event\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"job_id"}),
				strmangle.WhereClause("\"", "\"", 2, jobEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JobID = o.ID
		}
	}

	if o.R == nil {
		o.R = &jobR{
			JobEvents: related,
		}
	} else {
		o.R.JobEvents = append(o.R.JobEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &jobEventR{
				Job: o,
			}
		} else {
			rel.R.Job = o
		}
	}
	return nil
}

// AddPurchaseEventsG adds the given related objects to the existing relationships
// of the job, optionally inserting them as new records.
// Appends related to o.R.PurchaseEvents.
// Sets related.R.Job appropriately.
// Uses the global database handle.
func (o *Job) AddPurchaseEventsG(ctx context.Context, insert bool, related ...*PurchaseEvent) error {
	return o.AddPurchaseEvents(ctx, boil.GetContextDB(), insert, related...)
}

// AddPurchaseEvents adds the given related objects to the existing relationships
// of the job, optionally inserting them as new records.
// Appends related to o.R.PurchaseEvents.
// Sets related.R.Job appropriately.
func (o *Job) AddPurchaseEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PurchaseEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JobID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"purchase_event\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"job_id"}),
				strmangle.WhereClause("\"", "\"", 2, purchaseEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.StripeSessionID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JobID = o.ID
		}
	}

	if o.R == nil {
		o.R = &jobR{
			PurchaseEvents: related,
		}
	} else {
		o.R.PurchaseEvents = append(o.R.PurchaseEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &purchaseEventR{
				Job: o,
			}
		} else {
			rel.R.Job = o
		}
	}
	return nil
}

// Jobs retrieves all the records using an executor.
func Jobs(mods ...qm.QueryMod) jobQuery {
	mods = append(mods, qm.From("\"job\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"job\".*"})
	}

	return jobQuery{q}
}

// FindJobG retrieves a single record by ID.
func FindJobG(ctx context.Context, iD string, selectCols ...string) (*Job, error) {
	return FindJob(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindJob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJob(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Job, error) {
	jobObj := &Job{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"job\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, jobObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from job")
	}

	if err = jobObj.doAfterSelectHooks(ctx, exec); err != nil {
		return jobObj, err
	}

	return jobObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Job) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Job) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no job provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jobInsertCacheMut.RLock()
	cache, cached := jobInsertCache[key]
	jobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jobAllColumns,
			jobColumnsWithDefault,
			jobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jobType, jobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jobType, jobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"job\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"job\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into job")
	}

	if !cached {
		jobInsertCacheMut.Lock()
		jobInsertCache[key] = cache
		jobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Job record using the global executor.
// See Update for more documentation.
func (o *Job) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Job.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Job) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jobUpdateCacheMut.RLock()
	cache, cached := jobUpdateCache[key]
	jobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jobAllColumns,
			jobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update job, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"job\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, jobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jobType, jobMapping, append(wl, jobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update job row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for job")
	}

	if !cached {
		jobUpdateCacheMut.Lock()
		jobUpdateCache[key] = cache
		jobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q jobQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q jobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for job")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for job")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o JobSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JobSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"job\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, jobPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in job slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all job")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Job) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Job) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no job provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jobColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jobUpsertCacheMut.RLock()
	cache, cached := jobUpsertCache[key]
	jobUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jobAllColumns,
			jobColumnsWithDefault,
			jobColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			jobAllColumns,
			jobPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert job, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(jobPrimaryKeyColumns))
			copy(conflict, jobPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"job\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(jobType, jobMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jobType, jobMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert job")
	}

	if !cached {
		jobUpsertCacheMut.Lock()
		jobUpsertCache[key] = cache
		jobUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Job record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Job) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Job record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Job) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no Job provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jobPrimaryKeyMapping)
	sql := "DELETE FROM \"job\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from job")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for job")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q jobQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q jobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no jobQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from job")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for job")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o JobSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JobSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"job\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from job slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for job")
	}

	if len(jobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Job) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no Job provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Job) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJob(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JobSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty JobSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JobSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"job\".* FROM \"job\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jobPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in JobSlice")
	}

	*o = slice

	return nil
}

// JobExistsG checks if the Job row exists.
func JobExistsG(ctx context.Context, iD string) (bool, error) {
	return JobExists(ctx, boil.GetContextDB(), iD)
}

// JobExists checks if the Job row exists.
func JobExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"job\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if job exists")
	}

	return exists, nil
}

// Exists checks if the Job row exists.
func (o *Job) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return JobExists(ctx, exec, o.ID)
}
