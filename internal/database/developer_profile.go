// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeveloperProfile is an object representing the database table.
type DeveloperProfile struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email       string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Location    string      `boil:"location" json:"location" toml:"location" yaml:"location"`
	Available   bool        `boil:"available" json:"available" toml:"available" yaml:"available"`
	LinkedinURL string      `boil:"linkedin_url" json:"linkedin_url" toml:"linkedin_url" yaml:"linkedin_url"`
	HourlyRate  int         `boil:"hourly_rate" json:"hourly_rate" toml:"hourly_rate" yaml:"hourly_rate"`
	ImageID     string      `boil:"image_id" json:"image_id" toml:"image_id" yaml:"image_id"`
	Slug        string      `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Skills      string      `boil:"skills" json:"skills" toml:"skills" yaml:"skills"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Bio         string      `boil:"bio" json:"bio" toml:"bio" yaml:"bio"`
	GithubURL   null.String `boil:"github_url" json:"github_url,omitempty" toml:"github_url" yaml:"github_url,omitempty"`
	TwitterURL  null.String `boil:"twitter_url" json:"twitter_url,omitempty" toml:"twitter_url" yaml:"twitter_url,omitempty"`

	R *developerProfileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L developerProfileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeveloperProfileColumns = struct {
	ID          string
	Email       string
	Location    string
	Available   string
	LinkedinURL string
	HourlyRate  string
	ImageID     string
	Slug        string
	CreatedAt   string
	UpdatedAt   string
	Skills      string
	Name        string
	Bio         string
	GithubURL   string
	TwitterURL  string
}{
	ID:          "id",
	Email:       "email",
	Location:    "location",
	Available:   "available",
	LinkedinURL: "linkedin_url",
	HourlyRate:  "hourly_rate",
	ImageID:     "image_id",
	Slug:        "slug",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Skills:      "skills",
	Name:        "name",
	Bio:         "bio",
	GithubURL:   "github_url",
	TwitterURL:  "twitter_url",
}

var DeveloperProfileTableColumns = struct {
	ID          string
	Email       string
	Location    string
	Available   string
	LinkedinURL string
	HourlyRate  string
	ImageID     string
	Slug        string
	CreatedAt   string
	UpdatedAt   string
	Skills      string
	Name        string
	Bio         string
	GithubURL   string
	TwitterURL  string
}{
	ID:          "developer_profile.id",
	Email:       "developer_profile.email",
	Location:    "developer_profile.location",
	Available:   "developer_profile.available",
	LinkedinURL: "developer_profile.linkedin_url",
	HourlyRate:  "developer_profile.hourly_rate",
	ImageID:     "developer_profile.image_id",
	Slug:        "developer_profile.slug",
	CreatedAt:   "developer_profile.created_at",
	UpdatedAt:   "developer_profile.updated_at",
	Skills:      "developer_profile.skills",
	Name:        "developer_profile.name",
	Bio:         "developer_profile.bio",
	GithubURL:   "developer_profile.github_url",
	TwitterURL:  "developer_profile.twitter_url",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var DeveloperProfileWhere = struct {
	ID          whereHelperstring
	Email       whereHelperstring
	Location    whereHelperstring
	Available   whereHelperbool
	LinkedinURL whereHelperstring
	HourlyRate  whereHelperint
	ImageID     whereHelperstring
	Slug        whereHelperstring
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpernull_Time
	Skills      whereHelperstring
	Name        whereHelperstring
	Bio         whereHelperstring
	GithubURL   whereHelpernull_String
	TwitterURL  whereHelpernull_String
}{
	ID:          whereHelperstring{field: "\"developer_profile\".\"id\""},
	Email:       whereHelperstring{field: "\"developer_profile\".\"email\""},
	Location:    whereHelperstring{field: "\"developer_profile\".\"location\""},
	Available:   whereHelperbool{field: "\"developer_profile\".\"available\""},
	LinkedinURL: whereHelperstring{field: "\"developer_profile\".\"linkedin_url\""},
	HourlyRate:  whereHelperint{field: "\"developer_profile\".\"hourly_rate\""},
	ImageID:     whereHelperstring{field: "\"developer_profile\".\"image_id\""},
	Slug:        whereHelperstring{field: "\"developer_profile\".\"slug\""},
	CreatedAt:   whereHelpertime_Time{field: "\"developer_profile\".\"created_at\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"developer_profile\".\"updated_at\""},
	Skills:      whereHelperstring{field: "\"developer_profile\".\"skills\""},
	Name:        whereHelperstring{field: "\"developer_profile\".\"name\""},
	Bio:         whereHelperstring{field: "\"developer_profile\".\"bio\""},
	GithubURL:   whereHelpernull_String{field: "\"developer_profile\".\"github_url\""},
	TwitterURL:  whereHelpernull_String{field: "\"developer_profile\".\"twitter_url\""},
}

// DeveloperProfileRels is where relationship names are stored.
var DeveloperProfileRels = struct {
	Image                  string
	DeveloperProfileEvents string
}{
	Image:                  "Image",
	DeveloperProfileEvents: "DeveloperProfileEvents",
}

// developerProfileR is where relationships are stored.
type developerProfileR struct {
	Image                  *Image                     `boil:"Image" json:"Image" toml:"Image" yaml:"Image"`
	DeveloperProfileEvents DeveloperProfileEventSlice `boil:"DeveloperProfileEvents" json:"DeveloperProfileEvents" toml:"DeveloperProfileEvents" yaml:"DeveloperProfileEvents"`
}

// NewStruct creates a new relationship struct
func (*developerProfileR) NewStruct() *developerProfileR {
	return &developerProfileR{}
}

func (r *developerProfileR) GetImage() *Image {
	if r == nil {
		return nil
	}
	return r.Image
}

func (r *developerProfileR) GetDeveloperProfileEvents() DeveloperProfileEventSlice {
	if r == nil {
		return nil
	}
	return r.DeveloperProfileEvents
}

// developerProfileL is where Load methods for each relationship are stored.
type developerProfileL struct{}

var (
	developerProfileAllColumns            = []string{"id", "email", "location", "available", "linkedin_url", "hourly_rate", "image_id", "slug", "created_at", "updated_at", "skills", "name", "bio", "github_url", "twitter_url"}
	developerProfileColumnsWithoutDefault = []string{"id", "email", "location", "available", "linkedin_url", "image_id", "slug", "created_at", "name", "bio"}
	developerProfileColumnsWithDefault    = []string{"hourly_rate", "updated_at", "skills", "github_url", "twitter_url"}
	developerProfilePrimaryKeyColumns     = []string{"id"}
	developerProfileGeneratedColumns      = []string{}
)

type (
	// DeveloperProfileSlice is an alias for a slice of pointers to DeveloperProfile.
	// This should almost always be used instead of []DeveloperProfile.
	DeveloperProfileSlice []*DeveloperProfile
	// DeveloperProfileHook is the signature for custom DeveloperProfile hook methods
	DeveloperProfileHook func(context.Context, boil.ContextExecutor, *DeveloperProfile) error

	developerProfileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	developerProfileType                 = reflect.TypeOf(&DeveloperProfile{})
	developerProfileMapping              = queries.MakeStructMapping(developerProfileType)
	developerProfilePrimaryKeyMapping, _ = queries.BindMapping(developerProfileType, developerProfileMapping, developerProfilePrimaryKeyColumns)
	developerProfileInsertCacheMut       sync.RWMutex
	developerProfileInsertCache          = make(map[string]insertCache)
	developerProfileUpdateCacheMut       sync.RWMutex
	developerProfileUpdateCache          = make(map[string]updateCache)
	developerProfileUpsertCacheMut       sync.RWMutex
	developerProfileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var developerProfileAfterSelectHooks []DeveloperProfileHook

var developerProfileBeforeInsertHooks []DeveloperProfileHook
var developerProfileAfterInsertHooks []DeveloperProfileHook

var developerProfileBeforeUpdateHooks []DeveloperProfileHook
var developerProfileAfterUpdateHooks []DeveloperProfileHook

var developerProfileBeforeDeleteHooks []DeveloperProfileHook
var developerProfileAfterDeleteHooks []DeveloperProfileHook

var developerProfileBeforeUpsertHooks []DeveloperProfileHook
var developerProfileAfterUpsertHooks []DeveloperProfileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeveloperProfile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeveloperProfile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeveloperProfile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeveloperProfile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeveloperProfile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeveloperProfile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeveloperProfile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeveloperProfile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeveloperProfile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeveloperProfileHook registers your hook function for all future operations.
func AddDeveloperProfileHook(hookPoint boil.HookPoint, developerProfileHook DeveloperProfileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		developerProfileAfterSelectHooks = append(developerProfileAfterSelectHooks, developerProfileHook)
	case boil.BeforeInsertHook:
		developerProfileBeforeInsertHooks = append(developerProfileBeforeInsertHooks, developerProfileHook)
	case boil.AfterInsertHook:
		developerProfileAfterInsertHooks = append(developerProfileAfterInsertHooks, developerProfileHook)
	case boil.BeforeUpdateHook:
		developerProfileBeforeUpdateHooks = append(developerProfileBeforeUpdateHooks, developerProfileHook)
	case boil.AfterUpdateHook:
		developerProfileAfterUpdateHooks = append(developerProfileAfterUpdateHooks, developerProfileHook)
	case boil.BeforeDeleteHook:
		developerProfileBeforeDeleteHooks = append(developerProfileBeforeDeleteHooks, developerProfileHook)
	case boil.AfterDeleteHook:
		developerProfileAfterDeleteHooks = append(developerProfileAfterDeleteHooks, developerProfileHook)
	case boil.BeforeUpsertHook:
		developerProfileBeforeUpsertHooks = append(developerProfileBeforeUpsertHooks, developerProfileHook)
	case boil.AfterUpsertHook:
		developerProfileAfterUpsertHooks = append(developerProfileAfterUpsertHooks, developerProfileHook)
	}
}

// OneG returns a single developerProfile record from the query using the global executor.
func (q developerProfileQuery) OneG(ctx context.Context) (*DeveloperProfile, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single developerProfile record from the query.
func (q developerProfileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeveloperProfile, error) {
	o := &DeveloperProfile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for developer_profile")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DeveloperProfile records from the query using the global executor.
func (q developerProfileQuery) AllG(ctx context.Context) (DeveloperProfileSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DeveloperProfile records from the query.
func (q developerProfileQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeveloperProfileSlice, error) {
	var o []*DeveloperProfile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to DeveloperProfile slice")
	}

	if len(developerProfileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DeveloperProfile records in the query using the global executor
func (q developerProfileQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DeveloperProfile records in the query.
func (q developerProfileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count developer_profile rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q developerProfileQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q developerProfileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if developer_profile exists")
	}

	return count > 0, nil
}

// Image pointed to by the foreign key.
func (o *DeveloperProfile) Image(mods ...qm.QueryMod) imageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ImageID),
	}

	queryMods = append(queryMods, mods...)

	return Images(queryMods...)
}

// DeveloperProfileEvents retrieves all the developer_profile_event's DeveloperProfileEvents with an executor.
func (o *DeveloperProfile) DeveloperProfileEvents(mods ...qm.QueryMod) developerProfileEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"developer_profile_event\".\"developer_profile_id\"=?", o.ID),
	)

	return DeveloperProfileEvents(queryMods...)
}

// LoadImage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (developerProfileL) LoadImage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeveloperProfile interface{}, mods queries.Applicator) error {
	var slice []*DeveloperProfile
	var object *DeveloperProfile

	if singular {
		var ok bool
		object, ok = maybeDeveloperProfile.(*DeveloperProfile)
		if !ok {
			object = new(DeveloperProfile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeveloperProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeveloperProfile))
			}
		}
	} else {
		s, ok := maybeDeveloperProfile.(*[]*DeveloperProfile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeveloperProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeveloperProfile))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &developerProfileR{}
		}
		args = append(args, object.ImageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &developerProfileR{}
			}

			for _, a := range args {
				if a == obj.ImageID {
					continue Outer
				}
			}

			args = append(args, obj.ImageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`image`),
		qm.WhereIn(`image.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Image")
	}

	var resultSlice []*Image
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Image")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for image")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for image")
	}

	if len(imageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Image = foreign
		if foreign.R == nil {
			foreign.R = &imageR{}
		}
		foreign.R.DeveloperProfiles = append(foreign.R.DeveloperProfiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ImageID == foreign.ID {
				local.R.Image = foreign
				if foreign.R == nil {
					foreign.R = &imageR{}
				}
				foreign.R.DeveloperProfiles = append(foreign.R.DeveloperProfiles, local)
				break
			}
		}
	}

	return nil
}

// LoadDeveloperProfileEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (developerProfileL) LoadDeveloperProfileEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeveloperProfile interface{}, mods queries.Applicator) error {
	var slice []*DeveloperProfile
	var object *DeveloperProfile

	if singular {
		var ok bool
		object, ok = maybeDeveloperProfile.(*DeveloperProfile)
		if !ok {
			object = new(DeveloperProfile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeveloperProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeveloperProfile))
			}
		}
	} else {
		s, ok := maybeDeveloperProfile.(*[]*DeveloperProfile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeveloperProfile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeveloperProfile))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &developerProfileR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &developerProfileR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`developer_profile_event`),
		qm.WhereIn(`developer_profile_event.developer_profile_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load developer_profile_event")
	}

	var resultSlice []*DeveloperProfileEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice developer_profile_event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on developer_profile_event")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for developer_profile_event")
	}

	if len(developerProfileEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeveloperProfileEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &developerProfileEventR{}
			}
			foreign.R.DeveloperProfile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DeveloperProfileID {
				local.R.DeveloperProfileEvents = append(local.R.DeveloperProfileEvents, foreign)
				if foreign.R == nil {
					foreign.R = &developerProfileEventR{}
				}
				foreign.R.DeveloperProfile = local
				break
			}
		}
	}

	return nil
}

// SetImageG of the developerProfile to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.DeveloperProfiles.
// Uses the global database handle.
func (o *DeveloperProfile) SetImageG(ctx context.Context, insert bool, related *Image) error {
	return o.SetImage(ctx, boil.GetContextDB(), insert, related)
}

// SetImage of the developerProfile to the related item.
// Sets o.R.Image to related.
// Adds o to related.R.DeveloperProfiles.
func (o *DeveloperProfile) SetImage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Image) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"developer_profile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"image_id"}),
		strmangle.WhereClause("\"", "\"", 2, developerProfilePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ImageID = related.ID
	if o.R == nil {
		o.R = &developerProfileR{
			Image: related,
		}
	} else {
		o.R.Image = related
	}

	if related.R == nil {
		related.R = &imageR{
			DeveloperProfiles: DeveloperProfileSlice{o},
		}
	} else {
		related.R.DeveloperProfiles = append(related.R.DeveloperProfiles, o)
	}

	return nil
}

// AddDeveloperProfileEventsG adds the given related objects to the existing relationships
// of the developer_profile, optionally inserting them as new records.
// Appends related to o.R.DeveloperProfileEvents.
// Sets related.R.DeveloperProfile appropriately.
// Uses the global database handle.
func (o *DeveloperProfile) AddDeveloperProfileEventsG(ctx context.Context, insert bool, related ...*DeveloperProfileEvent) error {
	return o.AddDeveloperProfileEvents(ctx, boil.GetContextDB(), insert, related...)
}

// AddDeveloperProfileEvents adds the given related objects to the existing relationships
// of the developer_profile, optionally inserting them as new records.
// Appends related to o.R.DeveloperProfileEvents.
// Sets related.R.DeveloperProfile appropriately.
func (o *DeveloperProfile) AddDeveloperProfileEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeveloperProfileEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DeveloperProfileID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"developer_profile_event\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"developer_profile_id"}),
				strmangle.WhereClause("\"", "\"", 2, developerProfileEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DeveloperProfileID = o.ID
		}
	}

	if o.R == nil {
		o.R = &developerProfileR{
			DeveloperProfileEvents: related,
		}
	} else {
		o.R.DeveloperProfileEvents = append(o.R.DeveloperProfileEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &developerProfileEventR{
				DeveloperProfile: o,
			}
		} else {
			rel.R.DeveloperProfile = o
		}
	}
	return nil
}

// DeveloperProfiles retrieves all the records using an executor.
func DeveloperProfiles(mods ...qm.QueryMod) developerProfileQuery {
	mods = append(mods, qm.From("\"developer_profile\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"developer_profile\".*"})
	}

	return developerProfileQuery{q}
}

// FindDeveloperProfileG retrieves a single record by ID.
func FindDeveloperProfileG(ctx context.Context, iD string, selectCols ...string) (*DeveloperProfile, error) {
	return FindDeveloperProfile(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDeveloperProfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeveloperProfile(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DeveloperProfile, error) {
	developerProfileObj := &DeveloperProfile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"developer_profile\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, developerProfileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from developer_profile")
	}

	if err = developerProfileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return developerProfileObj, err
	}

	return developerProfileObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DeveloperProfile) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeveloperProfile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no developer_profile provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(developerProfileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	developerProfileInsertCacheMut.RLock()
	cache, cached := developerProfileInsertCache[key]
	developerProfileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			developerProfileAllColumns,
			developerProfileColumnsWithDefault,
			developerProfileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(developerProfileType, developerProfileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(developerProfileType, developerProfileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"developer_profile\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"developer_profile\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into developer_profile")
	}

	if !cached {
		developerProfileInsertCacheMut.Lock()
		developerProfileInsertCache[key] = cache
		developerProfileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DeveloperProfile record using the global executor.
// See Update for more documentation.
func (o *DeveloperProfile) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DeveloperProfile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeveloperProfile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	developerProfileUpdateCacheMut.RLock()
	cache, cached := developerProfileUpdateCache[key]
	developerProfileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			developerProfileAllColumns,
			developerProfilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update developer_profile, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"developer_profile\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, developerProfilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(developerProfileType, developerProfileMapping, append(wl, developerProfilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update developer_profile row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for developer_profile")
	}

	if !cached {
		developerProfileUpdateCacheMut.Lock()
		developerProfileUpdateCache[key] = cache
		developerProfileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q developerProfileQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q developerProfileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for developer_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for developer_profile")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DeveloperProfileSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeveloperProfileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"developer_profile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, developerProfilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in developerProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all developerProfile")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DeveloperProfile) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeveloperProfile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no developer_profile provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(developerProfileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	developerProfileUpsertCacheMut.RLock()
	cache, cached := developerProfileUpsertCache[key]
	developerProfileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			developerProfileAllColumns,
			developerProfileColumnsWithDefault,
			developerProfileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			developerProfileAllColumns,
			developerProfilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert developer_profile, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(developerProfilePrimaryKeyColumns))
			copy(conflict, developerProfilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"developer_profile\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(developerProfileType, developerProfileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(developerProfileType, developerProfileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert developer_profile")
	}

	if !cached {
		developerProfileUpsertCacheMut.Lock()
		developerProfileUpsertCache[key] = cache
		developerProfileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DeveloperProfile record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DeveloperProfile) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DeveloperProfile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeveloperProfile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no DeveloperProfile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), developerProfilePrimaryKeyMapping)
	sql := "DELETE FROM \"developer_profile\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from developer_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for developer_profile")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q developerProfileQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q developerProfileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no developerProfileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from developer_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for developer_profile")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DeveloperProfileSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeveloperProfileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(developerProfileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"developer_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, developerProfilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from developerProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for developer_profile")
	}

	if len(developerProfileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DeveloperProfile) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no DeveloperProfile provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeveloperProfile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeveloperProfile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeveloperProfileSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty DeveloperProfileSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeveloperProfileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeveloperProfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"developer_profile\".* FROM \"developer_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, developerProfilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in DeveloperProfileSlice")
	}

	*o = slice

	return nil
}

// DeveloperProfileExistsG checks if the DeveloperProfile row exists.
func DeveloperProfileExistsG(ctx context.Context, iD string) (bool, error) {
	return DeveloperProfileExists(ctx, boil.GetContextDB(), iD)
}

// DeveloperProfileExists checks if the DeveloperProfile row exists.
func DeveloperProfileExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"developer_profile\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if developer_profile exists")
	}

	return exists, nil
}

// Exists checks if the DeveloperProfile row exists.
func (o *DeveloperProfile) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeveloperProfileExists(ctx, exec, o.ID)
}
