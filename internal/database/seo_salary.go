// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SeoSalary is an object representing the database table.
type SeoSalary struct {
	ID       string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Location string `boil:"location" json:"location" toml:"location" yaml:"location"`
	Currency string `boil:"currency" json:"currency" toml:"currency" yaml:"currency"`
	URI      string `boil:"uri" json:"uri" toml:"uri" yaml:"uri"`

	R *seoSalaryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seoSalaryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeoSalaryColumns = struct {
	ID       string
	Location string
	Currency string
	URI      string
}{
	ID:       "id",
	Location: "location",
	Currency: "currency",
	URI:      "uri",
}

var SeoSalaryTableColumns = struct {
	ID       string
	Location string
	Currency string
	URI      string
}{
	ID:       "seo_salary.id",
	Location: "seo_salary.location",
	Currency: "seo_salary.currency",
	URI:      "seo_salary.uri",
}

// Generated where

var SeoSalaryWhere = struct {
	ID       whereHelperstring
	Location whereHelperstring
	Currency whereHelperstring
	URI      whereHelperstring
}{
	ID:       whereHelperstring{field: "\"seo_salary\".\"id\""},
	Location: whereHelperstring{field: "\"seo_salary\".\"location\""},
	Currency: whereHelperstring{field: "\"seo_salary\".\"currency\""},
	URI:      whereHelperstring{field: "\"seo_salary\".\"uri\""},
}

// SeoSalaryRels is where relationship names are stored.
var SeoSalaryRels = struct {
}{}

// seoSalaryR is where relationships are stored.
type seoSalaryR struct {
}

// NewStruct creates a new relationship struct
func (*seoSalaryR) NewStruct() *seoSalaryR {
	return &seoSalaryR{}
}

// seoSalaryL is where Load methods for each relationship are stored.
type seoSalaryL struct{}

var (
	seoSalaryAllColumns            = []string{"id", "location", "currency", "uri"}
	seoSalaryColumnsWithoutDefault = []string{"id", "location", "currency", "uri"}
	seoSalaryColumnsWithDefault    = []string{}
	seoSalaryPrimaryKeyColumns     = []string{"id"}
	seoSalaryGeneratedColumns      = []string{}
)

type (
	// SeoSalarySlice is an alias for a slice of pointers to SeoSalary.
	// This should almost always be used instead of []SeoSalary.
	SeoSalarySlice []*SeoSalary
	// SeoSalaryHook is the signature for custom SeoSalary hook methods
	SeoSalaryHook func(context.Context, boil.ContextExecutor, *SeoSalary) error

	seoSalaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seoSalaryType                 = reflect.TypeOf(&SeoSalary{})
	seoSalaryMapping              = queries.MakeStructMapping(seoSalaryType)
	seoSalaryPrimaryKeyMapping, _ = queries.BindMapping(seoSalaryType, seoSalaryMapping, seoSalaryPrimaryKeyColumns)
	seoSalaryInsertCacheMut       sync.RWMutex
	seoSalaryInsertCache          = make(map[string]insertCache)
	seoSalaryUpdateCacheMut       sync.RWMutex
	seoSalaryUpdateCache          = make(map[string]updateCache)
	seoSalaryUpsertCacheMut       sync.RWMutex
	seoSalaryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var seoSalaryAfterSelectHooks []SeoSalaryHook

var seoSalaryBeforeInsertHooks []SeoSalaryHook
var seoSalaryAfterInsertHooks []SeoSalaryHook

var seoSalaryBeforeUpdateHooks []SeoSalaryHook
var seoSalaryAfterUpdateHooks []SeoSalaryHook

var seoSalaryBeforeDeleteHooks []SeoSalaryHook
var seoSalaryAfterDeleteHooks []SeoSalaryHook

var seoSalaryBeforeUpsertHooks []SeoSalaryHook
var seoSalaryAfterUpsertHooks []SeoSalaryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SeoSalary) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSalaryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SeoSalary) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSalaryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SeoSalary) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSalaryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SeoSalary) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSalaryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SeoSalary) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSalaryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SeoSalary) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSalaryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SeoSalary) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSalaryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SeoSalary) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSalaryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SeoSalary) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSalaryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSeoSalaryHook registers your hook function for all future operations.
func AddSeoSalaryHook(hookPoint boil.HookPoint, seoSalaryHook SeoSalaryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		seoSalaryAfterSelectHooks = append(seoSalaryAfterSelectHooks, seoSalaryHook)
	case boil.BeforeInsertHook:
		seoSalaryBeforeInsertHooks = append(seoSalaryBeforeInsertHooks, seoSalaryHook)
	case boil.AfterInsertHook:
		seoSalaryAfterInsertHooks = append(seoSalaryAfterInsertHooks, seoSalaryHook)
	case boil.BeforeUpdateHook:
		seoSalaryBeforeUpdateHooks = append(seoSalaryBeforeUpdateHooks, seoSalaryHook)
	case boil.AfterUpdateHook:
		seoSalaryAfterUpdateHooks = append(seoSalaryAfterUpdateHooks, seoSalaryHook)
	case boil.BeforeDeleteHook:
		seoSalaryBeforeDeleteHooks = append(seoSalaryBeforeDeleteHooks, seoSalaryHook)
	case boil.AfterDeleteHook:
		seoSalaryAfterDeleteHooks = append(seoSalaryAfterDeleteHooks, seoSalaryHook)
	case boil.BeforeUpsertHook:
		seoSalaryBeforeUpsertHooks = append(seoSalaryBeforeUpsertHooks, seoSalaryHook)
	case boil.AfterUpsertHook:
		seoSalaryAfterUpsertHooks = append(seoSalaryAfterUpsertHooks, seoSalaryHook)
	}
}

// OneG returns a single seoSalary record from the query using the global executor.
func (q seoSalaryQuery) OneG(ctx context.Context) (*SeoSalary, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single seoSalary record from the query.
func (q seoSalaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SeoSalary, error) {
	o := &SeoSalary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for seo_salary")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all SeoSalary records from the query using the global executor.
func (q seoSalaryQuery) AllG(ctx context.Context) (SeoSalarySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all SeoSalary records from the query.
func (q seoSalaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeoSalarySlice, error) {
	var o []*SeoSalary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to SeoSalary slice")
	}

	if len(seoSalaryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all SeoSalary records in the query using the global executor
func (q seoSalaryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all SeoSalary records in the query.
func (q seoSalaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count seo_salary rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q seoSalaryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q seoSalaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if seo_salary exists")
	}

	return count > 0, nil
}

// SeoSalaries retrieves all the records using an executor.
func SeoSalaries(mods ...qm.QueryMod) seoSalaryQuery {
	mods = append(mods, qm.From("\"seo_salary\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"seo_salary\".*"})
	}

	return seoSalaryQuery{q}
}

// FindSeoSalaryG retrieves a single record by ID.
func FindSeoSalaryG(ctx context.Context, iD string, selectCols ...string) (*SeoSalary, error) {
	return FindSeoSalary(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindSeoSalary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeoSalary(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SeoSalary, error) {
	seoSalaryObj := &SeoSalary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"seo_salary\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, seoSalaryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from seo_salary")
	}

	if err = seoSalaryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return seoSalaryObj, err
	}

	return seoSalaryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SeoSalary) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SeoSalary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no seo_salary provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seoSalaryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seoSalaryInsertCacheMut.RLock()
	cache, cached := seoSalaryInsertCache[key]
	seoSalaryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seoSalaryAllColumns,
			seoSalaryColumnsWithDefault,
			seoSalaryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seoSalaryType, seoSalaryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seoSalaryType, seoSalaryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"seo_salary\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"seo_salary\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into seo_salary")
	}

	if !cached {
		seoSalaryInsertCacheMut.Lock()
		seoSalaryInsertCache[key] = cache
		seoSalaryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single SeoSalary record using the global executor.
// See Update for more documentation.
func (o *SeoSalary) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the SeoSalary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SeoSalary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	seoSalaryUpdateCacheMut.RLock()
	cache, cached := seoSalaryUpdateCache[key]
	seoSalaryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seoSalaryAllColumns,
			seoSalaryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update seo_salary, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"seo_salary\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, seoSalaryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seoSalaryType, seoSalaryMapping, append(wl, seoSalaryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update seo_salary row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for seo_salary")
	}

	if !cached {
		seoSalaryUpdateCacheMut.Lock()
		seoSalaryUpdateCache[key] = cache
		seoSalaryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q seoSalaryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q seoSalaryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for seo_salary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for seo_salary")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SeoSalarySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeoSalarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seoSalaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"seo_salary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, seoSalaryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in seoSalary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all seoSalary")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SeoSalary) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SeoSalary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no seo_salary provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seoSalaryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seoSalaryUpsertCacheMut.RLock()
	cache, cached := seoSalaryUpsertCache[key]
	seoSalaryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			seoSalaryAllColumns,
			seoSalaryColumnsWithDefault,
			seoSalaryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			seoSalaryAllColumns,
			seoSalaryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert seo_salary, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(seoSalaryPrimaryKeyColumns))
			copy(conflict, seoSalaryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"seo_salary\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(seoSalaryType, seoSalaryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seoSalaryType, seoSalaryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert seo_salary")
	}

	if !cached {
		seoSalaryUpsertCacheMut.Lock()
		seoSalaryUpsertCache[key] = cache
		seoSalaryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single SeoSalary record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SeoSalary) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single SeoSalary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SeoSalary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no SeoSalary provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seoSalaryPrimaryKeyMapping)
	sql := "DELETE FROM \"seo_salary\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from seo_salary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for seo_salary")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q seoSalaryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q seoSalaryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no seoSalaryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from seo_salary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for seo_salary")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SeoSalarySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeoSalarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(seoSalaryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seoSalaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"seo_salary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seoSalaryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from seoSalary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for seo_salary")
	}

	if len(seoSalaryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SeoSalary) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no SeoSalary provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SeoSalary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSeoSalary(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeoSalarySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty SeoSalarySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeoSalarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeoSalarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seoSalaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"seo_salary\".* FROM \"seo_salary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seoSalaryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in SeoSalarySlice")
	}

	*o = slice

	return nil
}

// SeoSalaryExistsG checks if the SeoSalary row exists.
func SeoSalaryExistsG(ctx context.Context, iD string) (bool, error) {
	return SeoSalaryExists(ctx, boil.GetContextDB(), iD)
}

// SeoSalaryExists checks if the SeoSalary row exists.
func SeoSalaryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"seo_salary\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if seo_salary exists")
	}

	return exists, nil
}

// Exists checks if the SeoSalary row exists.
func (o *SeoSalary) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SeoSalaryExists(ctx, exec, o.ID)
}
