// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FXRate is an object representing the database table.
type FXRate struct {
	Base      string    `boil:"base" json:"base" toml:"base" yaml:"base"`
	Target    string    `boil:"target" json:"target" toml:"target" yaml:"target"`
	Value     float64   `boil:"value" json:"value" toml:"value" yaml:"value"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *fxRateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fxRateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FXRateColumns = struct {
	Base      string
	Target    string
	Value     string
	UpdatedAt string
}{
	Base:      "base",
	Target:    "target",
	Value:     "value",
	UpdatedAt: "updated_at",
}

var FXRateTableColumns = struct {
	Base      string
	Target    string
	Value     string
	UpdatedAt string
}{
	Base:      "fx_rate.base",
	Target:    "fx_rate.target",
	Value:     "fx_rate.value",
	UpdatedAt: "fx_rate.updated_at",
}

// Generated where

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var FXRateWhere = struct {
	Base      whereHelperstring
	Target    whereHelperstring
	Value     whereHelperfloat64
	UpdatedAt whereHelpertime_Time
}{
	Base:      whereHelperstring{field: "\"fx_rate\".\"base\""},
	Target:    whereHelperstring{field: "\"fx_rate\".\"target\""},
	Value:     whereHelperfloat64{field: "\"fx_rate\".\"value\""},
	UpdatedAt: whereHelpertime_Time{field: "\"fx_rate\".\"updated_at\""},
}

// FXRateRels is where relationship names are stored.
var FXRateRels = struct {
}{}

// fxRateR is where relationships are stored.
type fxRateR struct {
}

// NewStruct creates a new relationship struct
func (*fxRateR) NewStruct() *fxRateR {
	return &fxRateR{}
}

// fxRateL is where Load methods for each relationship are stored.
type fxRateL struct{}

var (
	fxRateAllColumns            = []string{"base", "target", "value", "updated_at"}
	fxRateColumnsWithoutDefault = []string{"base", "target", "value", "updated_at"}
	fxRateColumnsWithDefault    = []string{}
	fxRatePrimaryKeyColumns     = []string{"base", "target"}
	fxRateGeneratedColumns      = []string{}
)

type (
	// FXRateSlice is an alias for a slice of pointers to FXRate.
	// This should almost always be used instead of []FXRate.
	FXRateSlice []*FXRate
	// FXRateHook is the signature for custom FXRate hook methods
	FXRateHook func(context.Context, boil.ContextExecutor, *FXRate) error

	fxRateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fxRateType                 = reflect.TypeOf(&FXRate{})
	fxRateMapping              = queries.MakeStructMapping(fxRateType)
	fxRatePrimaryKeyMapping, _ = queries.BindMapping(fxRateType, fxRateMapping, fxRatePrimaryKeyColumns)
	fxRateInsertCacheMut       sync.RWMutex
	fxRateInsertCache          = make(map[string]insertCache)
	fxRateUpdateCacheMut       sync.RWMutex
	fxRateUpdateCache          = make(map[string]updateCache)
	fxRateUpsertCacheMut       sync.RWMutex
	fxRateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fxRateAfterSelectHooks []FXRateHook

var fxRateBeforeInsertHooks []FXRateHook
var fxRateAfterInsertHooks []FXRateHook

var fxRateBeforeUpdateHooks []FXRateHook
var fxRateAfterUpdateHooks []FXRateHook

var fxRateBeforeDeleteHooks []FXRateHook
var fxRateAfterDeleteHooks []FXRateHook

var fxRateBeforeUpsertHooks []FXRateHook
var fxRateAfterUpsertHooks []FXRateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FXRate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxRateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FXRate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxRateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FXRate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxRateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FXRate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxRateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FXRate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxRateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FXRate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxRateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FXRate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxRateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FXRate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxRateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FXRate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fxRateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFXRateHook registers your hook function for all future operations.
func AddFXRateHook(hookPoint boil.HookPoint, fxRateHook FXRateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fxRateAfterSelectHooks = append(fxRateAfterSelectHooks, fxRateHook)
	case boil.BeforeInsertHook:
		fxRateBeforeInsertHooks = append(fxRateBeforeInsertHooks, fxRateHook)
	case boil.AfterInsertHook:
		fxRateAfterInsertHooks = append(fxRateAfterInsertHooks, fxRateHook)
	case boil.BeforeUpdateHook:
		fxRateBeforeUpdateHooks = append(fxRateBeforeUpdateHooks, fxRateHook)
	case boil.AfterUpdateHook:
		fxRateAfterUpdateHooks = append(fxRateAfterUpdateHooks, fxRateHook)
	case boil.BeforeDeleteHook:
		fxRateBeforeDeleteHooks = append(fxRateBeforeDeleteHooks, fxRateHook)
	case boil.AfterDeleteHook:
		fxRateAfterDeleteHooks = append(fxRateAfterDeleteHooks, fxRateHook)
	case boil.BeforeUpsertHook:
		fxRateBeforeUpsertHooks = append(fxRateBeforeUpsertHooks, fxRateHook)
	case boil.AfterUpsertHook:
		fxRateAfterUpsertHooks = append(fxRateAfterUpsertHooks, fxRateHook)
	}
}

// OneG returns a single fxRate record from the query using the global executor.
func (q fxRateQuery) OneG(ctx context.Context) (*FXRate, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single fxRate record from the query.
func (q fxRateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FXRate, error) {
	o := &FXRate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for fx_rate")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all FXRate records from the query using the global executor.
func (q fxRateQuery) AllG(ctx context.Context) (FXRateSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all FXRate records from the query.
func (q fxRateQuery) All(ctx context.Context, exec boil.ContextExecutor) (FXRateSlice, error) {
	var o []*FXRate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to FXRate slice")
	}

	if len(fxRateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all FXRate records in the query using the global executor
func (q fxRateQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all FXRate records in the query.
func (q fxRateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count fx_rate rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q fxRateQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q fxRateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if fx_rate exists")
	}

	return count > 0, nil
}

// FXRates retrieves all the records using an executor.
func FXRates(mods ...qm.QueryMod) fxRateQuery {
	mods = append(mods, qm.From("\"fx_rate\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"fx_rate\".*"})
	}

	return fxRateQuery{q}
}

// FindFXRateG retrieves a single record by ID.
func FindFXRateG(ctx context.Context, base string, target string, selectCols ...string) (*FXRate, error) {
	return FindFXRate(ctx, boil.GetContextDB(), base, target, selectCols...)
}

// FindFXRate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFXRate(ctx context.Context, exec boil.ContextExecutor, base string, target string, selectCols ...string) (*FXRate, error) {
	fxRateObj := &FXRate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"fx_rate\" where \"base\"=$1 AND \"target\"=$2", sel,
	)

	q := queries.Raw(query, base, target)

	err := q.Bind(ctx, exec, fxRateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from fx_rate")
	}

	if err = fxRateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fxRateObj, err
	}

	return fxRateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *FXRate) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FXRate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no fx_rate provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fxRateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fxRateInsertCacheMut.RLock()
	cache, cached := fxRateInsertCache[key]
	fxRateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fxRateAllColumns,
			fxRateColumnsWithDefault,
			fxRateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fxRateType, fxRateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fxRateType, fxRateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"fx_rate\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"fx_rate\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into fx_rate")
	}

	if !cached {
		fxRateInsertCacheMut.Lock()
		fxRateInsertCache[key] = cache
		fxRateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single FXRate record using the global executor.
// See Update for more documentation.
func (o *FXRate) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the FXRate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FXRate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fxRateUpdateCacheMut.RLock()
	cache, cached := fxRateUpdateCache[key]
	fxRateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fxRateAllColumns,
			fxRatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update fx_rate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"fx_rate\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fxRatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fxRateType, fxRateMapping, append(wl, fxRatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update fx_rate row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for fx_rate")
	}

	if !cached {
		fxRateUpdateCacheMut.Lock()
		fxRateUpdateCache[key] = cache
		fxRateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q fxRateQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q fxRateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for fx_rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for fx_rate")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FXRateSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FXRateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fxRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"fx_rate\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fxRatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in fxRate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all fxRate")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *FXRate) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FXRate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no fx_rate provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fxRateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fxRateUpsertCacheMut.RLock()
	cache, cached := fxRateUpsertCache[key]
	fxRateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			fxRateAllColumns,
			fxRateColumnsWithDefault,
			fxRateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fxRateAllColumns,
			fxRatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert fx_rate, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(fxRatePrimaryKeyColumns))
			copy(conflict, fxRatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"fx_rate\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(fxRateType, fxRateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fxRateType, fxRateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert fx_rate")
	}

	if !cached {
		fxRateUpsertCacheMut.Lock()
		fxRateUpsertCache[key] = cache
		fxRateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single FXRate record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *FXRate) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single FXRate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FXRate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no FXRate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fxRatePrimaryKeyMapping)
	sql := "DELETE FROM \"fx_rate\" WHERE \"base\"=$1 AND \"target\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from fx_rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for fx_rate")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q fxRateQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q fxRateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no fxRateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from fx_rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for fx_rate")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FXRateSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FXRateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fxRateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fxRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"fx_rate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fxRatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from fxRate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for fx_rate")
	}

	if len(fxRateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *FXRate) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no FXRate provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FXRate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFXRate(ctx, exec, o.Base, o.Target)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FXRateSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty FXRateSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FXRateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FXRateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fxRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"fx_rate\".* FROM \"fx_rate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fxRatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in FXRateSlice")
	}

	*o = slice

	return nil
}

// FXRateExistsG checks if the FXRate row exists.
func FXRateExistsG(ctx context.Context, base string, target string) (bool, error) {
	return FXRateExists(ctx, boil.GetContextDB(), base, target)
}

// FXRateExists checks if the FXRate row exists.
func FXRateExists(ctx context.Context, exec boil.ContextExecutor, base string, target string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"fx_rate\" where \"base\"=$1 AND \"target\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, base, target)
	}
	row := exec.QueryRowContext(ctx, sql, base, target)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if fx_rate exists")
	}

	return exists, nil
}

// Exists checks if the FXRate row exists.
func (o *FXRate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FXRateExists(ctx, exec, o.Base, o.Target)
}
