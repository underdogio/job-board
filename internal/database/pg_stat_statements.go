// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PGStatStatement is an object representing the database table.
type PGStatStatement struct {
	Userid               null.Uint32       `boil:"userid" json:"userid,omitempty" toml:"userid" yaml:"userid,omitempty"`
	Dbid                 null.Uint32       `boil:"dbid" json:"dbid,omitempty" toml:"dbid" yaml:"dbid,omitempty"`
	Toplevel             null.Bool         `boil:"toplevel" json:"toplevel,omitempty" toml:"toplevel" yaml:"toplevel,omitempty"`
	Queryid              null.Int64        `boil:"queryid" json:"queryid,omitempty" toml:"queryid" yaml:"queryid,omitempty"`
	Query                null.String       `boil:"query" json:"query,omitempty" toml:"query" yaml:"query,omitempty"`
	Plans                null.Int64        `boil:"plans" json:"plans,omitempty" toml:"plans" yaml:"plans,omitempty"`
	TotalPlanTime        null.Float64      `boil:"total_plan_time" json:"total_plan_time,omitempty" toml:"total_plan_time" yaml:"total_plan_time,omitempty"`
	MinPlanTime          null.Float64      `boil:"min_plan_time" json:"min_plan_time,omitempty" toml:"min_plan_time" yaml:"min_plan_time,omitempty"`
	MaxPlanTime          null.Float64      `boil:"max_plan_time" json:"max_plan_time,omitempty" toml:"max_plan_time" yaml:"max_plan_time,omitempty"`
	MeanPlanTime         null.Float64      `boil:"mean_plan_time" json:"mean_plan_time,omitempty" toml:"mean_plan_time" yaml:"mean_plan_time,omitempty"`
	StddevPlanTime       null.Float64      `boil:"stddev_plan_time" json:"stddev_plan_time,omitempty" toml:"stddev_plan_time" yaml:"stddev_plan_time,omitempty"`
	Calls                null.Int64        `boil:"calls" json:"calls,omitempty" toml:"calls" yaml:"calls,omitempty"`
	TotalExecTime        null.Float64      `boil:"total_exec_time" json:"total_exec_time,omitempty" toml:"total_exec_time" yaml:"total_exec_time,omitempty"`
	MinExecTime          null.Float64      `boil:"min_exec_time" json:"min_exec_time,omitempty" toml:"min_exec_time" yaml:"min_exec_time,omitempty"`
	MaxExecTime          null.Float64      `boil:"max_exec_time" json:"max_exec_time,omitempty" toml:"max_exec_time" yaml:"max_exec_time,omitempty"`
	MeanExecTime         null.Float64      `boil:"mean_exec_time" json:"mean_exec_time,omitempty" toml:"mean_exec_time" yaml:"mean_exec_time,omitempty"`
	StddevExecTime       null.Float64      `boil:"stddev_exec_time" json:"stddev_exec_time,omitempty" toml:"stddev_exec_time" yaml:"stddev_exec_time,omitempty"`
	Rows                 null.Int64        `boil:"rows" json:"rows,omitempty" toml:"rows" yaml:"rows,omitempty"`
	SharedBLKSHit        null.Int64        `boil:"shared_blks_hit" json:"shared_blks_hit,omitempty" toml:"shared_blks_hit" yaml:"shared_blks_hit,omitempty"`
	SharedBLKSRead       null.Int64        `boil:"shared_blks_read" json:"shared_blks_read,omitempty" toml:"shared_blks_read" yaml:"shared_blks_read,omitempty"`
	SharedBLKSDirtied    null.Int64        `boil:"shared_blks_dirtied" json:"shared_blks_dirtied,omitempty" toml:"shared_blks_dirtied" yaml:"shared_blks_dirtied,omitempty"`
	SharedBLKSWritten    null.Int64        `boil:"shared_blks_written" json:"shared_blks_written,omitempty" toml:"shared_blks_written" yaml:"shared_blks_written,omitempty"`
	LocalBLKSHit         null.Int64        `boil:"local_blks_hit" json:"local_blks_hit,omitempty" toml:"local_blks_hit" yaml:"local_blks_hit,omitempty"`
	LocalBLKSRead        null.Int64        `boil:"local_blks_read" json:"local_blks_read,omitempty" toml:"local_blks_read" yaml:"local_blks_read,omitempty"`
	LocalBLKSDirtied     null.Int64        `boil:"local_blks_dirtied" json:"local_blks_dirtied,omitempty" toml:"local_blks_dirtied" yaml:"local_blks_dirtied,omitempty"`
	LocalBLKSWritten     null.Int64        `boil:"local_blks_written" json:"local_blks_written,omitempty" toml:"local_blks_written" yaml:"local_blks_written,omitempty"`
	TempBLKSRead         null.Int64        `boil:"temp_blks_read" json:"temp_blks_read,omitempty" toml:"temp_blks_read" yaml:"temp_blks_read,omitempty"`
	TempBLKSWritten      null.Int64        `boil:"temp_blks_written" json:"temp_blks_written,omitempty" toml:"temp_blks_written" yaml:"temp_blks_written,omitempty"`
	BLKReadTime          null.Float64      `boil:"blk_read_time" json:"blk_read_time,omitempty" toml:"blk_read_time" yaml:"blk_read_time,omitempty"`
	BLKWriteTime         null.Float64      `boil:"blk_write_time" json:"blk_write_time,omitempty" toml:"blk_write_time" yaml:"blk_write_time,omitempty"`
	TempBLKReadTime      null.Float64      `boil:"temp_blk_read_time" json:"temp_blk_read_time,omitempty" toml:"temp_blk_read_time" yaml:"temp_blk_read_time,omitempty"`
	TempBLKWriteTime     null.Float64      `boil:"temp_blk_write_time" json:"temp_blk_write_time,omitempty" toml:"temp_blk_write_time" yaml:"temp_blk_write_time,omitempty"`
	WalRecords           null.Int64        `boil:"wal_records" json:"wal_records,omitempty" toml:"wal_records" yaml:"wal_records,omitempty"`
	WalFpi               null.Int64        `boil:"wal_fpi" json:"wal_fpi,omitempty" toml:"wal_fpi" yaml:"wal_fpi,omitempty"`
	WalBytes             types.NullDecimal `boil:"wal_bytes" json:"wal_bytes,omitempty" toml:"wal_bytes" yaml:"wal_bytes,omitempty"`
	JitFunctions         null.Int64        `boil:"jit_functions" json:"jit_functions,omitempty" toml:"jit_functions" yaml:"jit_functions,omitempty"`
	JitGenerationTime    null.Float64      `boil:"jit_generation_time" json:"jit_generation_time,omitempty" toml:"jit_generation_time" yaml:"jit_generation_time,omitempty"`
	JitInliningCount     null.Int64        `boil:"jit_inlining_count" json:"jit_inlining_count,omitempty" toml:"jit_inlining_count" yaml:"jit_inlining_count,omitempty"`
	JitInliningTime      null.Float64      `boil:"jit_inlining_time" json:"jit_inlining_time,omitempty" toml:"jit_inlining_time" yaml:"jit_inlining_time,omitempty"`
	JitOptimizationCount null.Int64        `boil:"jit_optimization_count" json:"jit_optimization_count,omitempty" toml:"jit_optimization_count" yaml:"jit_optimization_count,omitempty"`
	JitOptimizationTime  null.Float64      `boil:"jit_optimization_time" json:"jit_optimization_time,omitempty" toml:"jit_optimization_time" yaml:"jit_optimization_time,omitempty"`
	JitEmissionCount     null.Int64        `boil:"jit_emission_count" json:"jit_emission_count,omitempty" toml:"jit_emission_count" yaml:"jit_emission_count,omitempty"`
	JitEmissionTime      null.Float64      `boil:"jit_emission_time" json:"jit_emission_time,omitempty" toml:"jit_emission_time" yaml:"jit_emission_time,omitempty"`
}

var PGStatStatementColumns = struct {
	Userid               string
	Dbid                 string
	Toplevel             string
	Queryid              string
	Query                string
	Plans                string
	TotalPlanTime        string
	MinPlanTime          string
	MaxPlanTime          string
	MeanPlanTime         string
	StddevPlanTime       string
	Calls                string
	TotalExecTime        string
	MinExecTime          string
	MaxExecTime          string
	MeanExecTime         string
	StddevExecTime       string
	Rows                 string
	SharedBLKSHit        string
	SharedBLKSRead       string
	SharedBLKSDirtied    string
	SharedBLKSWritten    string
	LocalBLKSHit         string
	LocalBLKSRead        string
	LocalBLKSDirtied     string
	LocalBLKSWritten     string
	TempBLKSRead         string
	TempBLKSWritten      string
	BLKReadTime          string
	BLKWriteTime         string
	TempBLKReadTime      string
	TempBLKWriteTime     string
	WalRecords           string
	WalFpi               string
	WalBytes             string
	JitFunctions         string
	JitGenerationTime    string
	JitInliningCount     string
	JitInliningTime      string
	JitOptimizationCount string
	JitOptimizationTime  string
	JitEmissionCount     string
	JitEmissionTime      string
}{
	Userid:               "userid",
	Dbid:                 "dbid",
	Toplevel:             "toplevel",
	Queryid:              "queryid",
	Query:                "query",
	Plans:                "plans",
	TotalPlanTime:        "total_plan_time",
	MinPlanTime:          "min_plan_time",
	MaxPlanTime:          "max_plan_time",
	MeanPlanTime:         "mean_plan_time",
	StddevPlanTime:       "stddev_plan_time",
	Calls:                "calls",
	TotalExecTime:        "total_exec_time",
	MinExecTime:          "min_exec_time",
	MaxExecTime:          "max_exec_time",
	MeanExecTime:         "mean_exec_time",
	StddevExecTime:       "stddev_exec_time",
	Rows:                 "rows",
	SharedBLKSHit:        "shared_blks_hit",
	SharedBLKSRead:       "shared_blks_read",
	SharedBLKSDirtied:    "shared_blks_dirtied",
	SharedBLKSWritten:    "shared_blks_written",
	LocalBLKSHit:         "local_blks_hit",
	LocalBLKSRead:        "local_blks_read",
	LocalBLKSDirtied:     "local_blks_dirtied",
	LocalBLKSWritten:     "local_blks_written",
	TempBLKSRead:         "temp_blks_read",
	TempBLKSWritten:      "temp_blks_written",
	BLKReadTime:          "blk_read_time",
	BLKWriteTime:         "blk_write_time",
	TempBLKReadTime:      "temp_blk_read_time",
	TempBLKWriteTime:     "temp_blk_write_time",
	WalRecords:           "wal_records",
	WalFpi:               "wal_fpi",
	WalBytes:             "wal_bytes",
	JitFunctions:         "jit_functions",
	JitGenerationTime:    "jit_generation_time",
	JitInliningCount:     "jit_inlining_count",
	JitInliningTime:      "jit_inlining_time",
	JitOptimizationCount: "jit_optimization_count",
	JitOptimizationTime:  "jit_optimization_time",
	JitEmissionCount:     "jit_emission_count",
	JitEmissionTime:      "jit_emission_time",
}

var PGStatStatementTableColumns = struct {
	Userid               string
	Dbid                 string
	Toplevel             string
	Queryid              string
	Query                string
	Plans                string
	TotalPlanTime        string
	MinPlanTime          string
	MaxPlanTime          string
	MeanPlanTime         string
	StddevPlanTime       string
	Calls                string
	TotalExecTime        string
	MinExecTime          string
	MaxExecTime          string
	MeanExecTime         string
	StddevExecTime       string
	Rows                 string
	SharedBLKSHit        string
	SharedBLKSRead       string
	SharedBLKSDirtied    string
	SharedBLKSWritten    string
	LocalBLKSHit         string
	LocalBLKSRead        string
	LocalBLKSDirtied     string
	LocalBLKSWritten     string
	TempBLKSRead         string
	TempBLKSWritten      string
	BLKReadTime          string
	BLKWriteTime         string
	TempBLKReadTime      string
	TempBLKWriteTime     string
	WalRecords           string
	WalFpi               string
	WalBytes             string
	JitFunctions         string
	JitGenerationTime    string
	JitInliningCount     string
	JitInliningTime      string
	JitOptimizationCount string
	JitOptimizationTime  string
	JitEmissionCount     string
	JitEmissionTime      string
}{
	Userid:               "pg_stat_statements.userid",
	Dbid:                 "pg_stat_statements.dbid",
	Toplevel:             "pg_stat_statements.toplevel",
	Queryid:              "pg_stat_statements.queryid",
	Query:                "pg_stat_statements.query",
	Plans:                "pg_stat_statements.plans",
	TotalPlanTime:        "pg_stat_statements.total_plan_time",
	MinPlanTime:          "pg_stat_statements.min_plan_time",
	MaxPlanTime:          "pg_stat_statements.max_plan_time",
	MeanPlanTime:         "pg_stat_statements.mean_plan_time",
	StddevPlanTime:       "pg_stat_statements.stddev_plan_time",
	Calls:                "pg_stat_statements.calls",
	TotalExecTime:        "pg_stat_statements.total_exec_time",
	MinExecTime:          "pg_stat_statements.min_exec_time",
	MaxExecTime:          "pg_stat_statements.max_exec_time",
	MeanExecTime:         "pg_stat_statements.mean_exec_time",
	StddevExecTime:       "pg_stat_statements.stddev_exec_time",
	Rows:                 "pg_stat_statements.rows",
	SharedBLKSHit:        "pg_stat_statements.shared_blks_hit",
	SharedBLKSRead:       "pg_stat_statements.shared_blks_read",
	SharedBLKSDirtied:    "pg_stat_statements.shared_blks_dirtied",
	SharedBLKSWritten:    "pg_stat_statements.shared_blks_written",
	LocalBLKSHit:         "pg_stat_statements.local_blks_hit",
	LocalBLKSRead:        "pg_stat_statements.local_blks_read",
	LocalBLKSDirtied:     "pg_stat_statements.local_blks_dirtied",
	LocalBLKSWritten:     "pg_stat_statements.local_blks_written",
	TempBLKSRead:         "pg_stat_statements.temp_blks_read",
	TempBLKSWritten:      "pg_stat_statements.temp_blks_written",
	BLKReadTime:          "pg_stat_statements.blk_read_time",
	BLKWriteTime:         "pg_stat_statements.blk_write_time",
	TempBLKReadTime:      "pg_stat_statements.temp_blk_read_time",
	TempBLKWriteTime:     "pg_stat_statements.temp_blk_write_time",
	WalRecords:           "pg_stat_statements.wal_records",
	WalFpi:               "pg_stat_statements.wal_fpi",
	WalBytes:             "pg_stat_statements.wal_bytes",
	JitFunctions:         "pg_stat_statements.jit_functions",
	JitGenerationTime:    "pg_stat_statements.jit_generation_time",
	JitInliningCount:     "pg_stat_statements.jit_inlining_count",
	JitInliningTime:      "pg_stat_statements.jit_inlining_time",
	JitOptimizationCount: "pg_stat_statements.jit_optimization_count",
	JitOptimizationTime:  "pg_stat_statements.jit_optimization_time",
	JitEmissionCount:     "pg_stat_statements.jit_emission_count",
	JitEmissionTime:      "pg_stat_statements.jit_emission_time",
}

// Generated where

type whereHelpernull_Uint32 struct{ field string }

func (w whereHelpernull_Uint32) EQ(x null.Uint32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Uint32) NEQ(x null.Uint32) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Uint32) LT(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Uint32) LTE(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Uint32) GT(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Uint32) GTE(x null.Uint32) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Uint32) IN(slice []uint32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Uint32) NIN(slice []uint32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Uint32) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Uint32) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var PGStatStatementWhere = struct {
	Userid               whereHelpernull_Uint32
	Dbid                 whereHelpernull_Uint32
	Toplevel             whereHelpernull_Bool
	Queryid              whereHelpernull_Int64
	Query                whereHelpernull_String
	Plans                whereHelpernull_Int64
	TotalPlanTime        whereHelpernull_Float64
	MinPlanTime          whereHelpernull_Float64
	MaxPlanTime          whereHelpernull_Float64
	MeanPlanTime         whereHelpernull_Float64
	StddevPlanTime       whereHelpernull_Float64
	Calls                whereHelpernull_Int64
	TotalExecTime        whereHelpernull_Float64
	MinExecTime          whereHelpernull_Float64
	MaxExecTime          whereHelpernull_Float64
	MeanExecTime         whereHelpernull_Float64
	StddevExecTime       whereHelpernull_Float64
	Rows                 whereHelpernull_Int64
	SharedBLKSHit        whereHelpernull_Int64
	SharedBLKSRead       whereHelpernull_Int64
	SharedBLKSDirtied    whereHelpernull_Int64
	SharedBLKSWritten    whereHelpernull_Int64
	LocalBLKSHit         whereHelpernull_Int64
	LocalBLKSRead        whereHelpernull_Int64
	LocalBLKSDirtied     whereHelpernull_Int64
	LocalBLKSWritten     whereHelpernull_Int64
	TempBLKSRead         whereHelpernull_Int64
	TempBLKSWritten      whereHelpernull_Int64
	BLKReadTime          whereHelpernull_Float64
	BLKWriteTime         whereHelpernull_Float64
	TempBLKReadTime      whereHelpernull_Float64
	TempBLKWriteTime     whereHelpernull_Float64
	WalRecords           whereHelpernull_Int64
	WalFpi               whereHelpernull_Int64
	WalBytes             whereHelpertypes_NullDecimal
	JitFunctions         whereHelpernull_Int64
	JitGenerationTime    whereHelpernull_Float64
	JitInliningCount     whereHelpernull_Int64
	JitInliningTime      whereHelpernull_Float64
	JitOptimizationCount whereHelpernull_Int64
	JitOptimizationTime  whereHelpernull_Float64
	JitEmissionCount     whereHelpernull_Int64
	JitEmissionTime      whereHelpernull_Float64
}{
	Userid:               whereHelpernull_Uint32{field: "\"pg_stat_statements\".\"userid\""},
	Dbid:                 whereHelpernull_Uint32{field: "\"pg_stat_statements\".\"dbid\""},
	Toplevel:             whereHelpernull_Bool{field: "\"pg_stat_statements\".\"toplevel\""},
	Queryid:              whereHelpernull_Int64{field: "\"pg_stat_statements\".\"queryid\""},
	Query:                whereHelpernull_String{field: "\"pg_stat_statements\".\"query\""},
	Plans:                whereHelpernull_Int64{field: "\"pg_stat_statements\".\"plans\""},
	TotalPlanTime:        whereHelpernull_Float64{field: "\"pg_stat_statements\".\"total_plan_time\""},
	MinPlanTime:          whereHelpernull_Float64{field: "\"pg_stat_statements\".\"min_plan_time\""},
	MaxPlanTime:          whereHelpernull_Float64{field: "\"pg_stat_statements\".\"max_plan_time\""},
	MeanPlanTime:         whereHelpernull_Float64{field: "\"pg_stat_statements\".\"mean_plan_time\""},
	StddevPlanTime:       whereHelpernull_Float64{field: "\"pg_stat_statements\".\"stddev_plan_time\""},
	Calls:                whereHelpernull_Int64{field: "\"pg_stat_statements\".\"calls\""},
	TotalExecTime:        whereHelpernull_Float64{field: "\"pg_stat_statements\".\"total_exec_time\""},
	MinExecTime:          whereHelpernull_Float64{field: "\"pg_stat_statements\".\"min_exec_time\""},
	MaxExecTime:          whereHelpernull_Float64{field: "\"pg_stat_statements\".\"max_exec_time\""},
	MeanExecTime:         whereHelpernull_Float64{field: "\"pg_stat_statements\".\"mean_exec_time\""},
	StddevExecTime:       whereHelpernull_Float64{field: "\"pg_stat_statements\".\"stddev_exec_time\""},
	Rows:                 whereHelpernull_Int64{field: "\"pg_stat_statements\".\"rows\""},
	SharedBLKSHit:        whereHelpernull_Int64{field: "\"pg_stat_statements\".\"shared_blks_hit\""},
	SharedBLKSRead:       whereHelpernull_Int64{field: "\"pg_stat_statements\".\"shared_blks_read\""},
	SharedBLKSDirtied:    whereHelpernull_Int64{field: "\"pg_stat_statements\".\"shared_blks_dirtied\""},
	SharedBLKSWritten:    whereHelpernull_Int64{field: "\"pg_stat_statements\".\"shared_blks_written\""},
	LocalBLKSHit:         whereHelpernull_Int64{field: "\"pg_stat_statements\".\"local_blks_hit\""},
	LocalBLKSRead:        whereHelpernull_Int64{field: "\"pg_stat_statements\".\"local_blks_read\""},
	LocalBLKSDirtied:     whereHelpernull_Int64{field: "\"pg_stat_statements\".\"local_blks_dirtied\""},
	LocalBLKSWritten:     whereHelpernull_Int64{field: "\"pg_stat_statements\".\"local_blks_written\""},
	TempBLKSRead:         whereHelpernull_Int64{field: "\"pg_stat_statements\".\"temp_blks_read\""},
	TempBLKSWritten:      whereHelpernull_Int64{field: "\"pg_stat_statements\".\"temp_blks_written\""},
	BLKReadTime:          whereHelpernull_Float64{field: "\"pg_stat_statements\".\"blk_read_time\""},
	BLKWriteTime:         whereHelpernull_Float64{field: "\"pg_stat_statements\".\"blk_write_time\""},
	TempBLKReadTime:      whereHelpernull_Float64{field: "\"pg_stat_statements\".\"temp_blk_read_time\""},
	TempBLKWriteTime:     whereHelpernull_Float64{field: "\"pg_stat_statements\".\"temp_blk_write_time\""},
	WalRecords:           whereHelpernull_Int64{field: "\"pg_stat_statements\".\"wal_records\""},
	WalFpi:               whereHelpernull_Int64{field: "\"pg_stat_statements\".\"wal_fpi\""},
	WalBytes:             whereHelpertypes_NullDecimal{field: "\"pg_stat_statements\".\"wal_bytes\""},
	JitFunctions:         whereHelpernull_Int64{field: "\"pg_stat_statements\".\"jit_functions\""},
	JitGenerationTime:    whereHelpernull_Float64{field: "\"pg_stat_statements\".\"jit_generation_time\""},
	JitInliningCount:     whereHelpernull_Int64{field: "\"pg_stat_statements\".\"jit_inlining_count\""},
	JitInliningTime:      whereHelpernull_Float64{field: "\"pg_stat_statements\".\"jit_inlining_time\""},
	JitOptimizationCount: whereHelpernull_Int64{field: "\"pg_stat_statements\".\"jit_optimization_count\""},
	JitOptimizationTime:  whereHelpernull_Float64{field: "\"pg_stat_statements\".\"jit_optimization_time\""},
	JitEmissionCount:     whereHelpernull_Int64{field: "\"pg_stat_statements\".\"jit_emission_count\""},
	JitEmissionTime:      whereHelpernull_Float64{field: "\"pg_stat_statements\".\"jit_emission_time\""},
}

var (
	pgStatStatementAllColumns            = []string{"userid", "dbid", "toplevel", "queryid", "query", "plans", "total_plan_time", "min_plan_time", "max_plan_time", "mean_plan_time", "stddev_plan_time", "calls", "total_exec_time", "min_exec_time", "max_exec_time", "mean_exec_time", "stddev_exec_time", "rows", "shared_blks_hit", "shared_blks_read", "shared_blks_dirtied", "shared_blks_written", "local_blks_hit", "local_blks_read", "local_blks_dirtied", "local_blks_written", "temp_blks_read", "temp_blks_written", "blk_read_time", "blk_write_time", "temp_blk_read_time", "temp_blk_write_time", "wal_records", "wal_fpi", "wal_bytes", "jit_functions", "jit_generation_time", "jit_inlining_count", "jit_inlining_time", "jit_optimization_count", "jit_optimization_time", "jit_emission_count", "jit_emission_time"}
	pgStatStatementColumnsWithoutDefault = []string{}
	pgStatStatementColumnsWithDefault    = []string{"userid", "dbid", "toplevel", "queryid", "query", "plans", "total_plan_time", "min_plan_time", "max_plan_time", "mean_plan_time", "stddev_plan_time", "calls", "total_exec_time", "min_exec_time", "max_exec_time", "mean_exec_time", "stddev_exec_time", "rows", "shared_blks_hit", "shared_blks_read", "shared_blks_dirtied", "shared_blks_written", "local_blks_hit", "local_blks_read", "local_blks_dirtied", "local_blks_written", "temp_blks_read", "temp_blks_written", "blk_read_time", "blk_write_time", "temp_blk_read_time", "temp_blk_write_time", "wal_records", "wal_fpi", "wal_bytes", "jit_functions", "jit_generation_time", "jit_inlining_count", "jit_inlining_time", "jit_optimization_count", "jit_optimization_time", "jit_emission_count", "jit_emission_time"}
	pgStatStatementPrimaryKeyColumns     = []string{}
	pgStatStatementGeneratedColumns      = []string{}
)

type (
	// PGStatStatementSlice is an alias for a slice of pointers to PGStatStatement.
	// This should almost always be used instead of []PGStatStatement.
	PGStatStatementSlice []*PGStatStatement
	// PGStatStatementHook is the signature for custom PGStatStatement hook methods
	PGStatStatementHook func(context.Context, boil.ContextExecutor, *PGStatStatement) error

	pgStatStatementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pgStatStatementType           = reflect.TypeOf(&PGStatStatement{})
	pgStatStatementMapping        = queries.MakeStructMapping(pgStatStatementType)
	pgStatStatementInsertCacheMut sync.RWMutex
	pgStatStatementInsertCache    = make(map[string]insertCache)
	pgStatStatementUpdateCacheMut sync.RWMutex
	pgStatStatementUpdateCache    = make(map[string]updateCache)
	pgStatStatementUpsertCacheMut sync.RWMutex
	pgStatStatementUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var pgStatStatementAfterSelectHooks []PGStatStatementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PGStatStatement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pgStatStatementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPGStatStatementHook registers your hook function for all future operations.
func AddPGStatStatementHook(hookPoint boil.HookPoint, pgStatStatementHook PGStatStatementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pgStatStatementAfterSelectHooks = append(pgStatStatementAfterSelectHooks, pgStatStatementHook)
	}
}

// OneG returns a single pgStatStatement record from the query using the global executor.
func (q pgStatStatementQuery) OneG(ctx context.Context) (*PGStatStatement, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single pgStatStatement record from the query.
func (q pgStatStatementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PGStatStatement, error) {
	o := &PGStatStatement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for pg_stat_statements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PGStatStatement records from the query using the global executor.
func (q pgStatStatementQuery) AllG(ctx context.Context) (PGStatStatementSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PGStatStatement records from the query.
func (q pgStatStatementQuery) All(ctx context.Context, exec boil.ContextExecutor) (PGStatStatementSlice, error) {
	var o []*PGStatStatement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to PGStatStatement slice")
	}

	if len(pgStatStatementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PGStatStatement records in the query using the global executor
func (q pgStatStatementQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PGStatStatement records in the query.
func (q pgStatStatementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count pg_stat_statements rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q pgStatStatementQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q pgStatStatementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if pg_stat_statements exists")
	}

	return count > 0, nil
}

// PGStatStatements retrieves all the records using an executor.
func PGStatStatements(mods ...qm.QueryMod) pgStatStatementQuery {
	mods = append(mods, qm.From("\"pg_stat_statements\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pg_stat_statements\".*"})
	}

	return pgStatStatementQuery{q}
}
