// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CloudflareCountryStat is an object representing the database table.
type CloudflareCountryStat struct {
	Date        time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	CountryCode string    `boil:"country_code" json:"country_code" toml:"country_code" yaml:"country_code"`
	Requests    int64     `boil:"requests" json:"requests" toml:"requests" yaml:"requests"`
	Threats     int64     `boil:"threats" json:"threats" toml:"threats" yaml:"threats"`

	R *cloudflareCountryStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cloudflareCountryStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CloudflareCountryStatColumns = struct {
	Date        string
	CountryCode string
	Requests    string
	Threats     string
}{
	Date:        "date",
	CountryCode: "country_code",
	Requests:    "requests",
	Threats:     "threats",
}

var CloudflareCountryStatTableColumns = struct {
	Date        string
	CountryCode string
	Requests    string
	Threats     string
}{
	Date:        "cloudflare_country_stats.date",
	CountryCode: "cloudflare_country_stats.country_code",
	Requests:    "cloudflare_country_stats.requests",
	Threats:     "cloudflare_country_stats.threats",
}

// Generated where

var CloudflareCountryStatWhere = struct {
	Date        whereHelpertime_Time
	CountryCode whereHelperstring
	Requests    whereHelperint64
	Threats     whereHelperint64
}{
	Date:        whereHelpertime_Time{field: "\"cloudflare_country_stats\".\"date\""},
	CountryCode: whereHelperstring{field: "\"cloudflare_country_stats\".\"country_code\""},
	Requests:    whereHelperint64{field: "\"cloudflare_country_stats\".\"requests\""},
	Threats:     whereHelperint64{field: "\"cloudflare_country_stats\".\"threats\""},
}

// CloudflareCountryStatRels is where relationship names are stored.
var CloudflareCountryStatRels = struct {
}{}

// cloudflareCountryStatR is where relationships are stored.
type cloudflareCountryStatR struct {
}

// NewStruct creates a new relationship struct
func (*cloudflareCountryStatR) NewStruct() *cloudflareCountryStatR {
	return &cloudflareCountryStatR{}
}

// cloudflareCountryStatL is where Load methods for each relationship are stored.
type cloudflareCountryStatL struct{}

var (
	cloudflareCountryStatAllColumns            = []string{"date", "country_code", "requests", "threats"}
	cloudflareCountryStatColumnsWithoutDefault = []string{"date", "country_code", "requests", "threats"}
	cloudflareCountryStatColumnsWithDefault    = []string{}
	cloudflareCountryStatPrimaryKeyColumns     = []string{"date", "country_code"}
	cloudflareCountryStatGeneratedColumns      = []string{}
)

type (
	// CloudflareCountryStatSlice is an alias for a slice of pointers to CloudflareCountryStat.
	// This should almost always be used instead of []CloudflareCountryStat.
	CloudflareCountryStatSlice []*CloudflareCountryStat
	// CloudflareCountryStatHook is the signature for custom CloudflareCountryStat hook methods
	CloudflareCountryStatHook func(context.Context, boil.ContextExecutor, *CloudflareCountryStat) error

	cloudflareCountryStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cloudflareCountryStatType                 = reflect.TypeOf(&CloudflareCountryStat{})
	cloudflareCountryStatMapping              = queries.MakeStructMapping(cloudflareCountryStatType)
	cloudflareCountryStatPrimaryKeyMapping, _ = queries.BindMapping(cloudflareCountryStatType, cloudflareCountryStatMapping, cloudflareCountryStatPrimaryKeyColumns)
	cloudflareCountryStatInsertCacheMut       sync.RWMutex
	cloudflareCountryStatInsertCache          = make(map[string]insertCache)
	cloudflareCountryStatUpdateCacheMut       sync.RWMutex
	cloudflareCountryStatUpdateCache          = make(map[string]updateCache)
	cloudflareCountryStatUpsertCacheMut       sync.RWMutex
	cloudflareCountryStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cloudflareCountryStatAfterSelectHooks []CloudflareCountryStatHook

var cloudflareCountryStatBeforeInsertHooks []CloudflareCountryStatHook
var cloudflareCountryStatAfterInsertHooks []CloudflareCountryStatHook

var cloudflareCountryStatBeforeUpdateHooks []CloudflareCountryStatHook
var cloudflareCountryStatAfterUpdateHooks []CloudflareCountryStatHook

var cloudflareCountryStatBeforeDeleteHooks []CloudflareCountryStatHook
var cloudflareCountryStatAfterDeleteHooks []CloudflareCountryStatHook

var cloudflareCountryStatBeforeUpsertHooks []CloudflareCountryStatHook
var cloudflareCountryStatAfterUpsertHooks []CloudflareCountryStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CloudflareCountryStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareCountryStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CloudflareCountryStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareCountryStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CloudflareCountryStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareCountryStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CloudflareCountryStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareCountryStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CloudflareCountryStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareCountryStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CloudflareCountryStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareCountryStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CloudflareCountryStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareCountryStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CloudflareCountryStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareCountryStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CloudflareCountryStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareCountryStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCloudflareCountryStatHook registers your hook function for all future operations.
func AddCloudflareCountryStatHook(hookPoint boil.HookPoint, cloudflareCountryStatHook CloudflareCountryStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cloudflareCountryStatAfterSelectHooks = append(cloudflareCountryStatAfterSelectHooks, cloudflareCountryStatHook)
	case boil.BeforeInsertHook:
		cloudflareCountryStatBeforeInsertHooks = append(cloudflareCountryStatBeforeInsertHooks, cloudflareCountryStatHook)
	case boil.AfterInsertHook:
		cloudflareCountryStatAfterInsertHooks = append(cloudflareCountryStatAfterInsertHooks, cloudflareCountryStatHook)
	case boil.BeforeUpdateHook:
		cloudflareCountryStatBeforeUpdateHooks = append(cloudflareCountryStatBeforeUpdateHooks, cloudflareCountryStatHook)
	case boil.AfterUpdateHook:
		cloudflareCountryStatAfterUpdateHooks = append(cloudflareCountryStatAfterUpdateHooks, cloudflareCountryStatHook)
	case boil.BeforeDeleteHook:
		cloudflareCountryStatBeforeDeleteHooks = append(cloudflareCountryStatBeforeDeleteHooks, cloudflareCountryStatHook)
	case boil.AfterDeleteHook:
		cloudflareCountryStatAfterDeleteHooks = append(cloudflareCountryStatAfterDeleteHooks, cloudflareCountryStatHook)
	case boil.BeforeUpsertHook:
		cloudflareCountryStatBeforeUpsertHooks = append(cloudflareCountryStatBeforeUpsertHooks, cloudflareCountryStatHook)
	case boil.AfterUpsertHook:
		cloudflareCountryStatAfterUpsertHooks = append(cloudflareCountryStatAfterUpsertHooks, cloudflareCountryStatHook)
	}
}

// OneG returns a single cloudflareCountryStat record from the query using the global executor.
func (q cloudflareCountryStatQuery) OneG(ctx context.Context) (*CloudflareCountryStat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single cloudflareCountryStat record from the query.
func (q cloudflareCountryStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CloudflareCountryStat, error) {
	o := &CloudflareCountryStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for cloudflare_country_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CloudflareCountryStat records from the query using the global executor.
func (q cloudflareCountryStatQuery) AllG(ctx context.Context) (CloudflareCountryStatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CloudflareCountryStat records from the query.
func (q cloudflareCountryStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (CloudflareCountryStatSlice, error) {
	var o []*CloudflareCountryStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to CloudflareCountryStat slice")
	}

	if len(cloudflareCountryStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CloudflareCountryStat records in the query using the global executor
func (q cloudflareCountryStatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CloudflareCountryStat records in the query.
func (q cloudflareCountryStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count cloudflare_country_stats rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q cloudflareCountryStatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q cloudflareCountryStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if cloudflare_country_stats exists")
	}

	return count > 0, nil
}

// CloudflareCountryStats retrieves all the records using an executor.
func CloudflareCountryStats(mods ...qm.QueryMod) cloudflareCountryStatQuery {
	mods = append(mods, qm.From("\"cloudflare_country_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cloudflare_country_stats\".*"})
	}

	return cloudflareCountryStatQuery{q}
}

// FindCloudflareCountryStatG retrieves a single record by ID.
func FindCloudflareCountryStatG(ctx context.Context, date time.Time, countryCode string, selectCols ...string) (*CloudflareCountryStat, error) {
	return FindCloudflareCountryStat(ctx, boil.GetContextDB(), date, countryCode, selectCols...)
}

// FindCloudflareCountryStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCloudflareCountryStat(ctx context.Context, exec boil.ContextExecutor, date time.Time, countryCode string, selectCols ...string) (*CloudflareCountryStat, error) {
	cloudflareCountryStatObj := &CloudflareCountryStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cloudflare_country_stats\" where \"date\"=$1 AND \"country_code\"=$2", sel,
	)

	q := queries.Raw(query, date, countryCode)

	err := q.Bind(ctx, exec, cloudflareCountryStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from cloudflare_country_stats")
	}

	if err = cloudflareCountryStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cloudflareCountryStatObj, err
	}

	return cloudflareCountryStatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CloudflareCountryStat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CloudflareCountryStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no cloudflare_country_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cloudflareCountryStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cloudflareCountryStatInsertCacheMut.RLock()
	cache, cached := cloudflareCountryStatInsertCache[key]
	cloudflareCountryStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cloudflareCountryStatAllColumns,
			cloudflareCountryStatColumnsWithDefault,
			cloudflareCountryStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cloudflareCountryStatType, cloudflareCountryStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cloudflareCountryStatType, cloudflareCountryStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cloudflare_country_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cloudflare_country_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into cloudflare_country_stats")
	}

	if !cached {
		cloudflareCountryStatInsertCacheMut.Lock()
		cloudflareCountryStatInsertCache[key] = cache
		cloudflareCountryStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CloudflareCountryStat record using the global executor.
// See Update for more documentation.
func (o *CloudflareCountryStat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CloudflareCountryStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CloudflareCountryStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cloudflareCountryStatUpdateCacheMut.RLock()
	cache, cached := cloudflareCountryStatUpdateCache[key]
	cloudflareCountryStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cloudflareCountryStatAllColumns,
			cloudflareCountryStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update cloudflare_country_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cloudflare_country_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cloudflareCountryStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cloudflareCountryStatType, cloudflareCountryStatMapping, append(wl, cloudflareCountryStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update cloudflare_country_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for cloudflare_country_stats")
	}

	if !cached {
		cloudflareCountryStatUpdateCacheMut.Lock()
		cloudflareCountryStatUpdateCache[key] = cache
		cloudflareCountryStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q cloudflareCountryStatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q cloudflareCountryStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for cloudflare_country_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for cloudflare_country_stats")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CloudflareCountryStatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CloudflareCountryStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareCountryStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cloudflare_country_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cloudflareCountryStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in cloudflareCountryStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all cloudflareCountryStat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CloudflareCountryStat) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CloudflareCountryStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no cloudflare_country_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cloudflareCountryStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cloudflareCountryStatUpsertCacheMut.RLock()
	cache, cached := cloudflareCountryStatUpsertCache[key]
	cloudflareCountryStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cloudflareCountryStatAllColumns,
			cloudflareCountryStatColumnsWithDefault,
			cloudflareCountryStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cloudflareCountryStatAllColumns,
			cloudflareCountryStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert cloudflare_country_stats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cloudflareCountryStatPrimaryKeyColumns))
			copy(conflict, cloudflareCountryStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cloudflare_country_stats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cloudflareCountryStatType, cloudflareCountryStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cloudflareCountryStatType, cloudflareCountryStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert cloudflare_country_stats")
	}

	if !cached {
		cloudflareCountryStatUpsertCacheMut.Lock()
		cloudflareCountryStatUpsertCache[key] = cache
		cloudflareCountryStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CloudflareCountryStat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CloudflareCountryStat) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CloudflareCountryStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CloudflareCountryStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no CloudflareCountryStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cloudflareCountryStatPrimaryKeyMapping)
	sql := "DELETE FROM \"cloudflare_country_stats\" WHERE \"date\"=$1 AND \"country_code\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from cloudflare_country_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for cloudflare_country_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q cloudflareCountryStatQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q cloudflareCountryStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no cloudflareCountryStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from cloudflare_country_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for cloudflare_country_stats")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CloudflareCountryStatSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CloudflareCountryStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cloudflareCountryStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareCountryStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cloudflare_country_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cloudflareCountryStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from cloudflareCountryStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for cloudflare_country_stats")
	}

	if len(cloudflareCountryStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CloudflareCountryStat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no CloudflareCountryStat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CloudflareCountryStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCloudflareCountryStat(ctx, exec, o.Date, o.CountryCode)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CloudflareCountryStatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty CloudflareCountryStatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CloudflareCountryStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CloudflareCountryStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareCountryStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cloudflare_country_stats\".* FROM \"cloudflare_country_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cloudflareCountryStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in CloudflareCountryStatSlice")
	}

	*o = slice

	return nil
}

// CloudflareCountryStatExistsG checks if the CloudflareCountryStat row exists.
func CloudflareCountryStatExistsG(ctx context.Context, date time.Time, countryCode string) (bool, error) {
	return CloudflareCountryStatExists(ctx, boil.GetContextDB(), date, countryCode)
}

// CloudflareCountryStatExists checks if the CloudflareCountryStat row exists.
func CloudflareCountryStatExists(ctx context.Context, exec boil.ContextExecutor, date time.Time, countryCode string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cloudflare_country_stats\" where \"date\"=$1 AND \"country_code\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, date, countryCode)
	}
	row := exec.QueryRowContext(ctx, sql, date, countryCode)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if cloudflare_country_stats exists")
	}

	return exists, nil
}

// Exists checks if the CloudflareCountryStat row exists.
func (o *CloudflareCountryStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CloudflareCountryStatExists(ctx, exec, o.Date, o.CountryCode)
}
