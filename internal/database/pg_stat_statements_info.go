// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PGStatStatementsInfo is an object representing the database table.
type PGStatStatementsInfo struct {
	Dealloc    null.Int64 `boil:"dealloc" json:"dealloc,omitempty" toml:"dealloc" yaml:"dealloc,omitempty"`
	StatsReset null.Time  `boil:"stats_reset" json:"stats_reset,omitempty" toml:"stats_reset" yaml:"stats_reset,omitempty"`
}

var PGStatStatementsInfoColumns = struct {
	Dealloc    string
	StatsReset string
}{
	Dealloc:    "dealloc",
	StatsReset: "stats_reset",
}

var PGStatStatementsInfoTableColumns = struct {
	Dealloc    string
	StatsReset string
}{
	Dealloc:    "pg_stat_statements_info.dealloc",
	StatsReset: "pg_stat_statements_info.stats_reset",
}

// Generated where

var PGStatStatementsInfoWhere = struct {
	Dealloc    whereHelpernull_Int64
	StatsReset whereHelpernull_Time
}{
	Dealloc:    whereHelpernull_Int64{field: "\"pg_stat_statements_info\".\"dealloc\""},
	StatsReset: whereHelpernull_Time{field: "\"pg_stat_statements_info\".\"stats_reset\""},
}

var (
	pgStatStatementsInfoAllColumns            = []string{"dealloc", "stats_reset"}
	pgStatStatementsInfoColumnsWithoutDefault = []string{}
	pgStatStatementsInfoColumnsWithDefault    = []string{"dealloc", "stats_reset"}
	pgStatStatementsInfoPrimaryKeyColumns     = []string{}
	pgStatStatementsInfoGeneratedColumns      = []string{}
)

type (
	// PGStatStatementsInfoSlice is an alias for a slice of pointers to PGStatStatementsInfo.
	// This should almost always be used instead of []PGStatStatementsInfo.
	PGStatStatementsInfoSlice []*PGStatStatementsInfo
	// PGStatStatementsInfoHook is the signature for custom PGStatStatementsInfo hook methods
	PGStatStatementsInfoHook func(context.Context, boil.ContextExecutor, *PGStatStatementsInfo) error

	pgStatStatementsInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	pgStatStatementsInfoType           = reflect.TypeOf(&PGStatStatementsInfo{})
	pgStatStatementsInfoMapping        = queries.MakeStructMapping(pgStatStatementsInfoType)
	pgStatStatementsInfoInsertCacheMut sync.RWMutex
	pgStatStatementsInfoInsertCache    = make(map[string]insertCache)
	pgStatStatementsInfoUpdateCacheMut sync.RWMutex
	pgStatStatementsInfoUpdateCache    = make(map[string]updateCache)
	pgStatStatementsInfoUpsertCacheMut sync.RWMutex
	pgStatStatementsInfoUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var pgStatStatementsInfoAfterSelectHooks []PGStatStatementsInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PGStatStatementsInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range pgStatStatementsInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPGStatStatementsInfoHook registers your hook function for all future operations.
func AddPGStatStatementsInfoHook(hookPoint boil.HookPoint, pgStatStatementsInfoHook PGStatStatementsInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		pgStatStatementsInfoAfterSelectHooks = append(pgStatStatementsInfoAfterSelectHooks, pgStatStatementsInfoHook)
	}
}

// OneG returns a single pgStatStatementsInfo record from the query using the global executor.
func (q pgStatStatementsInfoQuery) OneG(ctx context.Context) (*PGStatStatementsInfo, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single pgStatStatementsInfo record from the query.
func (q pgStatStatementsInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PGStatStatementsInfo, error) {
	o := &PGStatStatementsInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for pg_stat_statements_info")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PGStatStatementsInfo records from the query using the global executor.
func (q pgStatStatementsInfoQuery) AllG(ctx context.Context) (PGStatStatementsInfoSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PGStatStatementsInfo records from the query.
func (q pgStatStatementsInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (PGStatStatementsInfoSlice, error) {
	var o []*PGStatStatementsInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to PGStatStatementsInfo slice")
	}

	if len(pgStatStatementsInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PGStatStatementsInfo records in the query using the global executor
func (q pgStatStatementsInfoQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PGStatStatementsInfo records in the query.
func (q pgStatStatementsInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count pg_stat_statements_info rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q pgStatStatementsInfoQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q pgStatStatementsInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if pg_stat_statements_info exists")
	}

	return count > 0, nil
}

// PGStatStatementsInfos retrieves all the records using an executor.
func PGStatStatementsInfos(mods ...qm.QueryMod) pgStatStatementsInfoQuery {
	mods = append(mods, qm.From("\"pg_stat_statements_info\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"pg_stat_statements_info\".*"})
	}

	return pgStatStatementsInfoQuery{q}
}
