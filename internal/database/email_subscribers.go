// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EmailSubscriber is an object representing the database table.
type EmailSubscriber struct {
	Email       string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Token       string    `boil:"token" json:"token" toml:"token" yaml:"token"`
	ConfirmedAt null.Time `boil:"confirmed_at" json:"confirmed_at,omitempty" toml:"confirmed_at" yaml:"confirmed_at,omitempty"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *emailSubscriberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L emailSubscriberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmailSubscriberColumns = struct {
	Email       string
	Token       string
	ConfirmedAt string
	CreatedAt   string
}{
	Email:       "email",
	Token:       "token",
	ConfirmedAt: "confirmed_at",
	CreatedAt:   "created_at",
}

var EmailSubscriberTableColumns = struct {
	Email       string
	Token       string
	ConfirmedAt string
	CreatedAt   string
}{
	Email:       "email_subscribers.email",
	Token:       "email_subscribers.token",
	ConfirmedAt: "email_subscribers.confirmed_at",
	CreatedAt:   "email_subscribers.created_at",
}

// Generated where

var EmailSubscriberWhere = struct {
	Email       whereHelperstring
	Token       whereHelperstring
	ConfirmedAt whereHelpernull_Time
	CreatedAt   whereHelpertime_Time
}{
	Email:       whereHelperstring{field: "\"email_subscribers\".\"email\""},
	Token:       whereHelperstring{field: "\"email_subscribers\".\"token\""},
	ConfirmedAt: whereHelpernull_Time{field: "\"email_subscribers\".\"confirmed_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"email_subscribers\".\"created_at\""},
}

// EmailSubscriberRels is where relationship names are stored.
var EmailSubscriberRels = struct {
}{}

// emailSubscriberR is where relationships are stored.
type emailSubscriberR struct {
}

// NewStruct creates a new relationship struct
func (*emailSubscriberR) NewStruct() *emailSubscriberR {
	return &emailSubscriberR{}
}

// emailSubscriberL is where Load methods for each relationship are stored.
type emailSubscriberL struct{}

var (
	emailSubscriberAllColumns            = []string{"email", "token", "confirmed_at", "created_at"}
	emailSubscriberColumnsWithoutDefault = []string{"email", "token", "created_at"}
	emailSubscriberColumnsWithDefault    = []string{"confirmed_at"}
	emailSubscriberPrimaryKeyColumns     = []string{"email"}
	emailSubscriberGeneratedColumns      = []string{}
)

type (
	// EmailSubscriberSlice is an alias for a slice of pointers to EmailSubscriber.
	// This should almost always be used instead of []EmailSubscriber.
	EmailSubscriberSlice []*EmailSubscriber
	// EmailSubscriberHook is the signature for custom EmailSubscriber hook methods
	EmailSubscriberHook func(context.Context, boil.ContextExecutor, *EmailSubscriber) error

	emailSubscriberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	emailSubscriberType                 = reflect.TypeOf(&EmailSubscriber{})
	emailSubscriberMapping              = queries.MakeStructMapping(emailSubscriberType)
	emailSubscriberPrimaryKeyMapping, _ = queries.BindMapping(emailSubscriberType, emailSubscriberMapping, emailSubscriberPrimaryKeyColumns)
	emailSubscriberInsertCacheMut       sync.RWMutex
	emailSubscriberInsertCache          = make(map[string]insertCache)
	emailSubscriberUpdateCacheMut       sync.RWMutex
	emailSubscriberUpdateCache          = make(map[string]updateCache)
	emailSubscriberUpsertCacheMut       sync.RWMutex
	emailSubscriberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var emailSubscriberAfterSelectHooks []EmailSubscriberHook

var emailSubscriberBeforeInsertHooks []EmailSubscriberHook
var emailSubscriberAfterInsertHooks []EmailSubscriberHook

var emailSubscriberBeforeUpdateHooks []EmailSubscriberHook
var emailSubscriberAfterUpdateHooks []EmailSubscriberHook

var emailSubscriberBeforeDeleteHooks []EmailSubscriberHook
var emailSubscriberAfterDeleteHooks []EmailSubscriberHook

var emailSubscriberBeforeUpsertHooks []EmailSubscriberHook
var emailSubscriberAfterUpsertHooks []EmailSubscriberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EmailSubscriber) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailSubscriberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EmailSubscriber) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailSubscriberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EmailSubscriber) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailSubscriberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EmailSubscriber) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailSubscriberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EmailSubscriber) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailSubscriberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EmailSubscriber) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailSubscriberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EmailSubscriber) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailSubscriberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EmailSubscriber) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailSubscriberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EmailSubscriber) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailSubscriberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmailSubscriberHook registers your hook function for all future operations.
func AddEmailSubscriberHook(hookPoint boil.HookPoint, emailSubscriberHook EmailSubscriberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		emailSubscriberAfterSelectHooks = append(emailSubscriberAfterSelectHooks, emailSubscriberHook)
	case boil.BeforeInsertHook:
		emailSubscriberBeforeInsertHooks = append(emailSubscriberBeforeInsertHooks, emailSubscriberHook)
	case boil.AfterInsertHook:
		emailSubscriberAfterInsertHooks = append(emailSubscriberAfterInsertHooks, emailSubscriberHook)
	case boil.BeforeUpdateHook:
		emailSubscriberBeforeUpdateHooks = append(emailSubscriberBeforeUpdateHooks, emailSubscriberHook)
	case boil.AfterUpdateHook:
		emailSubscriberAfterUpdateHooks = append(emailSubscriberAfterUpdateHooks, emailSubscriberHook)
	case boil.BeforeDeleteHook:
		emailSubscriberBeforeDeleteHooks = append(emailSubscriberBeforeDeleteHooks, emailSubscriberHook)
	case boil.AfterDeleteHook:
		emailSubscriberAfterDeleteHooks = append(emailSubscriberAfterDeleteHooks, emailSubscriberHook)
	case boil.BeforeUpsertHook:
		emailSubscriberBeforeUpsertHooks = append(emailSubscriberBeforeUpsertHooks, emailSubscriberHook)
	case boil.AfterUpsertHook:
		emailSubscriberAfterUpsertHooks = append(emailSubscriberAfterUpsertHooks, emailSubscriberHook)
	}
}

// OneG returns a single emailSubscriber record from the query using the global executor.
func (q emailSubscriberQuery) OneG(ctx context.Context) (*EmailSubscriber, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single emailSubscriber record from the query.
func (q emailSubscriberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EmailSubscriber, error) {
	o := &EmailSubscriber{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for email_subscribers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all EmailSubscriber records from the query using the global executor.
func (q emailSubscriberQuery) AllG(ctx context.Context) (EmailSubscriberSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all EmailSubscriber records from the query.
func (q emailSubscriberQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmailSubscriberSlice, error) {
	var o []*EmailSubscriber

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to EmailSubscriber slice")
	}

	if len(emailSubscriberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all EmailSubscriber records in the query using the global executor
func (q emailSubscriberQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all EmailSubscriber records in the query.
func (q emailSubscriberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count email_subscribers rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q emailSubscriberQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q emailSubscriberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if email_subscribers exists")
	}

	return count > 0, nil
}

// EmailSubscribers retrieves all the records using an executor.
func EmailSubscribers(mods ...qm.QueryMod) emailSubscriberQuery {
	mods = append(mods, qm.From("\"email_subscribers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"email_subscribers\".*"})
	}

	return emailSubscriberQuery{q}
}

// FindEmailSubscriberG retrieves a single record by ID.
func FindEmailSubscriberG(ctx context.Context, email string, selectCols ...string) (*EmailSubscriber, error) {
	return FindEmailSubscriber(ctx, boil.GetContextDB(), email, selectCols...)
}

// FindEmailSubscriber retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmailSubscriber(ctx context.Context, exec boil.ContextExecutor, email string, selectCols ...string) (*EmailSubscriber, error) {
	emailSubscriberObj := &EmailSubscriber{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"email_subscribers\" where \"email\"=$1", sel,
	)

	q := queries.Raw(query, email)

	err := q.Bind(ctx, exec, emailSubscriberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from email_subscribers")
	}

	if err = emailSubscriberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return emailSubscriberObj, err
	}

	return emailSubscriberObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *EmailSubscriber) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EmailSubscriber) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no email_subscribers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(emailSubscriberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	emailSubscriberInsertCacheMut.RLock()
	cache, cached := emailSubscriberInsertCache[key]
	emailSubscriberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			emailSubscriberAllColumns,
			emailSubscriberColumnsWithDefault,
			emailSubscriberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(emailSubscriberType, emailSubscriberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(emailSubscriberType, emailSubscriberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"email_subscribers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"email_subscribers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into email_subscribers")
	}

	if !cached {
		emailSubscriberInsertCacheMut.Lock()
		emailSubscriberInsertCache[key] = cache
		emailSubscriberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single EmailSubscriber record using the global executor.
// See Update for more documentation.
func (o *EmailSubscriber) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the EmailSubscriber.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EmailSubscriber) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	emailSubscriberUpdateCacheMut.RLock()
	cache, cached := emailSubscriberUpdateCache[key]
	emailSubscriberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			emailSubscriberAllColumns,
			emailSubscriberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update email_subscribers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"email_subscribers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, emailSubscriberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(emailSubscriberType, emailSubscriberMapping, append(wl, emailSubscriberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update email_subscribers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for email_subscribers")
	}

	if !cached {
		emailSubscriberUpdateCacheMut.Lock()
		emailSubscriberUpdateCache[key] = cache
		emailSubscriberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q emailSubscriberQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q emailSubscriberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for email_subscribers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for email_subscribers")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EmailSubscriberSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmailSubscriberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailSubscriberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"email_subscribers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, emailSubscriberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in emailSubscriber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all emailSubscriber")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *EmailSubscriber) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EmailSubscriber) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no email_subscribers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(emailSubscriberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	emailSubscriberUpsertCacheMut.RLock()
	cache, cached := emailSubscriberUpsertCache[key]
	emailSubscriberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			emailSubscriberAllColumns,
			emailSubscriberColumnsWithDefault,
			emailSubscriberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			emailSubscriberAllColumns,
			emailSubscriberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert email_subscribers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(emailSubscriberPrimaryKeyColumns))
			copy(conflict, emailSubscriberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"email_subscribers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(emailSubscriberType, emailSubscriberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(emailSubscriberType, emailSubscriberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert email_subscribers")
	}

	if !cached {
		emailSubscriberUpsertCacheMut.Lock()
		emailSubscriberUpsertCache[key] = cache
		emailSubscriberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single EmailSubscriber record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *EmailSubscriber) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single EmailSubscriber record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EmailSubscriber) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no EmailSubscriber provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), emailSubscriberPrimaryKeyMapping)
	sql := "DELETE FROM \"email_subscribers\" WHERE \"email\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from email_subscribers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for email_subscribers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q emailSubscriberQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q emailSubscriberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no emailSubscriberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from email_subscribers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for email_subscribers")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o EmailSubscriberSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmailSubscriberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(emailSubscriberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailSubscriberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"email_subscribers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, emailSubscriberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from emailSubscriber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for email_subscribers")
	}

	if len(emailSubscriberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *EmailSubscriber) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no EmailSubscriber provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EmailSubscriber) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmailSubscriber(ctx, exec, o.Email)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmailSubscriberSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty EmailSubscriberSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmailSubscriberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmailSubscriberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailSubscriberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"email_subscribers\".* FROM \"email_subscribers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, emailSubscriberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in EmailSubscriberSlice")
	}

	*o = slice

	return nil
}

// EmailSubscriberExistsG checks if the EmailSubscriber row exists.
func EmailSubscriberExistsG(ctx context.Context, email string) (bool, error) {
	return EmailSubscriberExists(ctx, boil.GetContextDB(), email)
}

// EmailSubscriberExists checks if the EmailSubscriber row exists.
func EmailSubscriberExists(ctx context.Context, exec boil.ContextExecutor, email string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"email_subscribers\" where \"email\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, email)
	}
	row := exec.QueryRowContext(ctx, sql, email)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if email_subscribers exists")
	}

	return exists, nil
}

// Exists checks if the EmailSubscriber row exists.
func (o *EmailSubscriber) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EmailSubscriberExists(ctx, exec, o.Email)
}
