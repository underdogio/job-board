// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CloudflareBrowserStat is an object representing the database table.
type CloudflareBrowserStat struct {
	Date            time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	PageViews       int64     `boil:"page_views" json:"page_views" toml:"page_views" yaml:"page_views"`
	UaBrowserFamily string    `boil:"ua_browser_family" json:"ua_browser_family" toml:"ua_browser_family" yaml:"ua_browser_family"`

	R *cloudflareBrowserStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cloudflareBrowserStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CloudflareBrowserStatColumns = struct {
	Date            string
	PageViews       string
	UaBrowserFamily string
}{
	Date:            "date",
	PageViews:       "page_views",
	UaBrowserFamily: "ua_browser_family",
}

var CloudflareBrowserStatTableColumns = struct {
	Date            string
	PageViews       string
	UaBrowserFamily string
}{
	Date:            "cloudflare_browser_stats.date",
	PageViews:       "cloudflare_browser_stats.page_views",
	UaBrowserFamily: "cloudflare_browser_stats.ua_browser_family",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CloudflareBrowserStatWhere = struct {
	Date            whereHelpertime_Time
	PageViews       whereHelperint64
	UaBrowserFamily whereHelperstring
}{
	Date:            whereHelpertime_Time{field: "\"cloudflare_browser_stats\".\"date\""},
	PageViews:       whereHelperint64{field: "\"cloudflare_browser_stats\".\"page_views\""},
	UaBrowserFamily: whereHelperstring{field: "\"cloudflare_browser_stats\".\"ua_browser_family\""},
}

// CloudflareBrowserStatRels is where relationship names are stored.
var CloudflareBrowserStatRels = struct {
}{}

// cloudflareBrowserStatR is where relationships are stored.
type cloudflareBrowserStatR struct {
}

// NewStruct creates a new relationship struct
func (*cloudflareBrowserStatR) NewStruct() *cloudflareBrowserStatR {
	return &cloudflareBrowserStatR{}
}

// cloudflareBrowserStatL is where Load methods for each relationship are stored.
type cloudflareBrowserStatL struct{}

var (
	cloudflareBrowserStatAllColumns            = []string{"date", "page_views", "ua_browser_family"}
	cloudflareBrowserStatColumnsWithoutDefault = []string{"date", "page_views", "ua_browser_family"}
	cloudflareBrowserStatColumnsWithDefault    = []string{}
	cloudflareBrowserStatPrimaryKeyColumns     = []string{"date", "ua_browser_family"}
	cloudflareBrowserStatGeneratedColumns      = []string{}
)

type (
	// CloudflareBrowserStatSlice is an alias for a slice of pointers to CloudflareBrowserStat.
	// This should almost always be used instead of []CloudflareBrowserStat.
	CloudflareBrowserStatSlice []*CloudflareBrowserStat
	// CloudflareBrowserStatHook is the signature for custom CloudflareBrowserStat hook methods
	CloudflareBrowserStatHook func(context.Context, boil.ContextExecutor, *CloudflareBrowserStat) error

	cloudflareBrowserStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cloudflareBrowserStatType                 = reflect.TypeOf(&CloudflareBrowserStat{})
	cloudflareBrowserStatMapping              = queries.MakeStructMapping(cloudflareBrowserStatType)
	cloudflareBrowserStatPrimaryKeyMapping, _ = queries.BindMapping(cloudflareBrowserStatType, cloudflareBrowserStatMapping, cloudflareBrowserStatPrimaryKeyColumns)
	cloudflareBrowserStatInsertCacheMut       sync.RWMutex
	cloudflareBrowserStatInsertCache          = make(map[string]insertCache)
	cloudflareBrowserStatUpdateCacheMut       sync.RWMutex
	cloudflareBrowserStatUpdateCache          = make(map[string]updateCache)
	cloudflareBrowserStatUpsertCacheMut       sync.RWMutex
	cloudflareBrowserStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cloudflareBrowserStatAfterSelectHooks []CloudflareBrowserStatHook

var cloudflareBrowserStatBeforeInsertHooks []CloudflareBrowserStatHook
var cloudflareBrowserStatAfterInsertHooks []CloudflareBrowserStatHook

var cloudflareBrowserStatBeforeUpdateHooks []CloudflareBrowserStatHook
var cloudflareBrowserStatAfterUpdateHooks []CloudflareBrowserStatHook

var cloudflareBrowserStatBeforeDeleteHooks []CloudflareBrowserStatHook
var cloudflareBrowserStatAfterDeleteHooks []CloudflareBrowserStatHook

var cloudflareBrowserStatBeforeUpsertHooks []CloudflareBrowserStatHook
var cloudflareBrowserStatAfterUpsertHooks []CloudflareBrowserStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CloudflareBrowserStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareBrowserStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CloudflareBrowserStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareBrowserStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CloudflareBrowserStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareBrowserStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CloudflareBrowserStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareBrowserStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CloudflareBrowserStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareBrowserStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CloudflareBrowserStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareBrowserStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CloudflareBrowserStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareBrowserStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CloudflareBrowserStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareBrowserStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CloudflareBrowserStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareBrowserStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCloudflareBrowserStatHook registers your hook function for all future operations.
func AddCloudflareBrowserStatHook(hookPoint boil.HookPoint, cloudflareBrowserStatHook CloudflareBrowserStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cloudflareBrowserStatAfterSelectHooks = append(cloudflareBrowserStatAfterSelectHooks, cloudflareBrowserStatHook)
	case boil.BeforeInsertHook:
		cloudflareBrowserStatBeforeInsertHooks = append(cloudflareBrowserStatBeforeInsertHooks, cloudflareBrowserStatHook)
	case boil.AfterInsertHook:
		cloudflareBrowserStatAfterInsertHooks = append(cloudflareBrowserStatAfterInsertHooks, cloudflareBrowserStatHook)
	case boil.BeforeUpdateHook:
		cloudflareBrowserStatBeforeUpdateHooks = append(cloudflareBrowserStatBeforeUpdateHooks, cloudflareBrowserStatHook)
	case boil.AfterUpdateHook:
		cloudflareBrowserStatAfterUpdateHooks = append(cloudflareBrowserStatAfterUpdateHooks, cloudflareBrowserStatHook)
	case boil.BeforeDeleteHook:
		cloudflareBrowserStatBeforeDeleteHooks = append(cloudflareBrowserStatBeforeDeleteHooks, cloudflareBrowserStatHook)
	case boil.AfterDeleteHook:
		cloudflareBrowserStatAfterDeleteHooks = append(cloudflareBrowserStatAfterDeleteHooks, cloudflareBrowserStatHook)
	case boil.BeforeUpsertHook:
		cloudflareBrowserStatBeforeUpsertHooks = append(cloudflareBrowserStatBeforeUpsertHooks, cloudflareBrowserStatHook)
	case boil.AfterUpsertHook:
		cloudflareBrowserStatAfterUpsertHooks = append(cloudflareBrowserStatAfterUpsertHooks, cloudflareBrowserStatHook)
	}
}

// OneG returns a single cloudflareBrowserStat record from the query using the global executor.
func (q cloudflareBrowserStatQuery) OneG(ctx context.Context) (*CloudflareBrowserStat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single cloudflareBrowserStat record from the query.
func (q cloudflareBrowserStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CloudflareBrowserStat, error) {
	o := &CloudflareBrowserStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for cloudflare_browser_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CloudflareBrowserStat records from the query using the global executor.
func (q cloudflareBrowserStatQuery) AllG(ctx context.Context) (CloudflareBrowserStatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CloudflareBrowserStat records from the query.
func (q cloudflareBrowserStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (CloudflareBrowserStatSlice, error) {
	var o []*CloudflareBrowserStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to CloudflareBrowserStat slice")
	}

	if len(cloudflareBrowserStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CloudflareBrowserStat records in the query using the global executor
func (q cloudflareBrowserStatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CloudflareBrowserStat records in the query.
func (q cloudflareBrowserStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count cloudflare_browser_stats rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q cloudflareBrowserStatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q cloudflareBrowserStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if cloudflare_browser_stats exists")
	}

	return count > 0, nil
}

// CloudflareBrowserStats retrieves all the records using an executor.
func CloudflareBrowserStats(mods ...qm.QueryMod) cloudflareBrowserStatQuery {
	mods = append(mods, qm.From("\"cloudflare_browser_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cloudflare_browser_stats\".*"})
	}

	return cloudflareBrowserStatQuery{q}
}

// FindCloudflareBrowserStatG retrieves a single record by ID.
func FindCloudflareBrowserStatG(ctx context.Context, date time.Time, uaBrowserFamily string, selectCols ...string) (*CloudflareBrowserStat, error) {
	return FindCloudflareBrowserStat(ctx, boil.GetContextDB(), date, uaBrowserFamily, selectCols...)
}

// FindCloudflareBrowserStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCloudflareBrowserStat(ctx context.Context, exec boil.ContextExecutor, date time.Time, uaBrowserFamily string, selectCols ...string) (*CloudflareBrowserStat, error) {
	cloudflareBrowserStatObj := &CloudflareBrowserStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cloudflare_browser_stats\" where \"date\"=$1 AND \"ua_browser_family\"=$2", sel,
	)

	q := queries.Raw(query, date, uaBrowserFamily)

	err := q.Bind(ctx, exec, cloudflareBrowserStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from cloudflare_browser_stats")
	}

	if err = cloudflareBrowserStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cloudflareBrowserStatObj, err
	}

	return cloudflareBrowserStatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CloudflareBrowserStat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CloudflareBrowserStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no cloudflare_browser_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cloudflareBrowserStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cloudflareBrowserStatInsertCacheMut.RLock()
	cache, cached := cloudflareBrowserStatInsertCache[key]
	cloudflareBrowserStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cloudflareBrowserStatAllColumns,
			cloudflareBrowserStatColumnsWithDefault,
			cloudflareBrowserStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cloudflareBrowserStatType, cloudflareBrowserStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cloudflareBrowserStatType, cloudflareBrowserStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cloudflare_browser_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cloudflare_browser_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into cloudflare_browser_stats")
	}

	if !cached {
		cloudflareBrowserStatInsertCacheMut.Lock()
		cloudflareBrowserStatInsertCache[key] = cache
		cloudflareBrowserStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CloudflareBrowserStat record using the global executor.
// See Update for more documentation.
func (o *CloudflareBrowserStat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CloudflareBrowserStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CloudflareBrowserStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cloudflareBrowserStatUpdateCacheMut.RLock()
	cache, cached := cloudflareBrowserStatUpdateCache[key]
	cloudflareBrowserStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cloudflareBrowserStatAllColumns,
			cloudflareBrowserStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update cloudflare_browser_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cloudflare_browser_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cloudflareBrowserStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cloudflareBrowserStatType, cloudflareBrowserStatMapping, append(wl, cloudflareBrowserStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update cloudflare_browser_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for cloudflare_browser_stats")
	}

	if !cached {
		cloudflareBrowserStatUpdateCacheMut.Lock()
		cloudflareBrowserStatUpdateCache[key] = cache
		cloudflareBrowserStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q cloudflareBrowserStatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q cloudflareBrowserStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for cloudflare_browser_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for cloudflare_browser_stats")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CloudflareBrowserStatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CloudflareBrowserStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareBrowserStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cloudflare_browser_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cloudflareBrowserStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in cloudflareBrowserStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all cloudflareBrowserStat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CloudflareBrowserStat) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CloudflareBrowserStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no cloudflare_browser_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cloudflareBrowserStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cloudflareBrowserStatUpsertCacheMut.RLock()
	cache, cached := cloudflareBrowserStatUpsertCache[key]
	cloudflareBrowserStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cloudflareBrowserStatAllColumns,
			cloudflareBrowserStatColumnsWithDefault,
			cloudflareBrowserStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cloudflareBrowserStatAllColumns,
			cloudflareBrowserStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert cloudflare_browser_stats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cloudflareBrowserStatPrimaryKeyColumns))
			copy(conflict, cloudflareBrowserStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cloudflare_browser_stats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cloudflareBrowserStatType, cloudflareBrowserStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cloudflareBrowserStatType, cloudflareBrowserStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert cloudflare_browser_stats")
	}

	if !cached {
		cloudflareBrowserStatUpsertCacheMut.Lock()
		cloudflareBrowserStatUpsertCache[key] = cache
		cloudflareBrowserStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CloudflareBrowserStat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CloudflareBrowserStat) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CloudflareBrowserStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CloudflareBrowserStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no CloudflareBrowserStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cloudflareBrowserStatPrimaryKeyMapping)
	sql := "DELETE FROM \"cloudflare_browser_stats\" WHERE \"date\"=$1 AND \"ua_browser_family\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from cloudflare_browser_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for cloudflare_browser_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q cloudflareBrowserStatQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q cloudflareBrowserStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no cloudflareBrowserStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from cloudflare_browser_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for cloudflare_browser_stats")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CloudflareBrowserStatSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CloudflareBrowserStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cloudflareBrowserStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareBrowserStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cloudflare_browser_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cloudflareBrowserStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from cloudflareBrowserStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for cloudflare_browser_stats")
	}

	if len(cloudflareBrowserStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CloudflareBrowserStat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no CloudflareBrowserStat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CloudflareBrowserStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCloudflareBrowserStat(ctx, exec, o.Date, o.UaBrowserFamily)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CloudflareBrowserStatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty CloudflareBrowserStatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CloudflareBrowserStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CloudflareBrowserStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareBrowserStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cloudflare_browser_stats\".* FROM \"cloudflare_browser_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cloudflareBrowserStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in CloudflareBrowserStatSlice")
	}

	*o = slice

	return nil
}

// CloudflareBrowserStatExistsG checks if the CloudflareBrowserStat row exists.
func CloudflareBrowserStatExistsG(ctx context.Context, date time.Time, uaBrowserFamily string) (bool, error) {
	return CloudflareBrowserStatExists(ctx, boil.GetContextDB(), date, uaBrowserFamily)
}

// CloudflareBrowserStatExists checks if the CloudflareBrowserStat row exists.
func CloudflareBrowserStatExists(ctx context.Context, exec boil.ContextExecutor, date time.Time, uaBrowserFamily string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cloudflare_browser_stats\" where \"date\"=$1 AND \"ua_browser_family\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, date, uaBrowserFamily)
	}
	row := exec.QueryRowContext(ctx, sql, date, uaBrowserFamily)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if cloudflare_browser_stats exists")
	}

	return exists, nil
}

// Exists checks if the CloudflareBrowserStat row exists.
func (o *CloudflareBrowserStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CloudflareBrowserStatExists(ctx, exec, o.Date, o.UaBrowserFamily)
}
