// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Sitemap is an object representing the database table.
type Sitemap struct {
	Loc        string      `boil:"loc" json:"loc" toml:"loc" yaml:"loc"`
	Changefreq null.String `boil:"changefreq" json:"changefreq,omitempty" toml:"changefreq" yaml:"changefreq,omitempty"`
	Lastmod    null.Time   `boil:"lastmod" json:"lastmod,omitempty" toml:"lastmod" yaml:"lastmod,omitempty"`

	R *sitemapR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sitemapL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SitemapColumns = struct {
	Loc        string
	Changefreq string
	Lastmod    string
}{
	Loc:        "loc",
	Changefreq: "changefreq",
	Lastmod:    "lastmod",
}

var SitemapTableColumns = struct {
	Loc        string
	Changefreq string
	Lastmod    string
}{
	Loc:        "sitemap.loc",
	Changefreq: "sitemap.changefreq",
	Lastmod:    "sitemap.lastmod",
}

// Generated where

var SitemapWhere = struct {
	Loc        whereHelperstring
	Changefreq whereHelpernull_String
	Lastmod    whereHelpernull_Time
}{
	Loc:        whereHelperstring{field: "\"sitemap\".\"loc\""},
	Changefreq: whereHelpernull_String{field: "\"sitemap\".\"changefreq\""},
	Lastmod:    whereHelpernull_Time{field: "\"sitemap\".\"lastmod\""},
}

// SitemapRels is where relationship names are stored.
var SitemapRels = struct {
}{}

// sitemapR is where relationships are stored.
type sitemapR struct {
}

// NewStruct creates a new relationship struct
func (*sitemapR) NewStruct() *sitemapR {
	return &sitemapR{}
}

// sitemapL is where Load methods for each relationship are stored.
type sitemapL struct{}

var (
	sitemapAllColumns            = []string{"loc", "changefreq", "lastmod"}
	sitemapColumnsWithoutDefault = []string{"loc"}
	sitemapColumnsWithDefault    = []string{"changefreq", "lastmod"}
	sitemapPrimaryKeyColumns     = []string{"loc"}
	sitemapGeneratedColumns      = []string{}
)

type (
	// SitemapSlice is an alias for a slice of pointers to Sitemap.
	// This should almost always be used instead of []Sitemap.
	SitemapSlice []*Sitemap
	// SitemapHook is the signature for custom Sitemap hook methods
	SitemapHook func(context.Context, boil.ContextExecutor, *Sitemap) error

	sitemapQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sitemapType                 = reflect.TypeOf(&Sitemap{})
	sitemapMapping              = queries.MakeStructMapping(sitemapType)
	sitemapPrimaryKeyMapping, _ = queries.BindMapping(sitemapType, sitemapMapping, sitemapPrimaryKeyColumns)
	sitemapInsertCacheMut       sync.RWMutex
	sitemapInsertCache          = make(map[string]insertCache)
	sitemapUpdateCacheMut       sync.RWMutex
	sitemapUpdateCache          = make(map[string]updateCache)
	sitemapUpsertCacheMut       sync.RWMutex
	sitemapUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sitemapAfterSelectHooks []SitemapHook

var sitemapBeforeInsertHooks []SitemapHook
var sitemapAfterInsertHooks []SitemapHook

var sitemapBeforeUpdateHooks []SitemapHook
var sitemapAfterUpdateHooks []SitemapHook

var sitemapBeforeDeleteHooks []SitemapHook
var sitemapAfterDeleteHooks []SitemapHook

var sitemapBeforeUpsertHooks []SitemapHook
var sitemapAfterUpsertHooks []SitemapHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Sitemap) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sitemapAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Sitemap) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sitemapBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Sitemap) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sitemapAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Sitemap) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sitemapBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Sitemap) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sitemapAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Sitemap) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sitemapBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Sitemap) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sitemapAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Sitemap) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sitemapBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Sitemap) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sitemapAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSitemapHook registers your hook function for all future operations.
func AddSitemapHook(hookPoint boil.HookPoint, sitemapHook SitemapHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sitemapAfterSelectHooks = append(sitemapAfterSelectHooks, sitemapHook)
	case boil.BeforeInsertHook:
		sitemapBeforeInsertHooks = append(sitemapBeforeInsertHooks, sitemapHook)
	case boil.AfterInsertHook:
		sitemapAfterInsertHooks = append(sitemapAfterInsertHooks, sitemapHook)
	case boil.BeforeUpdateHook:
		sitemapBeforeUpdateHooks = append(sitemapBeforeUpdateHooks, sitemapHook)
	case boil.AfterUpdateHook:
		sitemapAfterUpdateHooks = append(sitemapAfterUpdateHooks, sitemapHook)
	case boil.BeforeDeleteHook:
		sitemapBeforeDeleteHooks = append(sitemapBeforeDeleteHooks, sitemapHook)
	case boil.AfterDeleteHook:
		sitemapAfterDeleteHooks = append(sitemapAfterDeleteHooks, sitemapHook)
	case boil.BeforeUpsertHook:
		sitemapBeforeUpsertHooks = append(sitemapBeforeUpsertHooks, sitemapHook)
	case boil.AfterUpsertHook:
		sitemapAfterUpsertHooks = append(sitemapAfterUpsertHooks, sitemapHook)
	}
}

// OneG returns a single sitemap record from the query using the global executor.
func (q sitemapQuery) OneG(ctx context.Context) (*Sitemap, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single sitemap record from the query.
func (q sitemapQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sitemap, error) {
	o := &Sitemap{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for sitemap")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Sitemap records from the query using the global executor.
func (q sitemapQuery) AllG(ctx context.Context) (SitemapSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Sitemap records from the query.
func (q sitemapQuery) All(ctx context.Context, exec boil.ContextExecutor) (SitemapSlice, error) {
	var o []*Sitemap

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to Sitemap slice")
	}

	if len(sitemapAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Sitemap records in the query using the global executor
func (q sitemapQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Sitemap records in the query.
func (q sitemapQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count sitemap rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q sitemapQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q sitemapQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if sitemap exists")
	}

	return count > 0, nil
}

// Sitemaps retrieves all the records using an executor.
func Sitemaps(mods ...qm.QueryMod) sitemapQuery {
	mods = append(mods, qm.From("\"sitemap\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"sitemap\".*"})
	}

	return sitemapQuery{q}
}

// FindSitemapG retrieves a single record by ID.
func FindSitemapG(ctx context.Context, loc string, selectCols ...string) (*Sitemap, error) {
	return FindSitemap(ctx, boil.GetContextDB(), loc, selectCols...)
}

// FindSitemap retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSitemap(ctx context.Context, exec boil.ContextExecutor, loc string, selectCols ...string) (*Sitemap, error) {
	sitemapObj := &Sitemap{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sitemap\" where \"loc\"=$1", sel,
	)

	q := queries.Raw(query, loc)

	err := q.Bind(ctx, exec, sitemapObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from sitemap")
	}

	if err = sitemapObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sitemapObj, err
	}

	return sitemapObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Sitemap) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sitemap) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no sitemap provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sitemapColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sitemapInsertCacheMut.RLock()
	cache, cached := sitemapInsertCache[key]
	sitemapInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sitemapAllColumns,
			sitemapColumnsWithDefault,
			sitemapColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sitemapType, sitemapMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sitemapType, sitemapMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sitemap\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sitemap\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into sitemap")
	}

	if !cached {
		sitemapInsertCacheMut.Lock()
		sitemapInsertCache[key] = cache
		sitemapInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Sitemap record using the global executor.
// See Update for more documentation.
func (o *Sitemap) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Sitemap.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sitemap) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sitemapUpdateCacheMut.RLock()
	cache, cached := sitemapUpdateCache[key]
	sitemapUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sitemapAllColumns,
			sitemapPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update sitemap, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sitemap\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sitemapPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sitemapType, sitemapMapping, append(wl, sitemapPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update sitemap row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for sitemap")
	}

	if !cached {
		sitemapUpdateCacheMut.Lock()
		sitemapUpdateCache[key] = cache
		sitemapUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q sitemapQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q sitemapQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for sitemap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for sitemap")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SitemapSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SitemapSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sitemapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sitemap\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sitemapPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in sitemap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all sitemap")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Sitemap) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sitemap) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no sitemap provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sitemapColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sitemapUpsertCacheMut.RLock()
	cache, cached := sitemapUpsertCache[key]
	sitemapUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sitemapAllColumns,
			sitemapColumnsWithDefault,
			sitemapColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sitemapAllColumns,
			sitemapPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert sitemap, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sitemapPrimaryKeyColumns))
			copy(conflict, sitemapPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sitemap\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sitemapType, sitemapMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sitemapType, sitemapMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert sitemap")
	}

	if !cached {
		sitemapUpsertCacheMut.Lock()
		sitemapUpsertCache[key] = cache
		sitemapUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Sitemap record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Sitemap) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Sitemap record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sitemap) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no Sitemap provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sitemapPrimaryKeyMapping)
	sql := "DELETE FROM \"sitemap\" WHERE \"loc\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from sitemap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for sitemap")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q sitemapQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q sitemapQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no sitemapQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from sitemap")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for sitemap")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SitemapSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SitemapSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sitemapBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sitemapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sitemap\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sitemapPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from sitemap slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for sitemap")
	}

	if len(sitemapAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Sitemap) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no Sitemap provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sitemap) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSitemap(ctx, exec, o.Loc)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SitemapSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty SitemapSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SitemapSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SitemapSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sitemapPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sitemap\".* FROM \"sitemap\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sitemapPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in SitemapSlice")
	}

	*o = slice

	return nil
}

// SitemapExistsG checks if the Sitemap row exists.
func SitemapExistsG(ctx context.Context, loc string) (bool, error) {
	return SitemapExists(ctx, boil.GetContextDB(), loc)
}

// SitemapExists checks if the Sitemap row exists.
func SitemapExists(ctx context.Context, exec boil.ContextExecutor, loc string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sitemap\" where \"loc\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, loc)
	}
	row := exec.QueryRowContext(ctx, sql, loc)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if sitemap exists")
	}

	return exists, nil
}

// Exists checks if the Sitemap row exists.
func (o *Sitemap) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SitemapExists(ctx, exec, o.Loc)
}
