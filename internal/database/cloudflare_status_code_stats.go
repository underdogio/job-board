// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CloudflareStatusCodeStat is an object representing the database table.
type CloudflareStatusCodeStat struct {
	Date       time.Time `boil:"date" json:"date" toml:"date" yaml:"date"`
	StatusCode int       `boil:"status_code" json:"status_code" toml:"status_code" yaml:"status_code"`
	Requests   int64     `boil:"requests" json:"requests" toml:"requests" yaml:"requests"`

	R *cloudflareStatusCodeStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cloudflareStatusCodeStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CloudflareStatusCodeStatColumns = struct {
	Date       string
	StatusCode string
	Requests   string
}{
	Date:       "date",
	StatusCode: "status_code",
	Requests:   "requests",
}

var CloudflareStatusCodeStatTableColumns = struct {
	Date       string
	StatusCode string
	Requests   string
}{
	Date:       "cloudflare_status_code_stats.date",
	StatusCode: "cloudflare_status_code_stats.status_code",
	Requests:   "cloudflare_status_code_stats.requests",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CloudflareStatusCodeStatWhere = struct {
	Date       whereHelpertime_Time
	StatusCode whereHelperint
	Requests   whereHelperint64
}{
	Date:       whereHelpertime_Time{field: "\"cloudflare_status_code_stats\".\"date\""},
	StatusCode: whereHelperint{field: "\"cloudflare_status_code_stats\".\"status_code\""},
	Requests:   whereHelperint64{field: "\"cloudflare_status_code_stats\".\"requests\""},
}

// CloudflareStatusCodeStatRels is where relationship names are stored.
var CloudflareStatusCodeStatRels = struct {
}{}

// cloudflareStatusCodeStatR is where relationships are stored.
type cloudflareStatusCodeStatR struct {
}

// NewStruct creates a new relationship struct
func (*cloudflareStatusCodeStatR) NewStruct() *cloudflareStatusCodeStatR {
	return &cloudflareStatusCodeStatR{}
}

// cloudflareStatusCodeStatL is where Load methods for each relationship are stored.
type cloudflareStatusCodeStatL struct{}

var (
	cloudflareStatusCodeStatAllColumns            = []string{"date", "status_code", "requests"}
	cloudflareStatusCodeStatColumnsWithoutDefault = []string{"date", "status_code", "requests"}
	cloudflareStatusCodeStatColumnsWithDefault    = []string{}
	cloudflareStatusCodeStatPrimaryKeyColumns     = []string{"date", "requests"}
	cloudflareStatusCodeStatGeneratedColumns      = []string{}
)

type (
	// CloudflareStatusCodeStatSlice is an alias for a slice of pointers to CloudflareStatusCodeStat.
	// This should almost always be used instead of []CloudflareStatusCodeStat.
	CloudflareStatusCodeStatSlice []*CloudflareStatusCodeStat
	// CloudflareStatusCodeStatHook is the signature for custom CloudflareStatusCodeStat hook methods
	CloudflareStatusCodeStatHook func(context.Context, boil.ContextExecutor, *CloudflareStatusCodeStat) error

	cloudflareStatusCodeStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cloudflareStatusCodeStatType                 = reflect.TypeOf(&CloudflareStatusCodeStat{})
	cloudflareStatusCodeStatMapping              = queries.MakeStructMapping(cloudflareStatusCodeStatType)
	cloudflareStatusCodeStatPrimaryKeyMapping, _ = queries.BindMapping(cloudflareStatusCodeStatType, cloudflareStatusCodeStatMapping, cloudflareStatusCodeStatPrimaryKeyColumns)
	cloudflareStatusCodeStatInsertCacheMut       sync.RWMutex
	cloudflareStatusCodeStatInsertCache          = make(map[string]insertCache)
	cloudflareStatusCodeStatUpdateCacheMut       sync.RWMutex
	cloudflareStatusCodeStatUpdateCache          = make(map[string]updateCache)
	cloudflareStatusCodeStatUpsertCacheMut       sync.RWMutex
	cloudflareStatusCodeStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cloudflareStatusCodeStatAfterSelectHooks []CloudflareStatusCodeStatHook

var cloudflareStatusCodeStatBeforeInsertHooks []CloudflareStatusCodeStatHook
var cloudflareStatusCodeStatAfterInsertHooks []CloudflareStatusCodeStatHook

var cloudflareStatusCodeStatBeforeUpdateHooks []CloudflareStatusCodeStatHook
var cloudflareStatusCodeStatAfterUpdateHooks []CloudflareStatusCodeStatHook

var cloudflareStatusCodeStatBeforeDeleteHooks []CloudflareStatusCodeStatHook
var cloudflareStatusCodeStatAfterDeleteHooks []CloudflareStatusCodeStatHook

var cloudflareStatusCodeStatBeforeUpsertHooks []CloudflareStatusCodeStatHook
var cloudflareStatusCodeStatAfterUpsertHooks []CloudflareStatusCodeStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CloudflareStatusCodeStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatusCodeStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CloudflareStatusCodeStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatusCodeStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CloudflareStatusCodeStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatusCodeStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CloudflareStatusCodeStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatusCodeStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CloudflareStatusCodeStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatusCodeStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CloudflareStatusCodeStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatusCodeStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CloudflareStatusCodeStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatusCodeStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CloudflareStatusCodeStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatusCodeStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CloudflareStatusCodeStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cloudflareStatusCodeStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCloudflareStatusCodeStatHook registers your hook function for all future operations.
func AddCloudflareStatusCodeStatHook(hookPoint boil.HookPoint, cloudflareStatusCodeStatHook CloudflareStatusCodeStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cloudflareStatusCodeStatAfterSelectHooks = append(cloudflareStatusCodeStatAfterSelectHooks, cloudflareStatusCodeStatHook)
	case boil.BeforeInsertHook:
		cloudflareStatusCodeStatBeforeInsertHooks = append(cloudflareStatusCodeStatBeforeInsertHooks, cloudflareStatusCodeStatHook)
	case boil.AfterInsertHook:
		cloudflareStatusCodeStatAfterInsertHooks = append(cloudflareStatusCodeStatAfterInsertHooks, cloudflareStatusCodeStatHook)
	case boil.BeforeUpdateHook:
		cloudflareStatusCodeStatBeforeUpdateHooks = append(cloudflareStatusCodeStatBeforeUpdateHooks, cloudflareStatusCodeStatHook)
	case boil.AfterUpdateHook:
		cloudflareStatusCodeStatAfterUpdateHooks = append(cloudflareStatusCodeStatAfterUpdateHooks, cloudflareStatusCodeStatHook)
	case boil.BeforeDeleteHook:
		cloudflareStatusCodeStatBeforeDeleteHooks = append(cloudflareStatusCodeStatBeforeDeleteHooks, cloudflareStatusCodeStatHook)
	case boil.AfterDeleteHook:
		cloudflareStatusCodeStatAfterDeleteHooks = append(cloudflareStatusCodeStatAfterDeleteHooks, cloudflareStatusCodeStatHook)
	case boil.BeforeUpsertHook:
		cloudflareStatusCodeStatBeforeUpsertHooks = append(cloudflareStatusCodeStatBeforeUpsertHooks, cloudflareStatusCodeStatHook)
	case boil.AfterUpsertHook:
		cloudflareStatusCodeStatAfterUpsertHooks = append(cloudflareStatusCodeStatAfterUpsertHooks, cloudflareStatusCodeStatHook)
	}
}

// OneG returns a single cloudflareStatusCodeStat record from the query using the global executor.
func (q cloudflareStatusCodeStatQuery) OneG(ctx context.Context) (*CloudflareStatusCodeStat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single cloudflareStatusCodeStat record from the query.
func (q cloudflareStatusCodeStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CloudflareStatusCodeStat, error) {
	o := &CloudflareStatusCodeStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for cloudflare_status_code_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CloudflareStatusCodeStat records from the query using the global executor.
func (q cloudflareStatusCodeStatQuery) AllG(ctx context.Context) (CloudflareStatusCodeStatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all CloudflareStatusCodeStat records from the query.
func (q cloudflareStatusCodeStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (CloudflareStatusCodeStatSlice, error) {
	var o []*CloudflareStatusCodeStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to CloudflareStatusCodeStat slice")
	}

	if len(cloudflareStatusCodeStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CloudflareStatusCodeStat records in the query using the global executor
func (q cloudflareStatusCodeStatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all CloudflareStatusCodeStat records in the query.
func (q cloudflareStatusCodeStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count cloudflare_status_code_stats rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q cloudflareStatusCodeStatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q cloudflareStatusCodeStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if cloudflare_status_code_stats exists")
	}

	return count > 0, nil
}

// CloudflareStatusCodeStats retrieves all the records using an executor.
func CloudflareStatusCodeStats(mods ...qm.QueryMod) cloudflareStatusCodeStatQuery {
	mods = append(mods, qm.From("\"cloudflare_status_code_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"cloudflare_status_code_stats\".*"})
	}

	return cloudflareStatusCodeStatQuery{q}
}

// FindCloudflareStatusCodeStatG retrieves a single record by ID.
func FindCloudflareStatusCodeStatG(ctx context.Context, date time.Time, requests int64, selectCols ...string) (*CloudflareStatusCodeStat, error) {
	return FindCloudflareStatusCodeStat(ctx, boil.GetContextDB(), date, requests, selectCols...)
}

// FindCloudflareStatusCodeStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCloudflareStatusCodeStat(ctx context.Context, exec boil.ContextExecutor, date time.Time, requests int64, selectCols ...string) (*CloudflareStatusCodeStat, error) {
	cloudflareStatusCodeStatObj := &CloudflareStatusCodeStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cloudflare_status_code_stats\" where \"date\"=$1 AND \"requests\"=$2", sel,
	)

	q := queries.Raw(query, date, requests)

	err := q.Bind(ctx, exec, cloudflareStatusCodeStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from cloudflare_status_code_stats")
	}

	if err = cloudflareStatusCodeStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cloudflareStatusCodeStatObj, err
	}

	return cloudflareStatusCodeStatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CloudflareStatusCodeStat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CloudflareStatusCodeStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no cloudflare_status_code_stats provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cloudflareStatusCodeStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cloudflareStatusCodeStatInsertCacheMut.RLock()
	cache, cached := cloudflareStatusCodeStatInsertCache[key]
	cloudflareStatusCodeStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cloudflareStatusCodeStatAllColumns,
			cloudflareStatusCodeStatColumnsWithDefault,
			cloudflareStatusCodeStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cloudflareStatusCodeStatType, cloudflareStatusCodeStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cloudflareStatusCodeStatType, cloudflareStatusCodeStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cloudflare_status_code_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cloudflare_status_code_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into cloudflare_status_code_stats")
	}

	if !cached {
		cloudflareStatusCodeStatInsertCacheMut.Lock()
		cloudflareStatusCodeStatInsertCache[key] = cache
		cloudflareStatusCodeStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single CloudflareStatusCodeStat record using the global executor.
// See Update for more documentation.
func (o *CloudflareStatusCodeStat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the CloudflareStatusCodeStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CloudflareStatusCodeStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cloudflareStatusCodeStatUpdateCacheMut.RLock()
	cache, cached := cloudflareStatusCodeStatUpdateCache[key]
	cloudflareStatusCodeStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cloudflareStatusCodeStatAllColumns,
			cloudflareStatusCodeStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update cloudflare_status_code_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cloudflare_status_code_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cloudflareStatusCodeStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cloudflareStatusCodeStatType, cloudflareStatusCodeStatMapping, append(wl, cloudflareStatusCodeStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update cloudflare_status_code_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for cloudflare_status_code_stats")
	}

	if !cached {
		cloudflareStatusCodeStatUpdateCacheMut.Lock()
		cloudflareStatusCodeStatUpdateCache[key] = cache
		cloudflareStatusCodeStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q cloudflareStatusCodeStatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q cloudflareStatusCodeStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for cloudflare_status_code_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for cloudflare_status_code_stats")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CloudflareStatusCodeStatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CloudflareStatusCodeStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareStatusCodeStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cloudflare_status_code_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cloudflareStatusCodeStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in cloudflareStatusCodeStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all cloudflareStatusCodeStat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CloudflareStatusCodeStat) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CloudflareStatusCodeStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no cloudflare_status_code_stats provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cloudflareStatusCodeStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cloudflareStatusCodeStatUpsertCacheMut.RLock()
	cache, cached := cloudflareStatusCodeStatUpsertCache[key]
	cloudflareStatusCodeStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cloudflareStatusCodeStatAllColumns,
			cloudflareStatusCodeStatColumnsWithDefault,
			cloudflareStatusCodeStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cloudflareStatusCodeStatAllColumns,
			cloudflareStatusCodeStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert cloudflare_status_code_stats, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cloudflareStatusCodeStatPrimaryKeyColumns))
			copy(conflict, cloudflareStatusCodeStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cloudflare_status_code_stats\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cloudflareStatusCodeStatType, cloudflareStatusCodeStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cloudflareStatusCodeStatType, cloudflareStatusCodeStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert cloudflare_status_code_stats")
	}

	if !cached {
		cloudflareStatusCodeStatUpsertCacheMut.Lock()
		cloudflareStatusCodeStatUpsertCache[key] = cache
		cloudflareStatusCodeStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single CloudflareStatusCodeStat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CloudflareStatusCodeStat) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single CloudflareStatusCodeStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CloudflareStatusCodeStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no CloudflareStatusCodeStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cloudflareStatusCodeStatPrimaryKeyMapping)
	sql := "DELETE FROM \"cloudflare_status_code_stats\" WHERE \"date\"=$1 AND \"requests\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from cloudflare_status_code_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for cloudflare_status_code_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q cloudflareStatusCodeStatQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q cloudflareStatusCodeStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no cloudflareStatusCodeStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from cloudflare_status_code_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for cloudflare_status_code_stats")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CloudflareStatusCodeStatSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CloudflareStatusCodeStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cloudflareStatusCodeStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareStatusCodeStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cloudflare_status_code_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cloudflareStatusCodeStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from cloudflareStatusCodeStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for cloudflare_status_code_stats")
	}

	if len(cloudflareStatusCodeStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CloudflareStatusCodeStat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no CloudflareStatusCodeStat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CloudflareStatusCodeStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCloudflareStatusCodeStat(ctx, exec, o.Date, o.Requests)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CloudflareStatusCodeStatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty CloudflareStatusCodeStatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CloudflareStatusCodeStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CloudflareStatusCodeStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cloudflareStatusCodeStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cloudflare_status_code_stats\".* FROM \"cloudflare_status_code_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cloudflareStatusCodeStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in CloudflareStatusCodeStatSlice")
	}

	*o = slice

	return nil
}

// CloudflareStatusCodeStatExistsG checks if the CloudflareStatusCodeStat row exists.
func CloudflareStatusCodeStatExistsG(ctx context.Context, date time.Time, requests int64) (bool, error) {
	return CloudflareStatusCodeStatExists(ctx, boil.GetContextDB(), date, requests)
}

// CloudflareStatusCodeStatExists checks if the CloudflareStatusCodeStat row exists.
func CloudflareStatusCodeStatExists(ctx context.Context, exec boil.ContextExecutor, date time.Time, requests int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cloudflare_status_code_stats\" where \"date\"=$1 AND \"requests\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, date, requests)
	}
	row := exec.QueryRowContext(ctx, sql, date, requests)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if cloudflare_status_code_stats exists")
	}

	return exists, nil
}

// Exists checks if the CloudflareStatusCodeStat row exists.
func (o *CloudflareStatusCodeStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CloudflareStatusCodeStatExists(ctx, exec, o.Date, o.Requests)
}
