// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RecruiterProfile is an object representing the database table.
type RecruiterProfile struct {
	ID         string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email      string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	CompanyURL string      `boil:"company_url" json:"company_url" toml:"company_url" yaml:"company_url"`
	Slug       string      `boil:"slug" json:"slug" toml:"slug" yaml:"slug"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	Name       null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`

	R *recruiterProfileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recruiterProfileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecruiterProfileColumns = struct {
	ID         string
	Email      string
	CompanyURL string
	Slug       string
	CreatedAt  string
	UpdatedAt  string
	Name       string
}{
	ID:         "id",
	Email:      "email",
	CompanyURL: "company_url",
	Slug:       "slug",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	Name:       "name",
}

var RecruiterProfileTableColumns = struct {
	ID         string
	Email      string
	CompanyURL string
	Slug       string
	CreatedAt  string
	UpdatedAt  string
	Name       string
}{
	ID:         "recruiter_profile.id",
	Email:      "recruiter_profile.email",
	CompanyURL: "recruiter_profile.company_url",
	Slug:       "recruiter_profile.slug",
	CreatedAt:  "recruiter_profile.created_at",
	UpdatedAt:  "recruiter_profile.updated_at",
	Name:       "recruiter_profile.name",
}

// Generated where

var RecruiterProfileWhere = struct {
	ID         whereHelperstring
	Email      whereHelperstring
	CompanyURL whereHelperstring
	Slug       whereHelperstring
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpernull_Time
	Name       whereHelpernull_String
}{
	ID:         whereHelperstring{field: "\"recruiter_profile\".\"id\""},
	Email:      whereHelperstring{field: "\"recruiter_profile\".\"email\""},
	CompanyURL: whereHelperstring{field: "\"recruiter_profile\".\"company_url\""},
	Slug:       whereHelperstring{field: "\"recruiter_profile\".\"slug\""},
	CreatedAt:  whereHelpertime_Time{field: "\"recruiter_profile\".\"created_at\""},
	UpdatedAt:  whereHelpernull_Time{field: "\"recruiter_profile\".\"updated_at\""},
	Name:       whereHelpernull_String{field: "\"recruiter_profile\".\"name\""},
}

// RecruiterProfileRels is where relationship names are stored.
var RecruiterProfileRels = struct {
}{}

// recruiterProfileR is where relationships are stored.
type recruiterProfileR struct {
}

// NewStruct creates a new relationship struct
func (*recruiterProfileR) NewStruct() *recruiterProfileR {
	return &recruiterProfileR{}
}

// recruiterProfileL is where Load methods for each relationship are stored.
type recruiterProfileL struct{}

var (
	recruiterProfileAllColumns            = []string{"id", "email", "company_url", "slug", "created_at", "updated_at", "name"}
	recruiterProfileColumnsWithoutDefault = []string{"id", "email", "company_url", "slug", "created_at"}
	recruiterProfileColumnsWithDefault    = []string{"updated_at", "name"}
	recruiterProfilePrimaryKeyColumns     = []string{"id"}
	recruiterProfileGeneratedColumns      = []string{}
)

type (
	// RecruiterProfileSlice is an alias for a slice of pointers to RecruiterProfile.
	// This should almost always be used instead of []RecruiterProfile.
	RecruiterProfileSlice []*RecruiterProfile
	// RecruiterProfileHook is the signature for custom RecruiterProfile hook methods
	RecruiterProfileHook func(context.Context, boil.ContextExecutor, *RecruiterProfile) error

	recruiterProfileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recruiterProfileType                 = reflect.TypeOf(&RecruiterProfile{})
	recruiterProfileMapping              = queries.MakeStructMapping(recruiterProfileType)
	recruiterProfilePrimaryKeyMapping, _ = queries.BindMapping(recruiterProfileType, recruiterProfileMapping, recruiterProfilePrimaryKeyColumns)
	recruiterProfileInsertCacheMut       sync.RWMutex
	recruiterProfileInsertCache          = make(map[string]insertCache)
	recruiterProfileUpdateCacheMut       sync.RWMutex
	recruiterProfileUpdateCache          = make(map[string]updateCache)
	recruiterProfileUpsertCacheMut       sync.RWMutex
	recruiterProfileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recruiterProfileAfterSelectHooks []RecruiterProfileHook

var recruiterProfileBeforeInsertHooks []RecruiterProfileHook
var recruiterProfileAfterInsertHooks []RecruiterProfileHook

var recruiterProfileBeforeUpdateHooks []RecruiterProfileHook
var recruiterProfileAfterUpdateHooks []RecruiterProfileHook

var recruiterProfileBeforeDeleteHooks []RecruiterProfileHook
var recruiterProfileAfterDeleteHooks []RecruiterProfileHook

var recruiterProfileBeforeUpsertHooks []RecruiterProfileHook
var recruiterProfileAfterUpsertHooks []RecruiterProfileHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecruiterProfile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recruiterProfileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecruiterProfile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recruiterProfileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecruiterProfile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recruiterProfileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecruiterProfile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recruiterProfileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecruiterProfile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recruiterProfileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecruiterProfile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recruiterProfileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecruiterProfile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recruiterProfileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecruiterProfile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recruiterProfileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecruiterProfile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recruiterProfileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecruiterProfileHook registers your hook function for all future operations.
func AddRecruiterProfileHook(hookPoint boil.HookPoint, recruiterProfileHook RecruiterProfileHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recruiterProfileAfterSelectHooks = append(recruiterProfileAfterSelectHooks, recruiterProfileHook)
	case boil.BeforeInsertHook:
		recruiterProfileBeforeInsertHooks = append(recruiterProfileBeforeInsertHooks, recruiterProfileHook)
	case boil.AfterInsertHook:
		recruiterProfileAfterInsertHooks = append(recruiterProfileAfterInsertHooks, recruiterProfileHook)
	case boil.BeforeUpdateHook:
		recruiterProfileBeforeUpdateHooks = append(recruiterProfileBeforeUpdateHooks, recruiterProfileHook)
	case boil.AfterUpdateHook:
		recruiterProfileAfterUpdateHooks = append(recruiterProfileAfterUpdateHooks, recruiterProfileHook)
	case boil.BeforeDeleteHook:
		recruiterProfileBeforeDeleteHooks = append(recruiterProfileBeforeDeleteHooks, recruiterProfileHook)
	case boil.AfterDeleteHook:
		recruiterProfileAfterDeleteHooks = append(recruiterProfileAfterDeleteHooks, recruiterProfileHook)
	case boil.BeforeUpsertHook:
		recruiterProfileBeforeUpsertHooks = append(recruiterProfileBeforeUpsertHooks, recruiterProfileHook)
	case boil.AfterUpsertHook:
		recruiterProfileAfterUpsertHooks = append(recruiterProfileAfterUpsertHooks, recruiterProfileHook)
	}
}

// OneG returns a single recruiterProfile record from the query using the global executor.
func (q recruiterProfileQuery) OneG(ctx context.Context) (*RecruiterProfile, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single recruiterProfile record from the query.
func (q recruiterProfileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecruiterProfile, error) {
	o := &RecruiterProfile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for recruiter_profile")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RecruiterProfile records from the query using the global executor.
func (q recruiterProfileQuery) AllG(ctx context.Context) (RecruiterProfileSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RecruiterProfile records from the query.
func (q recruiterProfileQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecruiterProfileSlice, error) {
	var o []*RecruiterProfile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to RecruiterProfile slice")
	}

	if len(recruiterProfileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RecruiterProfile records in the query using the global executor
func (q recruiterProfileQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RecruiterProfile records in the query.
func (q recruiterProfileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count recruiter_profile rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q recruiterProfileQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q recruiterProfileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if recruiter_profile exists")
	}

	return count > 0, nil
}

// RecruiterProfiles retrieves all the records using an executor.
func RecruiterProfiles(mods ...qm.QueryMod) recruiterProfileQuery {
	mods = append(mods, qm.From("\"recruiter_profile\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"recruiter_profile\".*"})
	}

	return recruiterProfileQuery{q}
}

// FindRecruiterProfileG retrieves a single record by ID.
func FindRecruiterProfileG(ctx context.Context, iD string, selectCols ...string) (*RecruiterProfile, error) {
	return FindRecruiterProfile(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRecruiterProfile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecruiterProfile(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RecruiterProfile, error) {
	recruiterProfileObj := &RecruiterProfile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recruiter_profile\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recruiterProfileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from recruiter_profile")
	}

	if err = recruiterProfileObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recruiterProfileObj, err
	}

	return recruiterProfileObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RecruiterProfile) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecruiterProfile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no recruiter_profile provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recruiterProfileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recruiterProfileInsertCacheMut.RLock()
	cache, cached := recruiterProfileInsertCache[key]
	recruiterProfileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recruiterProfileAllColumns,
			recruiterProfileColumnsWithDefault,
			recruiterProfileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recruiterProfileType, recruiterProfileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recruiterProfileType, recruiterProfileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recruiter_profile\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recruiter_profile\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into recruiter_profile")
	}

	if !cached {
		recruiterProfileInsertCacheMut.Lock()
		recruiterProfileInsertCache[key] = cache
		recruiterProfileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RecruiterProfile record using the global executor.
// See Update for more documentation.
func (o *RecruiterProfile) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RecruiterProfile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecruiterProfile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recruiterProfileUpdateCacheMut.RLock()
	cache, cached := recruiterProfileUpdateCache[key]
	recruiterProfileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recruiterProfileAllColumns,
			recruiterProfilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update recruiter_profile, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recruiter_profile\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recruiterProfilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recruiterProfileType, recruiterProfileMapping, append(wl, recruiterProfilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update recruiter_profile row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for recruiter_profile")
	}

	if !cached {
		recruiterProfileUpdateCacheMut.Lock()
		recruiterProfileUpdateCache[key] = cache
		recruiterProfileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q recruiterProfileQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q recruiterProfileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for recruiter_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for recruiter_profile")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RecruiterProfileSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecruiterProfileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recruiterProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recruiter_profile\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recruiterProfilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in recruiterProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all recruiterProfile")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RecruiterProfile) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecruiterProfile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no recruiter_profile provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recruiterProfileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recruiterProfileUpsertCacheMut.RLock()
	cache, cached := recruiterProfileUpsertCache[key]
	recruiterProfileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recruiterProfileAllColumns,
			recruiterProfileColumnsWithDefault,
			recruiterProfileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			recruiterProfileAllColumns,
			recruiterProfilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert recruiter_profile, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recruiterProfilePrimaryKeyColumns))
			copy(conflict, recruiterProfilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recruiter_profile\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recruiterProfileType, recruiterProfileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recruiterProfileType, recruiterProfileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert recruiter_profile")
	}

	if !cached {
		recruiterProfileUpsertCacheMut.Lock()
		recruiterProfileUpsertCache[key] = cache
		recruiterProfileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RecruiterProfile record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RecruiterProfile) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RecruiterProfile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecruiterProfile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no RecruiterProfile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recruiterProfilePrimaryKeyMapping)
	sql := "DELETE FROM \"recruiter_profile\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from recruiter_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for recruiter_profile")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q recruiterProfileQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q recruiterProfileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no recruiterProfileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from recruiter_profile")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for recruiter_profile")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RecruiterProfileSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecruiterProfileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recruiterProfileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recruiterProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recruiter_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recruiterProfilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from recruiterProfile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for recruiter_profile")
	}

	if len(recruiterProfileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RecruiterProfile) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no RecruiterProfile provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecruiterProfile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecruiterProfile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecruiterProfileSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty RecruiterProfileSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecruiterProfileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecruiterProfileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recruiterProfilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recruiter_profile\".* FROM \"recruiter_profile\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recruiterProfilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in RecruiterProfileSlice")
	}

	*o = slice

	return nil
}

// RecruiterProfileExistsG checks if the RecruiterProfile row exists.
func RecruiterProfileExistsG(ctx context.Context, iD string) (bool, error) {
	return RecruiterProfileExists(ctx, boil.GetContextDB(), iD)
}

// RecruiterProfileExists checks if the RecruiterProfile row exists.
func RecruiterProfileExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recruiter_profile\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if recruiter_profile exists")
	}

	return exists, nil
}

// Exists checks if the RecruiterProfile row exists.
func (o *RecruiterProfile) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RecruiterProfileExists(ctx, exec, o.ID)
}
