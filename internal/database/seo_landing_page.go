// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SeoLandingPage is an object representing the database table.
type SeoLandingPage struct {
	URI      string `boil:"uri" json:"uri" toml:"uri" yaml:"uri"`
	Location string `boil:"location" json:"location" toml:"location" yaml:"location"`
	Skill    string `boil:"skill" json:"skill" toml:"skill" yaml:"skill"`

	R *seoLandingPageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seoLandingPageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeoLandingPageColumns = struct {
	URI      string
	Location string
	Skill    string
}{
	URI:      "uri",
	Location: "location",
	Skill:    "skill",
}

var SeoLandingPageTableColumns = struct {
	URI      string
	Location string
	Skill    string
}{
	URI:      "seo_landing_page.uri",
	Location: "seo_landing_page.location",
	Skill:    "seo_landing_page.skill",
}

// Generated where

var SeoLandingPageWhere = struct {
	URI      whereHelperstring
	Location whereHelperstring
	Skill    whereHelperstring
}{
	URI:      whereHelperstring{field: "\"seo_landing_page\".\"uri\""},
	Location: whereHelperstring{field: "\"seo_landing_page\".\"location\""},
	Skill:    whereHelperstring{field: "\"seo_landing_page\".\"skill\""},
}

// SeoLandingPageRels is where relationship names are stored.
var SeoLandingPageRels = struct {
}{}

// seoLandingPageR is where relationships are stored.
type seoLandingPageR struct {
}

// NewStruct creates a new relationship struct
func (*seoLandingPageR) NewStruct() *seoLandingPageR {
	return &seoLandingPageR{}
}

// seoLandingPageL is where Load methods for each relationship are stored.
type seoLandingPageL struct{}

var (
	seoLandingPageAllColumns            = []string{"uri", "location", "skill"}
	seoLandingPageColumnsWithoutDefault = []string{"uri", "location", "skill"}
	seoLandingPageColumnsWithDefault    = []string{}
	seoLandingPagePrimaryKeyColumns     = []string{"uri"}
	seoLandingPageGeneratedColumns      = []string{}
)

type (
	// SeoLandingPageSlice is an alias for a slice of pointers to SeoLandingPage.
	// This should almost always be used instead of []SeoLandingPage.
	SeoLandingPageSlice []*SeoLandingPage
	// SeoLandingPageHook is the signature for custom SeoLandingPage hook methods
	SeoLandingPageHook func(context.Context, boil.ContextExecutor, *SeoLandingPage) error

	seoLandingPageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seoLandingPageType                 = reflect.TypeOf(&SeoLandingPage{})
	seoLandingPageMapping              = queries.MakeStructMapping(seoLandingPageType)
	seoLandingPagePrimaryKeyMapping, _ = queries.BindMapping(seoLandingPageType, seoLandingPageMapping, seoLandingPagePrimaryKeyColumns)
	seoLandingPageInsertCacheMut       sync.RWMutex
	seoLandingPageInsertCache          = make(map[string]insertCache)
	seoLandingPageUpdateCacheMut       sync.RWMutex
	seoLandingPageUpdateCache          = make(map[string]updateCache)
	seoLandingPageUpsertCacheMut       sync.RWMutex
	seoLandingPageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var seoLandingPageAfterSelectHooks []SeoLandingPageHook

var seoLandingPageBeforeInsertHooks []SeoLandingPageHook
var seoLandingPageAfterInsertHooks []SeoLandingPageHook

var seoLandingPageBeforeUpdateHooks []SeoLandingPageHook
var seoLandingPageAfterUpdateHooks []SeoLandingPageHook

var seoLandingPageBeforeDeleteHooks []SeoLandingPageHook
var seoLandingPageAfterDeleteHooks []SeoLandingPageHook

var seoLandingPageBeforeUpsertHooks []SeoLandingPageHook
var seoLandingPageAfterUpsertHooks []SeoLandingPageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SeoLandingPage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoLandingPageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SeoLandingPage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoLandingPageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SeoLandingPage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoLandingPageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SeoLandingPage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoLandingPageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SeoLandingPage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoLandingPageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SeoLandingPage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoLandingPageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SeoLandingPage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoLandingPageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SeoLandingPage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoLandingPageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SeoLandingPage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoLandingPageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSeoLandingPageHook registers your hook function for all future operations.
func AddSeoLandingPageHook(hookPoint boil.HookPoint, seoLandingPageHook SeoLandingPageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		seoLandingPageAfterSelectHooks = append(seoLandingPageAfterSelectHooks, seoLandingPageHook)
	case boil.BeforeInsertHook:
		seoLandingPageBeforeInsertHooks = append(seoLandingPageBeforeInsertHooks, seoLandingPageHook)
	case boil.AfterInsertHook:
		seoLandingPageAfterInsertHooks = append(seoLandingPageAfterInsertHooks, seoLandingPageHook)
	case boil.BeforeUpdateHook:
		seoLandingPageBeforeUpdateHooks = append(seoLandingPageBeforeUpdateHooks, seoLandingPageHook)
	case boil.AfterUpdateHook:
		seoLandingPageAfterUpdateHooks = append(seoLandingPageAfterUpdateHooks, seoLandingPageHook)
	case boil.BeforeDeleteHook:
		seoLandingPageBeforeDeleteHooks = append(seoLandingPageBeforeDeleteHooks, seoLandingPageHook)
	case boil.AfterDeleteHook:
		seoLandingPageAfterDeleteHooks = append(seoLandingPageAfterDeleteHooks, seoLandingPageHook)
	case boil.BeforeUpsertHook:
		seoLandingPageBeforeUpsertHooks = append(seoLandingPageBeforeUpsertHooks, seoLandingPageHook)
	case boil.AfterUpsertHook:
		seoLandingPageAfterUpsertHooks = append(seoLandingPageAfterUpsertHooks, seoLandingPageHook)
	}
}

// OneG returns a single seoLandingPage record from the query using the global executor.
func (q seoLandingPageQuery) OneG(ctx context.Context) (*SeoLandingPage, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single seoLandingPage record from the query.
func (q seoLandingPageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SeoLandingPage, error) {
	o := &SeoLandingPage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for seo_landing_page")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all SeoLandingPage records from the query using the global executor.
func (q seoLandingPageQuery) AllG(ctx context.Context) (SeoLandingPageSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all SeoLandingPage records from the query.
func (q seoLandingPageQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeoLandingPageSlice, error) {
	var o []*SeoLandingPage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to SeoLandingPage slice")
	}

	if len(seoLandingPageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all SeoLandingPage records in the query using the global executor
func (q seoLandingPageQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all SeoLandingPage records in the query.
func (q seoLandingPageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count seo_landing_page rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q seoLandingPageQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q seoLandingPageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if seo_landing_page exists")
	}

	return count > 0, nil
}

// SeoLandingPages retrieves all the records using an executor.
func SeoLandingPages(mods ...qm.QueryMod) seoLandingPageQuery {
	mods = append(mods, qm.From("\"seo_landing_page\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"seo_landing_page\".*"})
	}

	return seoLandingPageQuery{q}
}

// FindSeoLandingPageG retrieves a single record by ID.
func FindSeoLandingPageG(ctx context.Context, uRI string, selectCols ...string) (*SeoLandingPage, error) {
	return FindSeoLandingPage(ctx, boil.GetContextDB(), uRI, selectCols...)
}

// FindSeoLandingPage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeoLandingPage(ctx context.Context, exec boil.ContextExecutor, uRI string, selectCols ...string) (*SeoLandingPage, error) {
	seoLandingPageObj := &SeoLandingPage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"seo_landing_page\" where \"uri\"=$1", sel,
	)

	q := queries.Raw(query, uRI)

	err := q.Bind(ctx, exec, seoLandingPageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from seo_landing_page")
	}

	if err = seoLandingPageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return seoLandingPageObj, err
	}

	return seoLandingPageObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SeoLandingPage) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SeoLandingPage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no seo_landing_page provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seoLandingPageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seoLandingPageInsertCacheMut.RLock()
	cache, cached := seoLandingPageInsertCache[key]
	seoLandingPageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seoLandingPageAllColumns,
			seoLandingPageColumnsWithDefault,
			seoLandingPageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seoLandingPageType, seoLandingPageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seoLandingPageType, seoLandingPageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"seo_landing_page\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"seo_landing_page\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into seo_landing_page")
	}

	if !cached {
		seoLandingPageInsertCacheMut.Lock()
		seoLandingPageInsertCache[key] = cache
		seoLandingPageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single SeoLandingPage record using the global executor.
// See Update for more documentation.
func (o *SeoLandingPage) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the SeoLandingPage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SeoLandingPage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	seoLandingPageUpdateCacheMut.RLock()
	cache, cached := seoLandingPageUpdateCache[key]
	seoLandingPageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seoLandingPageAllColumns,
			seoLandingPagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update seo_landing_page, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"seo_landing_page\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, seoLandingPagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seoLandingPageType, seoLandingPageMapping, append(wl, seoLandingPagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update seo_landing_page row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for seo_landing_page")
	}

	if !cached {
		seoLandingPageUpdateCacheMut.Lock()
		seoLandingPageUpdateCache[key] = cache
		seoLandingPageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q seoLandingPageQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q seoLandingPageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for seo_landing_page")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for seo_landing_page")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SeoLandingPageSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeoLandingPageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seoLandingPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"seo_landing_page\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, seoLandingPagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in seoLandingPage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all seoLandingPage")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SeoLandingPage) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SeoLandingPage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no seo_landing_page provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seoLandingPageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seoLandingPageUpsertCacheMut.RLock()
	cache, cached := seoLandingPageUpsertCache[key]
	seoLandingPageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			seoLandingPageAllColumns,
			seoLandingPageColumnsWithDefault,
			seoLandingPageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			seoLandingPageAllColumns,
			seoLandingPagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert seo_landing_page, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(seoLandingPagePrimaryKeyColumns))
			copy(conflict, seoLandingPagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"seo_landing_page\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(seoLandingPageType, seoLandingPageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seoLandingPageType, seoLandingPageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert seo_landing_page")
	}

	if !cached {
		seoLandingPageUpsertCacheMut.Lock()
		seoLandingPageUpsertCache[key] = cache
		seoLandingPageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single SeoLandingPage record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SeoLandingPage) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single SeoLandingPage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SeoLandingPage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no SeoLandingPage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seoLandingPagePrimaryKeyMapping)
	sql := "DELETE FROM \"seo_landing_page\" WHERE \"uri\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from seo_landing_page")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for seo_landing_page")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q seoLandingPageQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q seoLandingPageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no seoLandingPageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from seo_landing_page")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for seo_landing_page")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SeoLandingPageSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeoLandingPageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(seoLandingPageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seoLandingPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"seo_landing_page\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seoLandingPagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from seoLandingPage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for seo_landing_page")
	}

	if len(seoLandingPageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SeoLandingPage) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no SeoLandingPage provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SeoLandingPage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSeoLandingPage(ctx, exec, o.URI)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeoLandingPageSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty SeoLandingPageSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeoLandingPageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeoLandingPageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seoLandingPagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"seo_landing_page\".* FROM \"seo_landing_page\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seoLandingPagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in SeoLandingPageSlice")
	}

	*o = slice

	return nil
}

// SeoLandingPageExistsG checks if the SeoLandingPage row exists.
func SeoLandingPageExistsG(ctx context.Context, uRI string) (bool, error) {
	return SeoLandingPageExists(ctx, boil.GetContextDB(), uRI)
}

// SeoLandingPageExists checks if the SeoLandingPage row exists.
func SeoLandingPageExists(ctx context.Context, exec boil.ContextExecutor, uRI string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"seo_landing_page\" where \"uri\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uRI)
	}
	row := exec.QueryRowContext(ctx, sql, uRI)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if seo_landing_page exists")
	}

	return exists, nil
}

// Exists checks if the SeoLandingPage row exists.
func (o *SeoLandingPage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SeoLandingPageExists(ctx, exec, o.URI)
}
