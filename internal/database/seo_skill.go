// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SeoSkill is an object representing the database table.
type SeoSkill struct {
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *seoSkillR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L seoSkillL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeoSkillColumns = struct {
	Name string
}{
	Name: "name",
}

var SeoSkillTableColumns = struct {
	Name string
}{
	Name: "seo_skill.name",
}

// Generated where

var SeoSkillWhere = struct {
	Name whereHelperstring
}{
	Name: whereHelperstring{field: "\"seo_skill\".\"name\""},
}

// SeoSkillRels is where relationship names are stored.
var SeoSkillRels = struct {
}{}

// seoSkillR is where relationships are stored.
type seoSkillR struct {
}

// NewStruct creates a new relationship struct
func (*seoSkillR) NewStruct() *seoSkillR {
	return &seoSkillR{}
}

// seoSkillL is where Load methods for each relationship are stored.
type seoSkillL struct{}

var (
	seoSkillAllColumns            = []string{"name"}
	seoSkillColumnsWithoutDefault = []string{"name"}
	seoSkillColumnsWithDefault    = []string{}
	seoSkillPrimaryKeyColumns     = []string{"name"}
	seoSkillGeneratedColumns      = []string{}
)

type (
	// SeoSkillSlice is an alias for a slice of pointers to SeoSkill.
	// This should almost always be used instead of []SeoSkill.
	SeoSkillSlice []*SeoSkill
	// SeoSkillHook is the signature for custom SeoSkill hook methods
	SeoSkillHook func(context.Context, boil.ContextExecutor, *SeoSkill) error

	seoSkillQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seoSkillType                 = reflect.TypeOf(&SeoSkill{})
	seoSkillMapping              = queries.MakeStructMapping(seoSkillType)
	seoSkillPrimaryKeyMapping, _ = queries.BindMapping(seoSkillType, seoSkillMapping, seoSkillPrimaryKeyColumns)
	seoSkillInsertCacheMut       sync.RWMutex
	seoSkillInsertCache          = make(map[string]insertCache)
	seoSkillUpdateCacheMut       sync.RWMutex
	seoSkillUpdateCache          = make(map[string]updateCache)
	seoSkillUpsertCacheMut       sync.RWMutex
	seoSkillUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var seoSkillAfterSelectHooks []SeoSkillHook

var seoSkillBeforeInsertHooks []SeoSkillHook
var seoSkillAfterInsertHooks []SeoSkillHook

var seoSkillBeforeUpdateHooks []SeoSkillHook
var seoSkillAfterUpdateHooks []SeoSkillHook

var seoSkillBeforeDeleteHooks []SeoSkillHook
var seoSkillAfterDeleteHooks []SeoSkillHook

var seoSkillBeforeUpsertHooks []SeoSkillHook
var seoSkillAfterUpsertHooks []SeoSkillHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SeoSkill) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSkillAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SeoSkill) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSkillBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SeoSkill) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSkillAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SeoSkill) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSkillBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SeoSkill) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSkillAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SeoSkill) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSkillBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SeoSkill) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSkillAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SeoSkill) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSkillBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SeoSkill) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seoSkillAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSeoSkillHook registers your hook function for all future operations.
func AddSeoSkillHook(hookPoint boil.HookPoint, seoSkillHook SeoSkillHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		seoSkillAfterSelectHooks = append(seoSkillAfterSelectHooks, seoSkillHook)
	case boil.BeforeInsertHook:
		seoSkillBeforeInsertHooks = append(seoSkillBeforeInsertHooks, seoSkillHook)
	case boil.AfterInsertHook:
		seoSkillAfterInsertHooks = append(seoSkillAfterInsertHooks, seoSkillHook)
	case boil.BeforeUpdateHook:
		seoSkillBeforeUpdateHooks = append(seoSkillBeforeUpdateHooks, seoSkillHook)
	case boil.AfterUpdateHook:
		seoSkillAfterUpdateHooks = append(seoSkillAfterUpdateHooks, seoSkillHook)
	case boil.BeforeDeleteHook:
		seoSkillBeforeDeleteHooks = append(seoSkillBeforeDeleteHooks, seoSkillHook)
	case boil.AfterDeleteHook:
		seoSkillAfterDeleteHooks = append(seoSkillAfterDeleteHooks, seoSkillHook)
	case boil.BeforeUpsertHook:
		seoSkillBeforeUpsertHooks = append(seoSkillBeforeUpsertHooks, seoSkillHook)
	case boil.AfterUpsertHook:
		seoSkillAfterUpsertHooks = append(seoSkillAfterUpsertHooks, seoSkillHook)
	}
}

// OneG returns a single seoSkill record from the query using the global executor.
func (q seoSkillQuery) OneG(ctx context.Context) (*SeoSkill, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single seoSkill record from the query.
func (q seoSkillQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SeoSkill, error) {
	o := &SeoSkill{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for seo_skill")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all SeoSkill records from the query using the global executor.
func (q seoSkillQuery) AllG(ctx context.Context) (SeoSkillSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all SeoSkill records from the query.
func (q seoSkillQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeoSkillSlice, error) {
	var o []*SeoSkill

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to SeoSkill slice")
	}

	if len(seoSkillAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all SeoSkill records in the query using the global executor
func (q seoSkillQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all SeoSkill records in the query.
func (q seoSkillQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count seo_skill rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q seoSkillQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q seoSkillQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if seo_skill exists")
	}

	return count > 0, nil
}

// SeoSkills retrieves all the records using an executor.
func SeoSkills(mods ...qm.QueryMod) seoSkillQuery {
	mods = append(mods, qm.From("\"seo_skill\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"seo_skill\".*"})
	}

	return seoSkillQuery{q}
}

// FindSeoSkillG retrieves a single record by ID.
func FindSeoSkillG(ctx context.Context, name string, selectCols ...string) (*SeoSkill, error) {
	return FindSeoSkill(ctx, boil.GetContextDB(), name, selectCols...)
}

// FindSeoSkill retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeoSkill(ctx context.Context, exec boil.ContextExecutor, name string, selectCols ...string) (*SeoSkill, error) {
	seoSkillObj := &SeoSkill{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"seo_skill\" where \"name\"=$1", sel,
	)

	q := queries.Raw(query, name)

	err := q.Bind(ctx, exec, seoSkillObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from seo_skill")
	}

	if err = seoSkillObj.doAfterSelectHooks(ctx, exec); err != nil {
		return seoSkillObj, err
	}

	return seoSkillObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SeoSkill) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SeoSkill) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no seo_skill provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seoSkillColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seoSkillInsertCacheMut.RLock()
	cache, cached := seoSkillInsertCache[key]
	seoSkillInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seoSkillAllColumns,
			seoSkillColumnsWithDefault,
			seoSkillColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seoSkillType, seoSkillMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seoSkillType, seoSkillMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"seo_skill\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"seo_skill\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into seo_skill")
	}

	if !cached {
		seoSkillInsertCacheMut.Lock()
		seoSkillInsertCache[key] = cache
		seoSkillInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single SeoSkill record using the global executor.
// See Update for more documentation.
func (o *SeoSkill) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the SeoSkill.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SeoSkill) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	seoSkillUpdateCacheMut.RLock()
	cache, cached := seoSkillUpdateCache[key]
	seoSkillUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seoSkillAllColumns,
			seoSkillPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update seo_skill, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"seo_skill\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, seoSkillPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seoSkillType, seoSkillMapping, append(wl, seoSkillPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update seo_skill row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for seo_skill")
	}

	if !cached {
		seoSkillUpdateCacheMut.Lock()
		seoSkillUpdateCache[key] = cache
		seoSkillUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q seoSkillQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q seoSkillQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for seo_skill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for seo_skill")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SeoSkillSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeoSkillSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seoSkillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"seo_skill\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, seoSkillPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in seoSkill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all seoSkill")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SeoSkill) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SeoSkill) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no seo_skill provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seoSkillColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seoSkillUpsertCacheMut.RLock()
	cache, cached := seoSkillUpsertCache[key]
	seoSkillUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			seoSkillAllColumns,
			seoSkillColumnsWithDefault,
			seoSkillColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			seoSkillAllColumns,
			seoSkillPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert seo_skill, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(seoSkillPrimaryKeyColumns))
			copy(conflict, seoSkillPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"seo_skill\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(seoSkillType, seoSkillMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seoSkillType, seoSkillMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert seo_skill")
	}

	if !cached {
		seoSkillUpsertCacheMut.Lock()
		seoSkillUpsertCache[key] = cache
		seoSkillUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single SeoSkill record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SeoSkill) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single SeoSkill record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SeoSkill) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no SeoSkill provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seoSkillPrimaryKeyMapping)
	sql := "DELETE FROM \"seo_skill\" WHERE \"name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from seo_skill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for seo_skill")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q seoSkillQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q seoSkillQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no seoSkillQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from seo_skill")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for seo_skill")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o SeoSkillSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeoSkillSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(seoSkillBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seoSkillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"seo_skill\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seoSkillPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from seoSkill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for seo_skill")
	}

	if len(seoSkillAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SeoSkill) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no SeoSkill provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SeoSkill) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSeoSkill(ctx, exec, o.Name)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeoSkillSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty SeoSkillSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeoSkillSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeoSkillSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seoSkillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"seo_skill\".* FROM \"seo_skill\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seoSkillPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in SeoSkillSlice")
	}

	*o = slice

	return nil
}

// SeoSkillExistsG checks if the SeoSkill row exists.
func SeoSkillExistsG(ctx context.Context, name string) (bool, error) {
	return SeoSkillExists(ctx, boil.GetContextDB(), name)
}

// SeoSkillExists checks if the SeoSkill row exists.
func SeoSkillExists(ctx context.Context, exec boil.ContextExecutor, name string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"seo_skill\" where \"name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, name)
	}
	row := exec.QueryRowContext(ctx, sql, name)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if seo_skill exists")
	}

	return exists, nil
}

// Exists checks if the SeoSkill row exists.
func (o *SeoSkill) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SeoSkillExists(ctx, exec, o.Name)
}
