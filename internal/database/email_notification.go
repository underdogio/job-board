// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EmailNotification is an object representing the database table.
type EmailNotification struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email     string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	EventType string    `boil:"event_type" json:"event_type" toml:"event_type" yaml:"event_type"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	JobID     string    `boil:"job_id" json:"job_id" toml:"job_id" yaml:"job_id"`

	R *emailNotificationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L emailNotificationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmailNotificationColumns = struct {
	ID        string
	Email     string
	EventType string
	CreatedAt string
	JobID     string
}{
	ID:        "id",
	Email:     "email",
	EventType: "event_type",
	CreatedAt: "created_at",
	JobID:     "job_id",
}

var EmailNotificationTableColumns = struct {
	ID        string
	Email     string
	EventType string
	CreatedAt string
	JobID     string
}{
	ID:        "email_notification.id",
	Email:     "email_notification.email",
	EventType: "email_notification.event_type",
	CreatedAt: "email_notification.created_at",
	JobID:     "email_notification.job_id",
}

// Generated where

var EmailNotificationWhere = struct {
	ID        whereHelperstring
	Email     whereHelperstring
	EventType whereHelperstring
	CreatedAt whereHelpertime_Time
	JobID     whereHelperstring
}{
	ID:        whereHelperstring{field: "\"email_notification\".\"id\""},
	Email:     whereHelperstring{field: "\"email_notification\".\"email\""},
	EventType: whereHelperstring{field: "\"email_notification\".\"event_type\""},
	CreatedAt: whereHelpertime_Time{field: "\"email_notification\".\"created_at\""},
	JobID:     whereHelperstring{field: "\"email_notification\".\"job_id\""},
}

// EmailNotificationRels is where relationship names are stored.
var EmailNotificationRels = struct {
}{}

// emailNotificationR is where relationships are stored.
type emailNotificationR struct {
}

// NewStruct creates a new relationship struct
func (*emailNotificationR) NewStruct() *emailNotificationR {
	return &emailNotificationR{}
}

// emailNotificationL is where Load methods for each relationship are stored.
type emailNotificationL struct{}

var (
	emailNotificationAllColumns            = []string{"id", "email", "event_type", "created_at", "job_id"}
	emailNotificationColumnsWithoutDefault = []string{"id", "email", "event_type", "created_at", "job_id"}
	emailNotificationColumnsWithDefault    = []string{}
	emailNotificationPrimaryKeyColumns     = []string{"id"}
	emailNotificationGeneratedColumns      = []string{}
)

type (
	// EmailNotificationSlice is an alias for a slice of pointers to EmailNotification.
	// This should almost always be used instead of []EmailNotification.
	EmailNotificationSlice []*EmailNotification
	// EmailNotificationHook is the signature for custom EmailNotification hook methods
	EmailNotificationHook func(context.Context, boil.ContextExecutor, *EmailNotification) error

	emailNotificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	emailNotificationType                 = reflect.TypeOf(&EmailNotification{})
	emailNotificationMapping              = queries.MakeStructMapping(emailNotificationType)
	emailNotificationPrimaryKeyMapping, _ = queries.BindMapping(emailNotificationType, emailNotificationMapping, emailNotificationPrimaryKeyColumns)
	emailNotificationInsertCacheMut       sync.RWMutex
	emailNotificationInsertCache          = make(map[string]insertCache)
	emailNotificationUpdateCacheMut       sync.RWMutex
	emailNotificationUpdateCache          = make(map[string]updateCache)
	emailNotificationUpsertCacheMut       sync.RWMutex
	emailNotificationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var emailNotificationAfterSelectHooks []EmailNotificationHook

var emailNotificationBeforeInsertHooks []EmailNotificationHook
var emailNotificationAfterInsertHooks []EmailNotificationHook

var emailNotificationBeforeUpdateHooks []EmailNotificationHook
var emailNotificationAfterUpdateHooks []EmailNotificationHook

var emailNotificationBeforeDeleteHooks []EmailNotificationHook
var emailNotificationAfterDeleteHooks []EmailNotificationHook

var emailNotificationBeforeUpsertHooks []EmailNotificationHook
var emailNotificationAfterUpsertHooks []EmailNotificationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EmailNotification) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailNotificationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EmailNotification) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailNotificationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EmailNotification) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailNotificationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EmailNotification) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailNotificationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EmailNotification) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailNotificationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EmailNotification) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailNotificationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EmailNotification) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailNotificationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EmailNotification) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailNotificationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EmailNotification) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailNotificationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmailNotificationHook registers your hook function for all future operations.
func AddEmailNotificationHook(hookPoint boil.HookPoint, emailNotificationHook EmailNotificationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		emailNotificationAfterSelectHooks = append(emailNotificationAfterSelectHooks, emailNotificationHook)
	case boil.BeforeInsertHook:
		emailNotificationBeforeInsertHooks = append(emailNotificationBeforeInsertHooks, emailNotificationHook)
	case boil.AfterInsertHook:
		emailNotificationAfterInsertHooks = append(emailNotificationAfterInsertHooks, emailNotificationHook)
	case boil.BeforeUpdateHook:
		emailNotificationBeforeUpdateHooks = append(emailNotificationBeforeUpdateHooks, emailNotificationHook)
	case boil.AfterUpdateHook:
		emailNotificationAfterUpdateHooks = append(emailNotificationAfterUpdateHooks, emailNotificationHook)
	case boil.BeforeDeleteHook:
		emailNotificationBeforeDeleteHooks = append(emailNotificationBeforeDeleteHooks, emailNotificationHook)
	case boil.AfterDeleteHook:
		emailNotificationAfterDeleteHooks = append(emailNotificationAfterDeleteHooks, emailNotificationHook)
	case boil.BeforeUpsertHook:
		emailNotificationBeforeUpsertHooks = append(emailNotificationBeforeUpsertHooks, emailNotificationHook)
	case boil.AfterUpsertHook:
		emailNotificationAfterUpsertHooks = append(emailNotificationAfterUpsertHooks, emailNotificationHook)
	}
}

// OneG returns a single emailNotification record from the query using the global executor.
func (q emailNotificationQuery) OneG(ctx context.Context) (*EmailNotification, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single emailNotification record from the query.
func (q emailNotificationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EmailNotification, error) {
	o := &EmailNotification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for email_notification")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all EmailNotification records from the query using the global executor.
func (q emailNotificationQuery) AllG(ctx context.Context) (EmailNotificationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all EmailNotification records from the query.
func (q emailNotificationQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmailNotificationSlice, error) {
	var o []*EmailNotification

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to EmailNotification slice")
	}

	if len(emailNotificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all EmailNotification records in the query using the global executor
func (q emailNotificationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all EmailNotification records in the query.
func (q emailNotificationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count email_notification rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q emailNotificationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q emailNotificationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if email_notification exists")
	}

	return count > 0, nil
}

// EmailNotifications retrieves all the records using an executor.
func EmailNotifications(mods ...qm.QueryMod) emailNotificationQuery {
	mods = append(mods, qm.From("\"email_notification\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"email_notification\".*"})
	}

	return emailNotificationQuery{q}
}

// FindEmailNotificationG retrieves a single record by ID.
func FindEmailNotificationG(ctx context.Context, iD string, selectCols ...string) (*EmailNotification, error) {
	return FindEmailNotification(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindEmailNotification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmailNotification(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*EmailNotification, error) {
	emailNotificationObj := &EmailNotification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"email_notification\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, emailNotificationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from email_notification")
	}

	if err = emailNotificationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return emailNotificationObj, err
	}

	return emailNotificationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *EmailNotification) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EmailNotification) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no email_notification provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(emailNotificationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	emailNotificationInsertCacheMut.RLock()
	cache, cached := emailNotificationInsertCache[key]
	emailNotificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			emailNotificationAllColumns,
			emailNotificationColumnsWithDefault,
			emailNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(emailNotificationType, emailNotificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(emailNotificationType, emailNotificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"email_notification\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"email_notification\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into email_notification")
	}

	if !cached {
		emailNotificationInsertCacheMut.Lock()
		emailNotificationInsertCache[key] = cache
		emailNotificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single EmailNotification record using the global executor.
// See Update for more documentation.
func (o *EmailNotification) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the EmailNotification.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EmailNotification) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	emailNotificationUpdateCacheMut.RLock()
	cache, cached := emailNotificationUpdateCache[key]
	emailNotificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			emailNotificationAllColumns,
			emailNotificationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update email_notification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"email_notification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, emailNotificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(emailNotificationType, emailNotificationMapping, append(wl, emailNotificationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update email_notification row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for email_notification")
	}

	if !cached {
		emailNotificationUpdateCacheMut.Lock()
		emailNotificationUpdateCache[key] = cache
		emailNotificationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q emailNotificationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q emailNotificationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for email_notification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for email_notification")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EmailNotificationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmailNotificationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"email_notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, emailNotificationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in emailNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all emailNotification")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *EmailNotification) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EmailNotification) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no email_notification provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(emailNotificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	emailNotificationUpsertCacheMut.RLock()
	cache, cached := emailNotificationUpsertCache[key]
	emailNotificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			emailNotificationAllColumns,
			emailNotificationColumnsWithDefault,
			emailNotificationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			emailNotificationAllColumns,
			emailNotificationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert email_notification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(emailNotificationPrimaryKeyColumns))
			copy(conflict, emailNotificationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"email_notification\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(emailNotificationType, emailNotificationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(emailNotificationType, emailNotificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert email_notification")
	}

	if !cached {
		emailNotificationUpsertCacheMut.Lock()
		emailNotificationUpsertCache[key] = cache
		emailNotificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single EmailNotification record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *EmailNotification) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single EmailNotification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EmailNotification) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no EmailNotification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), emailNotificationPrimaryKeyMapping)
	sql := "DELETE FROM \"email_notification\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from email_notification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for email_notification")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q emailNotificationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q emailNotificationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no emailNotificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from email_notification")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for email_notification")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o EmailNotificationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmailNotificationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(emailNotificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"email_notification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, emailNotificationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from emailNotification slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for email_notification")
	}

	if len(emailNotificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *EmailNotification) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no EmailNotification provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EmailNotification) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmailNotification(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmailNotificationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty EmailNotificationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmailNotificationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmailNotificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailNotificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"email_notification\".* FROM \"email_notification\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, emailNotificationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in EmailNotificationSlice")
	}

	*o = slice

	return nil
}

// EmailNotificationExistsG checks if the EmailNotification row exists.
func EmailNotificationExistsG(ctx context.Context, iD string) (bool, error) {
	return EmailNotificationExists(ctx, boil.GetContextDB(), iD)
}

// EmailNotificationExists checks if the EmailNotification row exists.
func EmailNotificationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"email_notification\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if email_notification exists")
	}

	return exists, nil
}

// Exists checks if the EmailNotification row exists.
func (o *EmailNotification) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EmailNotificationExists(ctx, exec, o.ID)
}
