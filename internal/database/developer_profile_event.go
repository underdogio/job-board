// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package database

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeveloperProfileEvent is an object representing the database table.
type DeveloperProfileEvent struct {
	ID                 string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventType          string    `boil:"event_type" json:"event_type" toml:"event_type" yaml:"event_type"`
	DeveloperProfileID string    `boil:"developer_profile_id" json:"developer_profile_id" toml:"developer_profile_id" yaml:"developer_profile_id"`
	CreatedAt          time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *developerProfileEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L developerProfileEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeveloperProfileEventColumns = struct {
	ID                 string
	EventType          string
	DeveloperProfileID string
	CreatedAt          string
}{
	ID:                 "id",
	EventType:          "event_type",
	DeveloperProfileID: "developer_profile_id",
	CreatedAt:          "created_at",
}

var DeveloperProfileEventTableColumns = struct {
	ID                 string
	EventType          string
	DeveloperProfileID string
	CreatedAt          string
}{
	ID:                 "developer_profile_event.id",
	EventType:          "developer_profile_event.event_type",
	DeveloperProfileID: "developer_profile_event.developer_profile_id",
	CreatedAt:          "developer_profile_event.created_at",
}

// Generated where

var DeveloperProfileEventWhere = struct {
	ID                 whereHelperstring
	EventType          whereHelperstring
	DeveloperProfileID whereHelperstring
	CreatedAt          whereHelpertime_Time
}{
	ID:                 whereHelperstring{field: "\"developer_profile_event\".\"id\""},
	EventType:          whereHelperstring{field: "\"developer_profile_event\".\"event_type\""},
	DeveloperProfileID: whereHelperstring{field: "\"developer_profile_event\".\"developer_profile_id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"developer_profile_event\".\"created_at\""},
}

// DeveloperProfileEventRels is where relationship names are stored.
var DeveloperProfileEventRels = struct {
	DeveloperProfile string
}{
	DeveloperProfile: "DeveloperProfile",
}

// developerProfileEventR is where relationships are stored.
type developerProfileEventR struct {
	DeveloperProfile *DeveloperProfile `boil:"DeveloperProfile" json:"DeveloperProfile" toml:"DeveloperProfile" yaml:"DeveloperProfile"`
}

// NewStruct creates a new relationship struct
func (*developerProfileEventR) NewStruct() *developerProfileEventR {
	return &developerProfileEventR{}
}

func (r *developerProfileEventR) GetDeveloperProfile() *DeveloperProfile {
	if r == nil {
		return nil
	}
	return r.DeveloperProfile
}

// developerProfileEventL is where Load methods for each relationship are stored.
type developerProfileEventL struct{}

var (
	developerProfileEventAllColumns            = []string{"id", "event_type", "developer_profile_id", "created_at"}
	developerProfileEventColumnsWithoutDefault = []string{"id", "event_type", "developer_profile_id", "created_at"}
	developerProfileEventColumnsWithDefault    = []string{}
	developerProfileEventPrimaryKeyColumns     = []string{"id"}
	developerProfileEventGeneratedColumns      = []string{}
)

type (
	// DeveloperProfileEventSlice is an alias for a slice of pointers to DeveloperProfileEvent.
	// This should almost always be used instead of []DeveloperProfileEvent.
	DeveloperProfileEventSlice []*DeveloperProfileEvent
	// DeveloperProfileEventHook is the signature for custom DeveloperProfileEvent hook methods
	DeveloperProfileEventHook func(context.Context, boil.ContextExecutor, *DeveloperProfileEvent) error

	developerProfileEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	developerProfileEventType                 = reflect.TypeOf(&DeveloperProfileEvent{})
	developerProfileEventMapping              = queries.MakeStructMapping(developerProfileEventType)
	developerProfileEventPrimaryKeyMapping, _ = queries.BindMapping(developerProfileEventType, developerProfileEventMapping, developerProfileEventPrimaryKeyColumns)
	developerProfileEventInsertCacheMut       sync.RWMutex
	developerProfileEventInsertCache          = make(map[string]insertCache)
	developerProfileEventUpdateCacheMut       sync.RWMutex
	developerProfileEventUpdateCache          = make(map[string]updateCache)
	developerProfileEventUpsertCacheMut       sync.RWMutex
	developerProfileEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var developerProfileEventAfterSelectHooks []DeveloperProfileEventHook

var developerProfileEventBeforeInsertHooks []DeveloperProfileEventHook
var developerProfileEventAfterInsertHooks []DeveloperProfileEventHook

var developerProfileEventBeforeUpdateHooks []DeveloperProfileEventHook
var developerProfileEventAfterUpdateHooks []DeveloperProfileEventHook

var developerProfileEventBeforeDeleteHooks []DeveloperProfileEventHook
var developerProfileEventAfterDeleteHooks []DeveloperProfileEventHook

var developerProfileEventBeforeUpsertHooks []DeveloperProfileEventHook
var developerProfileEventAfterUpsertHooks []DeveloperProfileEventHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeveloperProfileEvent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileEventAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeveloperProfileEvent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileEventBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeveloperProfileEvent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileEventAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeveloperProfileEvent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileEventBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeveloperProfileEvent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileEventAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeveloperProfileEvent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileEventBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeveloperProfileEvent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileEventAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeveloperProfileEvent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileEventBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeveloperProfileEvent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerProfileEventAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeveloperProfileEventHook registers your hook function for all future operations.
func AddDeveloperProfileEventHook(hookPoint boil.HookPoint, developerProfileEventHook DeveloperProfileEventHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		developerProfileEventAfterSelectHooks = append(developerProfileEventAfterSelectHooks, developerProfileEventHook)
	case boil.BeforeInsertHook:
		developerProfileEventBeforeInsertHooks = append(developerProfileEventBeforeInsertHooks, developerProfileEventHook)
	case boil.AfterInsertHook:
		developerProfileEventAfterInsertHooks = append(developerProfileEventAfterInsertHooks, developerProfileEventHook)
	case boil.BeforeUpdateHook:
		developerProfileEventBeforeUpdateHooks = append(developerProfileEventBeforeUpdateHooks, developerProfileEventHook)
	case boil.AfterUpdateHook:
		developerProfileEventAfterUpdateHooks = append(developerProfileEventAfterUpdateHooks, developerProfileEventHook)
	case boil.BeforeDeleteHook:
		developerProfileEventBeforeDeleteHooks = append(developerProfileEventBeforeDeleteHooks, developerProfileEventHook)
	case boil.AfterDeleteHook:
		developerProfileEventAfterDeleteHooks = append(developerProfileEventAfterDeleteHooks, developerProfileEventHook)
	case boil.BeforeUpsertHook:
		developerProfileEventBeforeUpsertHooks = append(developerProfileEventBeforeUpsertHooks, developerProfileEventHook)
	case boil.AfterUpsertHook:
		developerProfileEventAfterUpsertHooks = append(developerProfileEventAfterUpsertHooks, developerProfileEventHook)
	}
}

// OneG returns a single developerProfileEvent record from the query using the global executor.
func (q developerProfileEventQuery) OneG(ctx context.Context) (*DeveloperProfileEvent, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single developerProfileEvent record from the query.
func (q developerProfileEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeveloperProfileEvent, error) {
	o := &DeveloperProfileEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: failed to execute a one query for developer_profile_event")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all DeveloperProfileEvent records from the query using the global executor.
func (q developerProfileEventQuery) AllG(ctx context.Context) (DeveloperProfileEventSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all DeveloperProfileEvent records from the query.
func (q developerProfileEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeveloperProfileEventSlice, error) {
	var o []*DeveloperProfileEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "database: failed to assign all query results to DeveloperProfileEvent slice")
	}

	if len(developerProfileEventAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all DeveloperProfileEvent records in the query using the global executor
func (q developerProfileEventQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all DeveloperProfileEvent records in the query.
func (q developerProfileEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to count developer_profile_event rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q developerProfileEventQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q developerProfileEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "database: failed to check if developer_profile_event exists")
	}

	return count > 0, nil
}

// DeveloperProfile pointed to by the foreign key.
func (o *DeveloperProfileEvent) DeveloperProfile(mods ...qm.QueryMod) developerProfileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeveloperProfileID),
	}

	queryMods = append(queryMods, mods...)

	return DeveloperProfiles(queryMods...)
}

// LoadDeveloperProfile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (developerProfileEventL) LoadDeveloperProfile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeveloperProfileEvent interface{}, mods queries.Applicator) error {
	var slice []*DeveloperProfileEvent
	var object *DeveloperProfileEvent

	if singular {
		var ok bool
		object, ok = maybeDeveloperProfileEvent.(*DeveloperProfileEvent)
		if !ok {
			object = new(DeveloperProfileEvent)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeveloperProfileEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeveloperProfileEvent))
			}
		}
	} else {
		s, ok := maybeDeveloperProfileEvent.(*[]*DeveloperProfileEvent)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeveloperProfileEvent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeveloperProfileEvent))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &developerProfileEventR{}
		}
		args = append(args, object.DeveloperProfileID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &developerProfileEventR{}
			}

			for _, a := range args {
				if a == obj.DeveloperProfileID {
					continue Outer
				}
			}

			args = append(args, obj.DeveloperProfileID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`developer_profile`),
		qm.WhereIn(`developer_profile.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeveloperProfile")
	}

	var resultSlice []*DeveloperProfile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeveloperProfile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for developer_profile")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for developer_profile")
	}

	if len(developerProfileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeveloperProfile = foreign
		if foreign.R == nil {
			foreign.R = &developerProfileR{}
		}
		foreign.R.DeveloperProfileEvents = append(foreign.R.DeveloperProfileEvents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeveloperProfileID == foreign.ID {
				local.R.DeveloperProfile = foreign
				if foreign.R == nil {
					foreign.R = &developerProfileR{}
				}
				foreign.R.DeveloperProfileEvents = append(foreign.R.DeveloperProfileEvents, local)
				break
			}
		}
	}

	return nil
}

// SetDeveloperProfileG of the developerProfileEvent to the related item.
// Sets o.R.DeveloperProfile to related.
// Adds o to related.R.DeveloperProfileEvents.
// Uses the global database handle.
func (o *DeveloperProfileEvent) SetDeveloperProfileG(ctx context.Context, insert bool, related *DeveloperProfile) error {
	return o.SetDeveloperProfile(ctx, boil.GetContextDB(), insert, related)
}

// SetDeveloperProfile of the developerProfileEvent to the related item.
// Sets o.R.DeveloperProfile to related.
// Adds o to related.R.DeveloperProfileEvents.
func (o *DeveloperProfileEvent) SetDeveloperProfile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeveloperProfile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"developer_profile_event\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"developer_profile_id"}),
		strmangle.WhereClause("\"", "\"", 2, developerProfileEventPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeveloperProfileID = related.ID
	if o.R == nil {
		o.R = &developerProfileEventR{
			DeveloperProfile: related,
		}
	} else {
		o.R.DeveloperProfile = related
	}

	if related.R == nil {
		related.R = &developerProfileR{
			DeveloperProfileEvents: DeveloperProfileEventSlice{o},
		}
	} else {
		related.R.DeveloperProfileEvents = append(related.R.DeveloperProfileEvents, o)
	}

	return nil
}

// DeveloperProfileEvents retrieves all the records using an executor.
func DeveloperProfileEvents(mods ...qm.QueryMod) developerProfileEventQuery {
	mods = append(mods, qm.From("\"developer_profile_event\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"developer_profile_event\".*"})
	}

	return developerProfileEventQuery{q}
}

// FindDeveloperProfileEventG retrieves a single record by ID.
func FindDeveloperProfileEventG(ctx context.Context, iD string, selectCols ...string) (*DeveloperProfileEvent, error) {
	return FindDeveloperProfileEvent(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDeveloperProfileEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeveloperProfileEvent(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DeveloperProfileEvent, error) {
	developerProfileEventObj := &DeveloperProfileEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"developer_profile_event\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, developerProfileEventObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "database: unable to select from developer_profile_event")
	}

	if err = developerProfileEventObj.doAfterSelectHooks(ctx, exec); err != nil {
		return developerProfileEventObj, err
	}

	return developerProfileEventObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *DeveloperProfileEvent) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeveloperProfileEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("database: no developer_profile_event provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(developerProfileEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	developerProfileEventInsertCacheMut.RLock()
	cache, cached := developerProfileEventInsertCache[key]
	developerProfileEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			developerProfileEventAllColumns,
			developerProfileEventColumnsWithDefault,
			developerProfileEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(developerProfileEventType, developerProfileEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(developerProfileEventType, developerProfileEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"developer_profile_event\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"developer_profile_event\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "database: unable to insert into developer_profile_event")
	}

	if !cached {
		developerProfileEventInsertCacheMut.Lock()
		developerProfileEventInsertCache[key] = cache
		developerProfileEventInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single DeveloperProfileEvent record using the global executor.
// See Update for more documentation.
func (o *DeveloperProfileEvent) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the DeveloperProfileEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeveloperProfileEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	developerProfileEventUpdateCacheMut.RLock()
	cache, cached := developerProfileEventUpdateCache[key]
	developerProfileEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			developerProfileEventAllColumns,
			developerProfileEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("database: unable to update developer_profile_event, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"developer_profile_event\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, developerProfileEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(developerProfileEventType, developerProfileEventMapping, append(wl, developerProfileEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update developer_profile_event row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by update for developer_profile_event")
	}

	if !cached {
		developerProfileEventUpdateCacheMut.Lock()
		developerProfileEventUpdateCache[key] = cache
		developerProfileEventUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q developerProfileEventQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q developerProfileEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all for developer_profile_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected for developer_profile_event")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DeveloperProfileEventSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeveloperProfileEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("database: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerProfileEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"developer_profile_event\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, developerProfileEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to update all in developerProfileEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to retrieve rows affected all in update all developerProfileEvent")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *DeveloperProfileEvent) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeveloperProfileEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("database: no developer_profile_event provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(developerProfileEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	developerProfileEventUpsertCacheMut.RLock()
	cache, cached := developerProfileEventUpsertCache[key]
	developerProfileEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			developerProfileEventAllColumns,
			developerProfileEventColumnsWithDefault,
			developerProfileEventColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			developerProfileEventAllColumns,
			developerProfileEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("database: unable to upsert developer_profile_event, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(developerProfileEventPrimaryKeyColumns))
			copy(conflict, developerProfileEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"developer_profile_event\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(developerProfileEventType, developerProfileEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(developerProfileEventType, developerProfileEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "database: unable to upsert developer_profile_event")
	}

	if !cached {
		developerProfileEventUpsertCacheMut.Lock()
		developerProfileEventUpsertCache[key] = cache
		developerProfileEventUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single DeveloperProfileEvent record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *DeveloperProfileEvent) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single DeveloperProfileEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeveloperProfileEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("database: no DeveloperProfileEvent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), developerProfileEventPrimaryKeyMapping)
	sql := "DELETE FROM \"developer_profile_event\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete from developer_profile_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by delete for developer_profile_event")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q developerProfileEventQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q developerProfileEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("database: no developerProfileEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from developer_profile_event")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for developer_profile_event")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DeveloperProfileEventSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeveloperProfileEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(developerProfileEventBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerProfileEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"developer_profile_event\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, developerProfileEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "database: unable to delete all from developerProfileEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "database: failed to get rows affected by deleteall for developer_profile_event")
	}

	if len(developerProfileEventAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *DeveloperProfileEvent) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: no DeveloperProfileEvent provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeveloperProfileEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeveloperProfileEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeveloperProfileEventSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("database: empty DeveloperProfileEventSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeveloperProfileEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeveloperProfileEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerProfileEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"developer_profile_event\".* FROM \"developer_profile_event\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, developerProfileEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "database: unable to reload all in DeveloperProfileEventSlice")
	}

	*o = slice

	return nil
}

// DeveloperProfileEventExistsG checks if the DeveloperProfileEvent row exists.
func DeveloperProfileEventExistsG(ctx context.Context, iD string) (bool, error) {
	return DeveloperProfileEventExists(ctx, boil.GetContextDB(), iD)
}

// DeveloperProfileEventExists checks if the DeveloperProfileEvent row exists.
func DeveloperProfileEventExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"developer_profile_event\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "database: unable to check if developer_profile_event exists")
	}

	return exists, nil
}

// Exists checks if the DeveloperProfileEvent row exists.
func (o *DeveloperProfileEvent) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeveloperProfileEventExists(ctx, exec, o.ID)
}
